[
    {
        "id": "1",
        "type": "tab",
        "label": "Hardware Monitoring",
        "disabled": false,
        "info": ""
    },
    {
        "id": "774e31ba3313707a",
        "type": "tab",
        "label": "T. Principal PUSRM100",
        "disabled": true,
        "info": "",
        "env": []
    },
    {
        "id": "190ed3e96d0709a5",
        "type": "tab",
        "label": "ADC2",
        "disabled": true,
        "info": "",
        "env": []
    },
    {
        "id": "5abe0cc40f5ad9c5",
        "type": "tab",
        "label": "DVP-04TC",
        "disabled": true,
        "info": "",
        "env": []
    },
    {
        "id": "af530bfa0859125d",
        "type": "tab",
        "label": "ADC_8CH",
        "disabled": true,
        "info": "",
        "env": []
    },
    {
        "id": "9fa46c697055fd5a",
        "type": "tab",
        "label": "T. Principal RTU",
        "disabled": true,
        "info": "",
        "env": []
    },
    {
        "id": "897febeee65a86fd",
        "type": "tab",
        "label": "RTU simplificado",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "99aae1551605c876",
        "type": "tab",
        "label": "PLC_DELTA",
        "disabled": true,
        "info": "",
        "env": []
    },
    {
        "id": "e9c3b7a8.f1b4f8",
        "type": "tab",
        "label": "Prueba Ajuste Temperatura",
        "disabled": true,
        "info": ""
    },
    {
        "id": "1234567890abcdef",
        "type": "tab",
        "label": "ASCII to RTU",
        "disabled": true,
        "info": ""
    },
    {
        "id": "80eb62dedb1dba03",
        "type": "tab",
        "label": "Control VFD",
        "disabled": true,
        "info": ""
    },
    {
        "id": "0abce1a265bb0231",
        "type": "tab",
        "label": "Tablero_influxdb",
        "disabled": true,
        "info": ""
    },
    {
        "id": "6021be6c6d8f4092",
        "type": "tab",
        "label": "DVP-04TC",
        "disabled": true,
        "info": "",
        "env": []
    },
    {
        "id": "28eb5dd89ea0da98",
        "type": "tab",
        "label": "Flow 1",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "4a694e78af934234",
        "type": "modbus-client",
        "name": "PLC_1",
        "clienttype": "tcp",
        "bufferCommands": true,
        "stateLogEnabled": false,
        "queueLogEnabled": false,
        "failureLogEnabled": true,
        "tcpHost": "192.168.0.7",
        "tcpPort": "502",
        "tcpType": "DEFAULT",
        "serialPort": "/dev/ttyUSB",
        "serialType": "RTU-BUFFERD",
        "serialBaudrate": "9600",
        "serialDatabits": "8",
        "serialStopbits": "1",
        "serialParity": "none",
        "serialConnectionDelay": "100",
        "serialAsciiResponseStartDelimiter": "0x3A",
        "unit_id": 100,
        "commandDelay": 1,
        "clientTimeout": 1000,
        "reconnectOnTimeout": true,
        "reconnectTimeout": 2000,
        "parallelUnitIdsAllowed": true,
        "showErrors": false,
        "showWarnings": true,
        "showLogs": true
    },
    {
        "id": "feca9c5ced6ec599",
        "type": "mqtt-broker",
        "name": "mqtt_tb_MP-1.1",
        "broker": "mqtt.thingsboard.cloud",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "ba775fe896e243b7",
        "type": "modbus-client",
        "name": "DVP-04TC_serial",
        "clienttype": "serial",
        "bufferCommands": true,
        "stateLogEnabled": false,
        "queueLogEnabled": true,
        "failureLogEnabled": true,
        "tcpHost": "192.168.1.202",
        "tcpPort": "502",
        "tcpType": "C701",
        "serialPort": "/dev/ttyUSB0",
        "serialType": "ASCII",
        "serialBaudrate": "9600",
        "serialDatabits": "7",
        "serialStopbits": "1",
        "serialParity": "even",
        "serialConnectionDelay": "100",
        "serialAsciiResponseStartDelimiter": "0x3A",
        "unit_id": "1",
        "commandDelay": "1",
        "clientTimeout": "1000",
        "reconnectOnTimeout": true,
        "reconnectTimeout": "2000",
        "parallelUnitIdsAllowed": true,
        "showErrors": true,
        "showWarnings": true,
        "showLogs": true
    },
    {
        "id": "bc1023506614f084",
        "type": "ui-base",
        "name": "Valores sensores",
        "path": "/dashboard",
        "includeClientData": true,
        "acceptsClientConfig": [
            "ui-notification",
            "ui-control"
        ],
        "showPathInSidebar": false,
        "navigationStyle": "default"
    },
    {
        "id": "53bbd3554f5781e9",
        "type": "ui-page",
        "name": "Tablero principal",
        "ui": "bc1023506614f084",
        "path": "/pageN",
        "icon": "home",
        "layout": "grid",
        "theme": "60ac3cbdefc9f2e1",
        "order": 1,
        "className": "",
        "visible": "true",
        "disabled": "false"
    },
    {
        "id": "7c21feeaf5ff947a",
        "type": "ui-group",
        "name": "sensores Flujo",
        "page": "8ed92069bda431ea",
        "width": "3",
        "height": "1",
        "order": 2,
        "showTitle": true,
        "className": "",
        "visible": "true",
        "disabled": "false"
    },
    {
        "id": "60ac3cbdefc9f2e1",
        "type": "ui-theme",
        "name": "Default Theme",
        "colors": {
            "surface": "#ffffff",
            "primary": "#0094ce",
            "bgPage": "#eeeeee",
            "groupBg": "#ffffff",
            "groupOutline": "#cccccc"
        },
        "sizes": {
            "pagePadding": "12px",
            "groupGap": "12px",
            "groupBorderRadius": "4px",
            "widgetGap": "14px"
        }
    },
    {
        "id": "5cdddd25c8083b2f",
        "type": "ui-page",
        "name": "Temperaturas",
        "ui": "bc1023506614f084",
        "path": "/page2",
        "icon": "home",
        "layout": "grid",
        "theme": "60ac3cbdefc9f2e1",
        "order": 2,
        "className": "",
        "visible": "true",
        "disabled": "false"
    },
    {
        "id": "d1e5da8ea7145cd4",
        "type": "ui-group",
        "name": "Columnas De Destilaci√≥n",
        "page": "53bbd3554f5781e9",
        "width": "3",
        "height": "1",
        "order": 2,
        "showTitle": true,
        "className": "",
        "visible": "true",
        "disabled": "false"
    },
    {
        "id": "f1b3a3acb886c48c",
        "type": "modbus-client",
        "name": "ADC_2",
        "clienttype": "tcp",
        "bufferCommands": true,
        "stateLogEnabled": false,
        "queueLogEnabled": false,
        "failureLogEnabled": true,
        "tcpHost": "192.168.1.203",
        "tcpPort": "4196",
        "tcpType": "TCP-RTU-BUFFERED",
        "serialPort": "/dev/ttyUSB",
        "serialType": "RTU",
        "serialBaudrate": "9600",
        "serialDatabits": "8",
        "serialStopbits": "1",
        "serialParity": "none",
        "serialConnectionDelay": "100",
        "serialAsciiResponseStartDelimiter": "0x3A",
        "unit_id": "1",
        "commandDelay": "1",
        "clientTimeout": "1000",
        "reconnectOnTimeout": true,
        "reconnectTimeout": "2000",
        "parallelUnitIdsAllowed": true,
        "showErrors": false,
        "showWarnings": true,
        "showLogs": true
    },
    {
        "id": "8ed92069bda431ea",
        "type": "ui-page",
        "name": "Sensores Flujo",
        "ui": "bc1023506614f084",
        "path": "/page3",
        "icon": "home",
        "layout": "grid",
        "theme": "60ac3cbdefc9f2e1",
        "order": 3,
        "className": "",
        "visible": "true",
        "disabled": "false"
    },
    {
        "id": "d506282cc9925a19",
        "type": "ui-page",
        "name": "Sensores nivel",
        "ui": "bc1023506614f084",
        "path": "/page4",
        "icon": "home",
        "layout": "grid",
        "theme": "60ac3cbdefc9f2e1",
        "order": 4,
        "className": "",
        "visible": "true",
        "disabled": "false"
    },
    {
        "id": "a80aac20c87d2431",
        "type": "ui-group",
        "name": "Sensores nivel",
        "page": "d506282cc9925a19",
        "width": "6",
        "height": "1",
        "order": 1,
        "showTitle": true,
        "className": "",
        "visible": "true",
        "disabled": "false"
    },
    {
        "id": "76ec05f44078dd80",
        "type": "ui-page",
        "name": "Medidores de presion",
        "ui": "bc1023506614f084",
        "path": "/page5",
        "icon": "home",
        "layout": "grid",
        "theme": "60ac3cbdefc9f2e1",
        "order": 5,
        "className": "",
        "visible": "true",
        "disabled": "false"
    },
    {
        "id": "907eabc383ee4497",
        "type": "ui-group",
        "name": "medidores presion",
        "page": "d506282cc9925a19",
        "width": "6",
        "height": "1",
        "order": 2,
        "showTitle": true,
        "className": "",
        "visible": "true",
        "disabled": "false"
    },
    {
        "id": "74ceda570d3e66dc",
        "type": "mqtt-broker",
        "name": "mqtt_tb_MF-3.1",
        "broker": "mqtt.thingsboard.cloud",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "75c0821a42a5cdfb",
        "type": "mqtt-broker",
        "name": "mqtt_tb_MN-2.1",
        "broker": "mqtt.thingsboard.cloud",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "689c5e6207baccbb",
        "type": "mqtt-broker",
        "name": "mqtt_tb_MF-1.1",
        "broker": "mqtt.thingsboard.cloud",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "3f690bb5a526a246",
        "type": "ui-group",
        "name": "Tablero Alimentaci√≥n Sistema",
        "page": "53bbd3554f5781e9",
        "width": "12",
        "height": "2",
        "order": 3,
        "showTitle": true,
        "className": "",
        "visible": "true",
        "disabled": "false"
    },
    {
        "id": "da808a9572da86ac",
        "type": "ui_base",
        "theme": {
            "name": "theme-light",
            "lightTheme": {
                "default": "#0094CE",
                "baseColor": "#0094CE",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": false
            },
            "darkTheme": {
                "default": "#097479",
                "baseColor": "#097479",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": false
            },
            "customTheme": {
                "name": "Untitled Theme 1",
                "default": "#4B7930",
                "baseColor": "#4B7930",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
            },
            "themeState": {
                "base-color": {
                    "default": "#0094CE",
                    "value": "#0094CE",
                    "edited": false
                },
                "page-titlebar-backgroundColor": {
                    "value": "#0094CE",
                    "edited": false
                },
                "page-backgroundColor": {
                    "value": "#fafafa",
                    "edited": false
                },
                "page-sidebar-backgroundColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "group-textColor": {
                    "value": "#1bbfff",
                    "edited": false
                },
                "group-borderColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "group-backgroundColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "widget-textColor": {
                    "value": "#111111",
                    "edited": false
                },
                "widget-backgroundColor": {
                    "value": "#0094ce",
                    "edited": false
                },
                "widget-borderColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "base-font": {
                    "value": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
                }
            },
            "angularTheme": {
                "primary": "indigo",
                "accents": "blue",
                "warn": "red",
                "background": "grey",
                "palette": "light"
            }
        },
        "site": {
            "name": "Node-RED Dashboard",
            "hideToolbar": "false",
            "allowSwipe": "false",
            "lockMenu": "false",
            "allowTempTheme": "true",
            "dateFormat": "DD/MM/YYYY",
            "sizes": {
                "sx": 48,
                "sy": 48,
                "gx": 6,
                "gy": 6,
                "cx": 6,
                "cy": 6,
                "px": 0,
                "py": 0
            }
        }
    },
    {
        "id": "be3423b36e62bb32",
        "type": "ui_tab",
        "name": "Monitoreo",
        "icon": "dashboard",
        "disabled": false,
        "hidden": false
    },
    {
        "id": "bd77dc45c5cd8d11",
        "type": "ui_group",
        "name": "Sensores",
        "tab": "be3423b36e62bb32",
        "order": 1,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "3ab988e0e462aed7",
        "type": "modbus-client",
        "name": "ADC3",
        "clienttype": "tcp",
        "bufferCommands": true,
        "stateLogEnabled": false,
        "queueLogEnabled": false,
        "failureLogEnabled": true,
        "tcpHost": "192.168.1.202",
        "tcpPort": "502",
        "tcpType": "TCP-RTU-BUFFERED",
        "serialPort": "/dev/ttyUSB0",
        "serialType": "RTU",
        "serialBaudrate": "9600",
        "serialDatabits": "8",
        "serialStopbits": "1",
        "serialParity": "none",
        "serialConnectionDelay": "200",
        "serialAsciiResponseStartDelimiter": "0x3A",
        "unit_id": "1",
        "commandDelay": "1",
        "clientTimeout": "5000",
        "reconnectOnTimeout": true,
        "reconnectTimeout": "2000",
        "parallelUnitIdsAllowed": true,
        "showErrors": false,
        "showWarnings": true,
        "showLogs": true
    },
    {
        "id": "60e5d9130b1268c8",
        "type": "modbus-client",
        "name": "VOLISON_4CH",
        "clienttype": "tcp",
        "bufferCommands": true,
        "stateLogEnabled": false,
        "queueLogEnabled": false,
        "failureLogEnabled": true,
        "tcpHost": "192.168.1.201",
        "tcpPort": "502",
        "tcpType": "TCP-RTU-BUFFERED",
        "serialPort": "/dev/ttyUSB1",
        "serialType": "RTU",
        "serialBaudrate": "9600",
        "serialDatabits": "8",
        "serialStopbits": "1",
        "serialParity": "none",
        "serialConnectionDelay": "100",
        "serialAsciiResponseStartDelimiter": "0x3A",
        "unit_id": 1,
        "commandDelay": 1,
        "clientTimeout": 1000,
        "reconnectOnTimeout": true,
        "reconnectTimeout": 2000,
        "parallelUnitIdsAllowed": true,
        "showErrors": false,
        "showWarnings": true,
        "showLogs": true
    },
    {
        "id": "52f2d0e38d313f88",
        "type": "modbus-client",
        "name": "EDP1",
        "clienttype": "tcp",
        "bufferCommands": true,
        "stateLogEnabled": false,
        "queueLogEnabled": false,
        "failureLogEnabled": true,
        "tcpHost": "127.0.0.1",
        "tcpPort": "502",
        "tcpType": "DEFAULT",
        "serialPort": "/dev/ttyUSB",
        "serialType": "RTU-BUFFERD",
        "serialBaudrate": "9600",
        "serialDatabits": "8",
        "serialStopbits": "1",
        "serialParity": "none",
        "serialConnectionDelay": "100",
        "serialAsciiResponseStartDelimiter": "0x3A",
        "unit_id": "1",
        "commandDelay": "1",
        "clientTimeout": "1000",
        "reconnectOnTimeout": true,
        "reconnectTimeout": "2000",
        "parallelUnitIdsAllowed": true,
        "showErrors": false,
        "showWarnings": true,
        "showLogs": true
    },
    {
        "id": "7d040f0f19d79e89",
        "type": "mqtt-broker",
        "name": "mqtt_tbb_ST-3.4",
        "broker": "mqtt.thingsboard.cloud",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "b2eea5177ada0477",
        "type": "mqtt-broker",
        "name": "mtt_tb_ST-3.3",
        "broker": "mqtt.thingsboard.cloud",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "a32defc5189db4ea",
        "type": "mqtt-broker",
        "name": "mqtt_tb_ST-3.2",
        "broker": "mqtt.thingsboard.cloud",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "9c9e2630ed80f90e",
        "type": "mqtt-broker",
        "name": "mqtt_tb_ST-3.1",
        "broker": "mqtt.thingsboard.cloud",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "2772d50815d076a4",
        "type": "mqtt-broker",
        "name": "mqtt_tb_MF-1.2",
        "broker": "mqtt.thingsboard.cloud",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "abcd1234",
        "type": "serial-port",
        "serialport": "/dev/ttyUSB0",
        "serialbaud": 57600,
        "databits": "8",
        "parity": "none",
        "stopbits": "1",
        "newline": "",
        "bin": "false",
        "out": "char",
        "addchar": "",
        "responsetimeout": "10000"
    },
    {
        "id": "abcd5678",
        "type": "serial-port",
        "serialport": "/dev/ttyUSB1",
        "serialbaud": 57600,
        "databits": "8",
        "parity": "none",
        "stopbits": "1",
        "newline": "",
        "bin": "false",
        "out": "char",
        "addchar": "",
        "responsetimeout": "10000"
    },
    {
        "id": "aaac317de36dda4f",
        "type": "serial-port",
        "serialport": "/dev/ttyUSB0",
        "serialbaud": 57600,
        "databits": "8",
        "parity": "none",
        "stopbits": "1",
        "newline": "",
        "bin": "false",
        "out": "char",
        "addchar": "",
        "responsetimeout": "10000"
    },
    {
        "id": "b4565baa97d43ef9",
        "type": "serial-port",
        "serialport": "/dev/ttyUSB1",
        "serialbaud": 57600,
        "databits": "8",
        "parity": "none",
        "stopbits": "1",
        "newline": "",
        "bin": "false",
        "out": "char",
        "addchar": "",
        "responsetimeout": "10000"
    },
    {
        "id": "20566838667fb145",
        "type": "serial-port",
        "serialport": "/dev/ttyUSB0",
        "serialbaud": 57600,
        "databits": "8",
        "parity": "none",
        "stopbits": "1",
        "newline": "",
        "bin": "false",
        "out": "char",
        "addchar": "",
        "responsetimeout": "10000"
    },
    {
        "id": "ac32fb280e4bb5e2",
        "type": "serial-port",
        "serialport": "/dev/ttyUSB1",
        "serialbaud": 57600,
        "databits": "8",
        "parity": "none",
        "stopbits": "1",
        "newline": "",
        "bin": "false",
        "out": "char",
        "addchar": "",
        "responsetimeout": "10000"
    },
    {
        "id": "8f724134dab0a8aa",
        "type": "serial-port",
        "serialport": "/dev/ttyUSB0",
        "serialbaud": 57600,
        "databits": "8",
        "parity": "none",
        "stopbits": "1",
        "newline": "",
        "bin": "false",
        "out": "char",
        "addchar": "",
        "responsetimeout": "10000"
    },
    {
        "id": "9249311daa14387f",
        "type": "serial-port",
        "serialport": "/dev/ttyUSB1",
        "serialbaud": 57600,
        "databits": "8",
        "parity": "none",
        "stopbits": "1",
        "newline": "",
        "bin": "false",
        "out": "char",
        "addchar": "",
        "responsetimeout": "10000"
    },
    {
        "id": "2f9523ff5d386a31",
        "type": "serial-port",
        "serialport": "/dev/ttyACM0",
        "serialbaud": 57600,
        "databits": "7",
        "parity": "even",
        "stopbits": "1",
        "newline": "",
        "bin": "false",
        "out": "char",
        "addchar": "",
        "responsetimeout": "10000"
    },
    {
        "id": "5ce554f3bf059e46",
        "type": "serial-port",
        "serialport": "/dev/ttyACM0",
        "serialbaud": 57600,
        "databits": "7",
        "parity": "even",
        "stopbits": "1",
        "newline": "",
        "bin": "false",
        "out": "char",
        "addchar": "",
        "responsetimeout": "10000"
    },
    {
        "id": "5587ad8696be252e",
        "type": "modbus-client",
        "name": "Modbus Server",
        "clienttype": "tcp",
        "bufferCommands": true,
        "stateLogEnabled": false,
        "queueLogEnabled": false,
        "failureLogEnabled": true,
        "tcpHost": "192.168.1.100",
        "tcpPort": "502",
        "tcpType": "DEFAULT",
        "serialPort": "",
        "serialConnectionDelay": "",
        "serialAsciiResponseStartDelimiter": "",
        "unit_id": "100",
        "commandDelay": "1",
        "clientTimeout": "1000",
        "reconnectOnTimeout": true,
        "reconnectTimeout": "2000",
        "parallelUnitIdsAllowed": true,
        "showErrors": false,
        "showWarnings": true,
        "showLogs": true
    },
    {
        "id": "233cd5171dde3839",
        "type": "mqtt-broker",
        "name": "mqtt_tb_ST-2.1",
        "broker": "mqtt.thingsboard.cloud",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "3b8eefdff633489b",
        "type": "mqtt-broker",
        "name": "mqtt_tb_ST-2.1",
        "broker": "mqtt.thingsboard.cloud",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "75e50c331c190f67",
        "type": "ui-group",
        "name": "Calentador de carga",
        "page": "53bbd3554f5781e9",
        "width": "3",
        "height": "1",
        "order": 1,
        "showTitle": true,
        "className": "",
        "visible": "true",
        "disabled": "false"
    },
    {
        "id": "d065875da10205cd",
        "type": "modbus-client",
        "name": "USR-M100_serial",
        "clienttype": "serial",
        "bufferCommands": true,
        "stateLogEnabled": false,
        "queueLogEnabled": false,
        "failureLogEnabled": true,
        "tcpHost": "127.0.0.1",
        "tcpPort": "502",
        "tcpType": "DEFAULT",
        "serialPort": "COM4",
        "serialType": "RTU",
        "serialBaudrate": "115200",
        "serialDatabits": "8",
        "serialStopbits": "1",
        "serialParity": "none",
        "serialConnectionDelay": "100",
        "serialAsciiResponseStartDelimiter": "0x3A",
        "unit_id": "100",
        "commandDelay": "1",
        "clientTimeout": "1000",
        "reconnectOnTimeout": true,
        "reconnectTimeout": "2000",
        "parallelUnitIdsAllowed": true,
        "showErrors": false,
        "showWarnings": true,
        "showLogs": true
    },
    {
        "id": "mqtt_broker_1",
        "type": "mqtt-broker",
        "name": "Broker MQTT USR-W610",
        "broker": "192.168.1.44",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "compatmode": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "586ef25fd8e81fa5",
        "type": "mqtt-broker",
        "name": "MN-4",
        "broker": "mqtt.thingsboard.cloud",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "b4cdb9cd5246ed2e",
        "type": "mqtt-broker",
        "name": "MN-06A",
        "broker": "mqtt.thingsboard.cloud",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "4aabcdd5a91592fb",
        "type": "mqtt-broker",
        "name": "MN-6B",
        "broker": "mqtt.thingsboard.cloud",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "c1c71d2192e51407",
        "type": "mqtt-broker",
        "name": "MN-7",
        "broker": "",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "7ac8f4b3a29c864f",
        "type": "mqtt-broker",
        "name": "MN-1",
        "broker": "mqtt.thingsboard.cloud",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "bb61bb0c49cb82b4",
        "type": "mqtt-broker",
        "name": "MN-9",
        "broker": "mqtt.thingsboard.cloud",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "aeb8c7546d28ce5c",
        "type": "mqtt-broker",
        "name": "MN-7",
        "broker": "mqtt.thingsboard.cloud",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "a3f93d08fd9f5245",
        "type": "influxdb",
        "hostname": "127.0.0.1",
        "port": "8086",
        "protocol": "http",
        "database": "database",
        "name": "",
        "usetls": false,
        "tls": "",
        "influxdbVersion": "2.0",
        "url": "http://localhost:8086",
        "timeout": "10",
        "rejectUnauthorized": true
    },
    {
        "id": "cf4bce8f993858ac",
        "type": "influxdb",
        "hostname": "127.0.0.1",
        "port": "8086",
        "protocol": "http",
        "database": "database",
        "name": "flujo",
        "usetls": false,
        "tls": "",
        "influxdbVersion": "2.0",
        "url": "http://localhost:8086",
        "timeout": "10",
        "rejectUnauthorized": true
    },
    {
        "id": "485ecec3c95ed560",
        "type": "ui-group",
        "name": "Tablero HCD",
        "page": "53bbd3554f5781e9",
        "width": "12",
        "height": "1",
        "order": 4,
        "showTitle": true,
        "className": "",
        "visible": "true",
        "disabled": "false"
    },
    {
        "id": "ed48d447e5ea8d0c",
        "type": "influxdb",
        "hostname": "127.0.0.1",
        "port": "8086",
        "protocol": "http",
        "database": "database",
        "name": "influxdb_refineria",
        "usetls": false,
        "tls": "",
        "influxdbVersion": "2.0",
        "url": "http://localhost:8086",
        "timeout": "10",
        "rejectUnauthorized": true
    },
    {
        "id": "2",
        "type": "inject",
        "z": "1",
        "d": true,
        "name": "Check USB Ports",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "60",
        "crontab": "",
        "once": true,
        "onceDelay": "5",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 150,
        "y": 60,
        "wires": [
            [
                "3"
            ]
        ]
    },
    {
        "id": "3",
        "type": "function",
        "z": "1",
        "d": true,
        "name": "Check Specific USB Ports",
        "func": "const exec = require('child_process').exec;\n\n// Define the USB ports and expected device identifiers\nconst usbPorts = ['/dev/ttyUSB0', '/dev/ttyUSB1'];\nconst expectedDevices = [\n    { port: '/dev/ttyUSB0', vendor: '1234', model: '5678' },\n    { port: '/dev/ttyUSB1', vendor: '1234', model: '5679' }\n];\n\nconst checkUsbPort = (device) => {\n    exec(`udevadm info --query=all --name=${device.port}`, (error, stdout, stderr) => {\n        if (error) {\n            node.error(`Error checking USB port ${device.port}: ${stderr}`);\n            return;\n        }\n        if (!stdout.includes(`ID_VENDOR_ID=${device.vendor}`) || !stdout.includes(`ID_MODEL_ID=${device.model}`)) {\n            node.warn(`USB device on port ${device.port} not found or incorrect device. Restarting USB service.`);\n            exec('sudo systemctl restart usb-reset.service', (error, stdout, stderr) => {\n                if (error) {\n                    node.error(`Error restarting USB service for port ${device.port}: ${stderr}`);\n                } else {\n                    node.log(`USB service restarted successfully for port ${device.port}`);\n                }\n            });\n        } else {\n            node.log(`USB device on port ${device.port} is connected and correct`);\n        }\n    });\n};\n\nexpectedDevices.forEach(checkUsbPort);",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 60,
        "wires": [
            [
                "41e45ca1ea5fe51b"
            ]
        ]
    },
    {
        "id": "41e45ca1ea5fe51b",
        "type": "debug",
        "z": "1",
        "d": true,
        "name": "debug 15",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 580,
        "y": 60,
        "wires": []
    },
    {
        "id": "inject-node",
        "type": "inject",
        "z": "1",
        "name": "Check System Usage",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "300",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 520,
        "y": 160,
        "wires": [
            [
                "os-node",
                "cpus-node",
                "memory-node",
                "loadavg-node",
                "uptime-node"
            ]
        ]
    },
    {
        "id": "os-function",
        "type": "function",
        "z": "1",
        "name": "Format OS Info",
        "func": "msg.payload = msg.payload || {};\nmsg.payload = `OS Info:\\nHostname: ${msg.payload.hostname || 'N/A'}\\nOS: ${msg.payload.type || 'N/A'}\\nPlatform: ${msg.payload.platform || 'N/A'}\\nArch: ${msg.payload.arch || 'N/A'}\\nRelease: ${msg.payload.release || 'N/A'}`;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1020,
        "y": 160,
        "wires": [
            [
                "debug-node"
            ]
        ]
    },
    {
        "id": "cpus-function",
        "type": "function",
        "z": "1",
        "name": "Format CPU Info",
        "func": "msg.payload = msg.payload.cpus || [];\nmsg.payload = `CPU Info:\\n${msg.payload.map((cpu, i) => `CPU ${i}: ${cpu.model || 'N/A'}, ${cpu.speed || 'N/A'}MHz`).join('\\n')}`;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1020,
        "y": 220,
        "wires": [
            [
                "debug-node"
            ]
        ]
    },
    {
        "id": "memory-function",
        "type": "function",
        "z": "1",
        "name": "Format Memory Info",
        "func": "msg.payload = msg.payload || {};\nconst usedMem = msg.payload.totalmem - msg.payload.freemem;\nmsg.payload = `Memory Info:\\nTotal: ${msg.payload.totalmem || 'N/A'}\\nFree: ${msg.payload.freemem || 'N/A'}\\nUsed: ${usedMem}\\nUsage: ${msg.payload.memusage || 'N/A'}%`;\n\nif (msg.payload.memusage > 80) {\n    node.warn('High memory usage detected.');\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1020,
        "y": 280,
        "wires": [
            [
                "debug-node",
                "memory-action"
            ]
        ]
    },
    {
        "id": "loadavg-function",
        "type": "function",
        "z": "1",
        "name": "Format Load Avg",
        "func": "msg.payload = msg.payload.loadavg || [];\nmsg.payload = `Load Average:\\n1 min: ${msg.payload[0] || 'N/A'}\\n5 min: ${msg.payload[1] || 'N/A'}\\n15 min: ${msg.payload[2] || 'N/A'}`;\n\nif (msg.payload[0] > 2.0) {\n    node.warn('High CPU load detected.');\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1020,
        "y": 340,
        "wires": [
            [
                "debug-node",
                "loadavg-action"
            ]
        ]
    },
    {
        "id": "uptime-function",
        "type": "function",
        "z": "1",
        "name": "Format Uptime",
        "func": "msg.payload = `Uptime: ${msg.payload.uptime || 'N/A'} seconds`;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1020,
        "y": 400,
        "wires": [
            [
                "debug-node"
            ]
        ]
    },
    {
        "id": "memory-action",
        "type": "switch",
        "z": "1",
        "name": "Check High Memory Usage",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "gt",
                "v": "80",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1220,
        "y": 280,
        "wires": [
            [
                "exec-restart-node"
            ]
        ]
    },
    {
        "id": "loadavg-action",
        "type": "switch",
        "z": "1",
        "name": "Check High Load Average",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "gt",
                "v": "2.0",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1220,
        "y": 340,
        "wires": [
            [
                "exec-restart-node"
            ]
        ]
    },
    {
        "id": "exec-restart-node",
        "type": "exec",
        "z": "1",
        "command": "sudo systemctl restart nodered",
        "addpay": false,
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "Restart Node-RED",
        "x": 1510,
        "y": 300,
        "wires": [
            [],
            [],
            []
        ]
    },
    {
        "id": "debug-node",
        "type": "debug",
        "z": "1",
        "name": "Debug System Info",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1330,
        "y": 180,
        "wires": []
    },
    {
        "id": "os-node",
        "type": "OS",
        "z": "1",
        "name": "Get OS Info",
        "x": 720,
        "y": 160,
        "wires": [
            [
                "os-function"
            ]
        ]
    },
    {
        "id": "uptime-node",
        "type": "Uptime",
        "z": "1",
        "name": "Get Uptime",
        "x": 720,
        "y": 400,
        "wires": [
            [
                "uptime-function"
            ]
        ]
    },
    {
        "id": "cpus-node",
        "type": "CPUs",
        "z": "1",
        "name": "Get CPU Info",
        "x": 720,
        "y": 220,
        "wires": [
            [
                "cpus-function"
            ]
        ]
    },
    {
        "id": "loadavg-node",
        "type": "Loadavg",
        "z": "1",
        "name": "Get Load Average",
        "x": 720,
        "y": 340,
        "wires": [
            [
                "loadavg-function"
            ]
        ]
    },
    {
        "id": "memory-node",
        "type": "Memory",
        "z": "1",
        "name": "Get Memory Info",
        "x": 720,
        "y": 280,
        "wires": [
            [
                "memory-function"
            ]
        ]
    },
    {
        "id": "dda475de079fd866",
        "type": "inject",
        "z": "1",
        "name": "Watchdog Check",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "60",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 710,
        "y": 540,
        "wires": [
            []
        ]
    },
    {
        "id": "f82aa43b217963a2",
        "type": "ping",
        "z": "1",
        "mode": null,
        "name": "Ping Node-RED",
        "host": "127.0.0.1",
        "timer": "20",
        "inputs": 0,
        "x": 920,
        "y": 540,
        "wires": [
            [
                "f450c94fadb718a5"
            ]
        ]
    },
    {
        "id": "f450c94fadb718a5",
        "type": "function",
        "z": "1",
        "name": "Check Ping Response",
        "func": "if (msg.payload === false) {\n    return [msg, null];\n} else {\n    return [null, msg];\n}",
        "outputs": 2,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1130,
        "y": 540,
        "wires": [
            [
                "exec-restart-node"
            ],
            [
                "df6f035f5ecfcc55"
            ]
        ]
    },
    {
        "id": "df6f035f5ecfcc55",
        "type": "debug",
        "z": "1",
        "name": "Watchdog Debug",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1430,
        "y": 540,
        "wires": []
    },
    {
        "id": "a9a197081ef0ca9b",
        "type": "inject",
        "z": "1",
        "name": "Check Dashboard Page",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "60",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 690,
        "y": 640,
        "wires": [
            [
                "edd60240cfddc039"
            ]
        ]
    },
    {
        "id": "edd60240cfddc039",
        "type": "http request",
        "z": "1",
        "name": "Request Dashboard Page",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "http://localhost:1880/dashboard/pageN",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 950,
        "y": 640,
        "wires": [
            [
                "07e0f916868db4d1"
            ]
        ]
    },
    {
        "id": "07e0f916868db4d1",
        "type": "function",
        "z": "1",
        "name": "Check Dashboard Page Response",
        "func": "if (msg.statusCode === 200) {\n    node.status({fill:\"green\",shape:\"dot\",text:\"Page OK\"});\n    return null;\n} else {\n    node.status({fill:\"red\",shape:\"ring\",text:\"Page FAIL\"});\n    return [msg, null];\n}",
        "outputs": 2,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1260,
        "y": 640,
        "wires": [
            [
                "exec-restart-node"
            ],
            [
                "1ef85a2213f592a4"
            ]
        ]
    },
    {
        "id": "163d682d40851e70",
        "type": "function",
        "z": "1",
        "name": "Check Node-RED Response",
        "func": "if (msg.payload === false) {\n    // Node-RED no responde\n    global.set(\"failedRestarts\", (global.get(\"failedRestarts\") || 0) + 1);\n    msg.failedRestarts = global.get(\"failedRestarts\");\n    return msg;\n} else {\n    // Node-RED responde correctamente\n    global.set(\"failedRestarts\", 0);\n    return msg;\n}",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 820,
        "y": 800,
        "wires": [
            [
                "5e69a8a36e1cabe1"
            ]
        ]
    },
    {
        "id": "5e69a8a36e1cabe1",
        "type": "function",
        "z": "1",
        "name": "Determine Restart Action",
        "func": "var failedRestarts = msg.failedRestarts || 0;\nif (failedRestarts >= 3) {\n    // Reiniciar el sistema completo\n    return { payload: \"sudo reboot\" };\n} else {\n    // Reiniciar solo Node-RED\n    return { payload: \"sudo systemctl restart nodered\" };\n}",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1090,
        "y": 800,
        "wires": [
            [
                "c0649c6837ef2dd5"
            ]
        ]
    },
    {
        "id": "c0649c6837ef2dd5",
        "type": "exec",
        "z": "1",
        "command": "",
        "addpay": "payload",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "Execute Restart Command",
        "x": 1360,
        "y": 800,
        "wires": [
            [],
            [],
            []
        ]
    },
    {
        "id": "1ef85a2213f592a4",
        "type": "debug",
        "z": "1",
        "name": "debug dashboard",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1480,
        "y": 680,
        "wires": []
    },
    {
        "id": "13379e35fc62bd2a",
        "type": "inject",
        "z": "774e31ba3313707a",
        "name": "PLC_1_AI1",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "2",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "read_PLC1_AI1",
        "payload": "{\"value\":0,\"fc\":4,\"unitid\":100,\"address\":0,\"quantity\":2}",
        "payloadType": "json",
        "x": 150,
        "y": 300,
        "wires": [
            [
                "c35997b5f347dc6d"
            ]
        ]
    },
    {
        "id": "f7560824a0d8e1fd",
        "type": "inject",
        "z": "774e31ba3313707a",
        "name": "update",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "update",
        "payload": "",
        "payloadType": "date",
        "x": 200,
        "y": 220,
        "wires": [
            [
                "c35997b5f347dc6d"
            ]
        ]
    },
    {
        "id": "12b2a6a60cb738fb",
        "type": "inject",
        "z": "774e31ba3313707a",
        "name": "next",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "next",
        "payload": "",
        "payloadType": "date",
        "x": 210,
        "y": 180,
        "wires": [
            [
                "c35997b5f347dc6d"
            ]
        ]
    },
    {
        "id": "5cc537bdb1b5ad21",
        "type": "change",
        "z": "774e31ba3313707a",
        "name": "Advance queue",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "next",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 440,
        "y": 280,
        "wires": [
            [
                "c35997b5f347dc6d"
            ]
        ]
    },
    {
        "id": "c35997b5f347dc6d",
        "type": "function",
        "z": "774e31ba3313707a",
        "name": "Modbus Queue",
        "func": "let resendifnoresposne = true; // resend the last message is no response is received\nlet resendinterval = 10; // resend last e message every x seconds\nlet online_threshold = 10; // Seconds between updates under which the device is considered online\nlet offline_threshold = 300; // Seconds between updates above which the device is considered offline\n\nlet notifmsg = null;\n\n// Check and make sure the incoming message has a topic\nif ((msg.topic===\"\")||(msg.topic===null)||(msg.topic===undefined)) {\n    node.status({fill:\"red\",shape:\"dot\",text:\"Topic missing\"});\n    return;\n}\n\nlet lastupdate = context.get(\"lastupdate\");\nlet state = context.get(\"state\") | 0;\nlet queue = context.get(\"queue\");\nlet queuecount = 0;\nif (queue === undefined) {\n    queue = [];\n} else {\n    if (Array.isArray(queue)) {\n        queuecount = queue.length;\n    } else {\n        queue = [];\n    }\n}\nlet current = new Date().getTime();\nlet send = false;\n\nswitch (msg.topic.toLowerCase()) {\n    case \"update\":\n        // Update the timer and statistics\n\n        if (lastupdate !== undefined) {\n            notifmsg = { \"topic\": \"Information\", \"payload\": {} };\n            current = current - lastupdate;\n            current = Math.floor(current / 1000);\n            notifmsg.payload.secondsincelastupdate = current;\n            var minute = Math.floor(current / 60);\n            var hour = Math.floor(minute / 60);\n            var day = Math.floor(hour / 24);\n            if (current > 24 * 60 * 60) {\n                notifmsg.payload.updatetext = \"Last update \" + day + \" days, \" + hour % 24 + \" hours, \" + minute % 60 + \" minutes, \" + current % 60 + \" seconds ago\";\n            } else if (current > 60 * 60) {\n                notifmsg.payload.updatetext = \"Last update \" + hour % 24 + \" hours, \" + minute % 60 + \" minutes, \" + current % 60 + \" seconds ago\";\n            } else if (current > 60) {\n                notifmsg.payload.updatetext = \"Last update \" + minute % 60 + \" minutes, \" + current % 60 + \" seconds ago\";\n            } else {\n                notifmsg.payload.updatetext = \"Last update \" + current % 60 + \" seconds ago\";\n            }\n\n            // Resend last message if there is no response from the server\n            if (resendifnoresposne) {\n                if ((current>0) && (current % resendinterval===0)) {\n                    let lastmsg = context.get(\"lastmsg\");\n                    if ((lastmsg!==undefined) && (context.get(\"sent\"))) {\n                        notifmsg.payload.resend = true;\n                        if ((lastmsg.payload.fc === 1) || (lastmsg.payload.fc === 2) || (lastmsg.payload.fc === 3) || (lastmsg.payload.fc === 4)) {\n                            // this is a modbus read request\n                            node.status({ fill: \"green\", shape: \"dot\", text: \"Read re-sent!\" });\n                            return [lastmsg, null, notifmsg];\n                        } else {\n                            // this is a modbus write request\n                            node.status({ fill: \"green\", shape: \"dot\", text: \"Write re-sent!\" });\n                            return [null, lastmsg, notifmsg];\n                        }\n                    }\n                }\n            }\n\n            // Check for online state\n            if (state !== 1) {\n                if (current < online_threshold) {\n                    notifmsg.topic = \"Warning\";\n                    notifmsg.payload.text = \"Device is now online\";\n                    notifmsg.payload.statuschange = true;\n                    state = 1;\n                    context.set(\"state\", state);\n                }\n            } else {\n                if (current > offline_threshold) {\n                    notifmsg.topic = \"Error\";\n                    notifmsg.payload.text = \"Device is not transmitting\";\n                    notifmsg.payload.statuschange = true;\n                    state = 99;\n                    context.set(\"state\", state);\n                }\n            }\n            notifmsg.payload.state = state;\n            if (state===1) {\n                node.status({ fill: \"blue\", shape: \"ring\", text: queuecount+ \" | \"+notifmsg.payload.updatetext });\n            } else {\n                node.status({ fill: \"red\", shape: \"ring\", text: queuecount + \" | \" + notifmsg.payload.updatetext });\n            }\n            return [null, null, notifmsg];\n\n        } else {\n            node.status({ fill: \"grey\", shape: \"ring\", text: \"No data\" });\n        }\n        break;\n    case \"next\":\n        // Update the lastupdate counter\n        context.set(\"lastupdate\", current);\n        context.set(\"sent\", false);\n        send = true;\n        break;\n    case \"reset\":\n        context.set(\"queue\",[]);\n        context.set(\"sent\", false);\n        context.set(\"lastmsg\", undefined);\n        break;\n    default:\n        // The incoming message is a modbus request\n\n        // delete the last msg to prevent from being resent\n        // context.set(\"lastmsg\", undefined);\n\n        // Check if there is already a message in the queue with the same topic. \n        // If there is it needs to be deleted, because we only keep the last message.\n        for (let i=queue.length-1; i>=0; i--) {\n            if (queue[i].topic === msg.topic) {\n                queue.splice(i,1);\n            }\n        }\n\n        // Add the message to the end of the queue\n        queue.push(msg);\n        context.set(\"queue\",queue);\n\n        if (!context.get(\"sent\")) {\n            send = true;\n        }\n        node.status({ fill: \"green\", shape: \"dot\", text: queue.length });\n\n}\n\n// We need to send out a new message\nif (send) {\n\n    if (queue.length>0) {\n        // Get the older message from the array\n        let newmsg = queue[0];\n        // remove this message\n        queue.splice(0,1);\n        context.set(\"queue\",queue);\n        context.set(\"sent\", true);\n        context.set(\"lastmsg\", newmsg);\n\n        if ((newmsg.payload.fc === 1) || (newmsg.payload.fc === 2) || (newmsg.payload.fc === 3) || (newmsg.payload.fc === 4)) {\n            // this is a modbus read request\n            node.status({ fill: \"green\", shape: \"dot\", text: \"Read sent!\" });\n            return[newmsg,null,null];\n        } else {\n            // this is a modbus write request\n            node.status({ fill: \"green\", shape: \"dot\", text: \"Write sent!\" });\n            return [null, newmsg, null];\n        }\n        \n    }\n}\n",
        "outputs": 3,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 400,
        "wires": [
            [
                "bac742622d680996"
            ],
            [],
            [
                "d5e3838bfd751515"
            ]
        ],
        "info": "# Modbus Queue\r\n\r\nThis node queueing read and write messages for modbus. Use this node if you are reading and writing the same device with many different requests. E.g. reading different coil/register intervals continously and also writing to the device at the same time.\r\n\r\nIt does a few things:\r\n- queues all messages arrive on the input port\r\n- based on the msg.topic, older messages of the same topci is ignored\r\n- sends out the oldest message and waits for the \r\n- monitors the time since last message and send out report on the output\r\n- handles online/offline status\r\n- resend the last message is response is not received in time\r\n\r\n## Input Data\r\n\r\n### payload\r\n\r\nThe payload should contain the data that gets sent to the flex-getter or flex-write node.\r\nTypical modbus read payload:\r\n`{\"value\":0,\"fc\":3,\"unitid\":1,\"address\":1000,\"quantity\":20}`\r\nTypical modbus write payload:\r\n`{\"value\":false,\"fc\":5,\"unitid\":1,\"address\":0,\"quantity\":1}`\r\n\r\n### topic\r\n\r\nEach message must contain a topic (any text), and this topic is used to identify the different read/write requests and delete any earlier request with the same topic if it still in the queueing\r\n\r\nThere are a few reserved topic for special function (for these payload is ignored):\r\n- reset: resets the queue and deleted any data collected so far\r\n- next: this is the message fed back from the flex getter/write node to indicate to this node that a new message can be sent out\r\n- update: this should be coming from a 1 second time to display the current queue count, time since the last update and online/offline status\r\n\r\n## Output ports\r\n\r\n### Port 1: flex getter\r\n\r\nThis output should be connected to a modbos-flex-getter and all the read requests will be sent out through this port\r\n\r\n### Port 2: flex write\r\n\r\nThis output should be connected to a modbos-flex-write and all the write requests will be sent out through this port\r\n\r\n### Port 3: status messages\r\n\r\nThis port outputs a status message for every update message (msg.topic=\"update\").\r\n\r\n- topic: \"Information\" for regular updates, \"Warning\": offline device is now back online, \"Error\": device is offline\r\n- payload.text: message like when the device gone offline, or back online\r\n- payload.updatetext: time passed since the last update (human readable format)\r\n- payload.secondsincelastupdate: number of seconds since the last update from the device\r\n- payload.statuschange: true if status is changed (gone offline, back online)\r\n- payload.state: 0: initial state, no data yet, 1: device online, 99: device offline\r\n\r\n## Node Settings\r\n\r\nChange the settings in the first 4 lines of the code to influence the behaviour. Explanation is in the code as comment."
    },
    {
        "id": "7266af7fbcd8963b",
        "type": "inject",
        "z": "774e31ba3313707a",
        "name": "reset",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "update",
        "payload": "",
        "payloadType": "date",
        "x": 210,
        "y": 140,
        "wires": [
            [
                "c35997b5f347dc6d"
            ]
        ]
    },
    {
        "id": "4c5ce72af50d0424",
        "type": "link in",
        "z": "774e31ba3313707a",
        "name": "link in 1",
        "links": [],
        "x": 245,
        "y": 100,
        "wires": [
            [
                "c35997b5f347dc6d"
            ]
        ]
    },
    {
        "id": "d5e3838bfd751515",
        "type": "function",
        "z": "774e31ba3313707a",
        "name": "update log",
        "func": "if (msg.topic === \"Information\") {\n    // Registrar mensajes de informaci√≥n\n    node.log(\"Informaci√≥n: \" + msg.payload.updatetext);\n} else if (msg.topic === \"Warning\") {\n    // Registrar mensajes de advertencia\n    node.warn(\"Advertencia: \" + msg.payload.text);\n} else if (msg.topic === \"Error\") {\n    // Registrar mensajes de error\n    node.error(\"Error: \" + msg.payload.text);\n}\n\n// Puedes agregar l√≥gica adicional para procesar otros campos del mensaje de estado\n// Por ejemplo, puedes verificar el valor de msg.payload.state para realizar acciones espec√≠ficas\n// seg√∫n el estado del dispositivo (en l√≠nea, fuera de l√≠nea, etc.)\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 610,
        "y": 460,
        "wires": [
            []
        ]
    },
    {
        "id": "a2623d80bc3d180d",
        "type": "inject",
        "z": "774e31ba3313707a",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 220,
        "y": 720,
        "wires": [
            [
                "c35997b5f347dc6d"
            ]
        ]
    },
    {
        "id": "e0c4523ad06bc343",
        "type": "function",
        "z": "774e31ba3313707a",
        "name": "CONV_FLO",
        "func": "const buf = Buffer.allocUnsafe(4);\nbuf.writeUInt16BE(msg.payload[0], 0);\nbuf.writeUInt16BE(msg.payload[1], 2);\n\n// Lee el buffer como un float de 32 bits (Big Endian) y asigna a una propiedad value\nmsg.payload = {\n    value: buf.readFloatBE(0),\n    timestamp: Date.now()  // Genera el timestamp aqu√≠\n};\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 690,
        "y": 280,
        "wires": [
            [
                "6a466a3e2b1f7bfd"
            ]
        ]
    },
    {
        "id": "4faf6acb4205fdf5",
        "type": "inject",
        "z": "774e31ba3313707a",
        "name": "PLC_1_AI2",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "2",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "read_PLC1_AI2",
        "payload": "{\"value\":0,\"fc\":4,\"unitid\":100,\"address\":2,\"quantity\":2}",
        "payloadType": "json",
        "x": 150,
        "y": 360,
        "wires": [
            [
                "c35997b5f347dc6d"
            ]
        ]
    },
    {
        "id": "a4df49ac2b45bc8e",
        "type": "inject",
        "z": "774e31ba3313707a",
        "name": "PLC_1_AI3",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "2",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "read_PLC1_AI3",
        "payload": "{\"value\":0,\"fc\":4,\"unitid\":100,\"address\":4,\"quantity\":2}",
        "payloadType": "json",
        "x": 150,
        "y": 420,
        "wires": [
            [
                "c35997b5f347dc6d"
            ]
        ]
    },
    {
        "id": "bac742622d680996",
        "type": "modbus-flex-getter",
        "z": "774e31ba3313707a",
        "name": "PLC_2",
        "showStatusActivities": false,
        "showErrors": false,
        "showWarnings": true,
        "logIOActivities": false,
        "server": "5587ad8696be252e",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "keepMsgProperties": false,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 590,
        "y": 380,
        "wires": [
            [
                "5cc537bdb1b5ad21",
                "e0c4523ad06bc343"
            ],
            []
        ]
    },
    {
        "id": "6a466a3e2b1f7bfd",
        "type": "switch",
        "z": "774e31ba3313707a",
        "name": "PLC1 Registers",
        "property": "topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "read_PLC1_AI1",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "read_PLC1_AI2",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "read_PLC1_AI3",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "read_PLC1_AI4",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "read_PLC1_AI5",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "read_PLC1_AI6",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 6,
        "x": 900,
        "y": 280,
        "wires": [
            [
                "01852f7a1044e7bf"
            ],
            [
                "648c5699d113437d"
            ],
            [
                "a264f23c87a1ea46"
            ],
            [
                "40474d8fa1941078"
            ],
            [],
            []
        ]
    },
    {
        "id": "6ad367bcbb38f62a",
        "type": "inject",
        "z": "774e31ba3313707a",
        "name": "PLC_1_AI4",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "2",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "read_PLC1_AI4",
        "payload": "{\"value\":0,\"fc\":4,\"unitid\":100,\"address\":6,\"quantity\":2}",
        "payloadType": "json",
        "x": 150,
        "y": 480,
        "wires": [
            [
                "c35997b5f347dc6d"
            ]
        ]
    },
    {
        "id": "40e3a369778fb57b",
        "type": "inject",
        "z": "774e31ba3313707a",
        "name": "PLC_1_AI5",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "2",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "read_PLC1_AI5",
        "payload": "{\"value\":0,\"fc\":4,\"unitid\":100,\"address\":8,\"quantity\":2}",
        "payloadType": "json",
        "x": 150,
        "y": 540,
        "wires": [
            [
                "c35997b5f347dc6d"
            ]
        ]
    },
    {
        "id": "c6641171f5cf621c",
        "type": "inject",
        "z": "774e31ba3313707a",
        "name": "PLC_1_AI6",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "2",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "read_PLC1_AI6",
        "payload": "{\"value\":0,\"fc\":4,\"unitid\":100,\"address\":10,\"quantity\":2}",
        "payloadType": "json",
        "x": 150,
        "y": 600,
        "wires": [
            [
                "c35997b5f347dc6d"
            ]
        ]
    },
    {
        "id": "2be6e4e6503a1cb0",
        "type": "mqtt out",
        "z": "774e31ba3313707a",
        "d": true,
        "name": "mqtt_tb_MN-2.1",
        "topic": "v1/devices/me/telemetry",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "75c0821a42a5cdfb",
        "x": 1600,
        "y": 180,
        "wires": []
    },
    {
        "id": "2207624eb9549886",
        "type": "mqtt out",
        "z": "774e31ba3313707a",
        "d": true,
        "name": "mqtt_tb_MF-1.1",
        "topic": "v1/devices/me/telemetry",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "689c5e6207baccbb",
        "x": 1800,
        "y": 100,
        "wires": []
    },
    {
        "id": "2facb0ca0ffced52",
        "type": "mqtt out",
        "z": "774e31ba3313707a",
        "d": true,
        "name": "mqtt_tb_MF-3.1",
        "topic": "v1/devices/me/telemetry",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "74ceda570d3e66dc",
        "x": 1600,
        "y": 240,
        "wires": []
    },
    {
        "id": "cfb2ffbef0b3f26f",
        "type": "mqtt out",
        "z": "774e31ba3313707a",
        "d": true,
        "name": "mqtt_tb_MP-1.1",
        "topic": "v1/devices/me/telemetry",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "feca9c5ced6ec599",
        "x": 1740,
        "y": 360,
        "wires": []
    },
    {
        "id": "inject1",
        "type": "inject",
        "z": "774e31ba3313707a",
        "name": "Simulate ADC Input",
        "props": [
            {
                "p": "payload.value",
                "v": "9650",
                "vt": "num"
            },
            {
                "p": "payload.timestamp",
                "v": "",
                "vt": "date"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 890,
        "y": 180,
        "wires": [
            []
        ]
    },
    {
        "id": "359c4b5bc8c9d5a7",
        "type": "inject",
        "z": "774e31ba3313707a",
        "name": "Simulate ADC Input",
        "props": [
            {
                "p": "payload.value",
                "v": "9650",
                "vt": "num"
            },
            {
                "p": "payload.timestamp",
                "v": "",
                "vt": "date"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 890,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "47b294664fc4e9bf",
        "type": "inject",
        "z": "774e31ba3313707a",
        "name": "Simulate ADC Input",
        "props": [
            {
                "p": "payload.value",
                "v": "18500",
                "vt": "num"
            },
            {
                "p": "payload.timestamp",
                "v": "",
                "vt": "date"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 890,
        "y": 100,
        "wires": [
            []
        ]
    },
    {
        "id": "01852f7a1044e7bf",
        "type": "function",
        "z": "774e31ba3313707a",
        "name": "calc_vol",
        "func": "const valorCrudo = msg.payload[0];\nconst valorLitros = ((valorCrudo - 4000) / (20000 - 4000)) * (40000 - 0);\nmsg.payload = Math.round(valorLitros);  // Mantener solo el valor num√©rico\nreturn msg;\n",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1170,
        "y": 180,
        "wires": [
            [
                "f4785be747598fe2",
                "904e6743db44aacc",
                "a3e9e08239043969"
            ],
            []
        ]
    },
    {
        "id": "d3f9c710fb3ddd3c",
        "type": "function",
        "z": "774e31ba3313707a",
        "name": "Data Accumulation Node",
        "func": "let cola = flow.get(\"colaLecturas\") || [];\nconst tiempoMaximo = 300000; // 5 minutos en milisegundos\n\n// A√±adir nuevo registro con timestamp actual si no viene incluido en el mensaje\nconst tiempoRegistro = msg.payload.timestamp || Date.now();  // Usar timestamp del mensaje o el tiempo actual si no est√° disponible\ncola.push({\n    tiempo: tiempoRegistro,\n    volumen: msg.payload[0] // Asumiendo que el volumen viene en msg.payload como primer elemento del array\n});\n\n// Eliminar registros m√°s antiguos que el tiempo m√°ximo permitido\nlet tiempoActual = Date.now();\ncola = cola.filter(registro => (tiempoActual - registro.tiempo) <= tiempoMaximo);\n\n// Guardar la cola actualizada en el contexto del flujo\nflow.set(\"colaLecturas\", cola);\n\n// Pasar la cola completa al siguiente nodo para su procesamiento\nreturn { payload: cola };\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1380,
        "y": 140,
        "wires": [
            [
                "826df15d7a0b062c"
            ]
        ]
    },
    {
        "id": "826df15d7a0b062c",
        "type": "function",
        "z": "774e31ba3313707a",
        "name": "Flow Calculation Node",
        "func": "const cola = msg.payload;\nlet flujo = 0;\n\nif (cola.length > 1) {\n    const primerRegistro = cola[0];\n    const ultimoRegistro = cola[cola.length - 1];\n    const tiempoDiferencia = (ultimoRegistro.tiempo - primerRegistro.tiempo) / 1000; // en segundos\n\n    // Convertir los valores de volumen seg√∫n la escala proporcionada\n    const volumenInicial = ((primerRegistro.volumen - 4000) / (20000 - 4000)) * (40000 - 0);\n    const volumenFinal = ((ultimoRegistro.volumen - 4000) / (20000 - 4000)) * (40000 - 0);\n\n    if (tiempoDiferencia > 0) {\n        flujo = Math.round(-((volumenFinal - volumenInicial) / tiempoDiferencia) * 3600); // calcular flujo\n    }\n} else {\n    // Manejar el caso cuando no hay suficientes registros para calcular un flujo\n    flujo = \"Insuficientes datos para c√°lculo de flujo\";\n}\n\n// Devolver el valor del flujo\nreturn { payload: flujo };\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1380,
        "y": 80,
        "wires": [
            [
                "1a27c992c7a9ffb6",
                "e5566d777fba4bfa",
                "95e079b7c4507205"
            ]
        ]
    },
    {
        "id": "1a27c992c7a9ffb6",
        "type": "debug",
        "z": "774e31ba3313707a",
        "name": "Flujo COPE",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1650,
        "y": 40,
        "wires": []
    },
    {
        "id": "648c5699d113437d",
        "type": "function",
        "z": "774e31ba3313707a",
        "name": "calc_presion",
        "func": "const valorADCMin = 4000;\nconst valorADCMax = 20000;\nconst valorMin = 0;\nconst valorMax = 10.1972;\n\nconst valorADC = msg.payload[0];\nconst valorPresion = ((valorADC - valorADCMin) / (valorADCMax - valorADCMin)) * (valorMax - valorMin) + valorMin;\n\nmsg.payload = valorPresion.toFixed(4);\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1180,
        "y": 340,
        "wires": [
            [
                "552f86e5699d801a",
                "ec24047e4f5fb171"
            ]
        ]
    },
    {
        "id": "f8e1f2aa42fd6eaa",
        "type": "function",
        "z": "774e31ba3313707a",
        "name": "calc_flujo",
        "func": "const valorADCMin = 4000;\nconst valorADCMax = 20000;\nconst valorMin = 0;\nconst valorMax = 1500;\n\nconst valorADC = msg.payload[0];\nconst valorLitrosHora = ((valorADC - valorADCMin) / (valorADCMax - valorADCMin)) * (valorMax - valorMin) + valorMin;\n\nmsg.payload = Math.round(valorLitrosHora);\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1170,
        "y": 280,
        "wires": [
            [
                "11a7e231a0e608c7",
                "51826c4b34797c24"
            ]
        ]
    },
    {
        "id": "e5566d777fba4bfa",
        "type": "function",
        "z": "774e31ba3313707a",
        "name": "telemetria",
        "func": "msg.payload = {\n  flujo: msg.payload\n};\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1660,
        "y": 120,
        "wires": [
            [
                "62d5cb37693600e1"
            ]
        ]
    },
    {
        "id": "c44795bdb9c492c9",
        "type": "mqtt out",
        "z": "774e31ba3313707a",
        "d": true,
        "name": "mqtt_tb_MN-2.1",
        "topic": "v1/devices/me/telemetry",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "75c0821a42a5cdfb",
        "x": 1580,
        "y": 200,
        "wires": []
    },
    {
        "id": "f4785be747598fe2",
        "type": "function",
        "z": "774e31ba3313707a",
        "name": "telemetria",
        "func": "msg.payload = {\n  volumen: msg.payload\n};\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1400,
        "y": 200,
        "wires": [
            [
                "c44795bdb9c492c9"
            ]
        ]
    },
    {
        "id": "62d5cb37693600e1",
        "type": "mqtt out",
        "z": "774e31ba3313707a",
        "d": true,
        "name": "mqtt_tb_MF-1.1",
        "topic": "v1/devices/me/telemetry",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "689c5e6207baccbb",
        "x": 1820,
        "y": 120,
        "wires": []
    },
    {
        "id": "11a7e231a0e608c7",
        "type": "function",
        "z": "774e31ba3313707a",
        "name": "telemetria",
        "func": "msg.payload = {\n  flujo: msg.payload\n};\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1390,
        "y": 260,
        "wires": [
            [
                "efcd770b7ec0127a"
            ]
        ]
    },
    {
        "id": "efcd770b7ec0127a",
        "type": "mqtt out",
        "z": "774e31ba3313707a",
        "d": true,
        "name": "mqtt_tb_MF-3.1",
        "topic": "v1/devices/me/telemetry",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "74ceda570d3e66dc",
        "x": 1560,
        "y": 260,
        "wires": []
    },
    {
        "id": "552f86e5699d801a",
        "type": "function",
        "z": "774e31ba3313707a",
        "name": "telemetria",
        "func": "msg.payload = {\n  presion: msg.payload\n};\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1360,
        "y": 360,
        "wires": [
            [
                "3ac2efc91dda38ac"
            ]
        ]
    },
    {
        "id": "3ac2efc91dda38ac",
        "type": "mqtt out",
        "z": "774e31ba3313707a",
        "d": true,
        "name": "mqtt_tb_MP-1.1",
        "topic": "v1/devices/me/telemetry",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "feca9c5ced6ec599",
        "x": 1520,
        "y": 360,
        "wires": []
    },
    {
        "id": "95e079b7c4507205",
        "type": "ui-gauge",
        "z": "774e31ba3313707a",
        "name": "Flujo COPE",
        "group": "3f690bb5a526a246",
        "order": 2,
        "width": "5",
        "height": "4",
        "gtype": "gauge-half",
        "gstyle": "rounded",
        "title": "Flujo COPE",
        "units": "L/h",
        "icon": "",
        "prefix": "",
        "suffix": "",
        "segments": [
            {
                "from": "0",
                "color": "#ea5353"
            },
            {
                "from": "4000",
                "color": "#5cd65c"
            },
            {
                "from": "7500",
                "color": "#ea5353"
            }
        ],
        "min": 0,
        "max": "10000",
        "sizeThickness": "26",
        "sizeGap": "3",
        "sizeKeyThickness": "20",
        "styleRounded": true,
        "styleGlow": false,
        "className": "",
        "x": 1650,
        "y": 80,
        "wires": []
    },
    {
        "id": "869327c13ded13cf",
        "type": "ui-chart",
        "z": "774e31ba3313707a",
        "group": "3f690bb5a526a246",
        "name": "Volumen FA-02",
        "label": "Volumen FA-02",
        "order": 1,
        "chartType": "bar",
        "category": "label",
        "categoryType": "property",
        "xAxisProperty": "",
        "xAxisPropertyType": "msg",
        "xAxisType": "category",
        "yAxisProperty": "value",
        "ymin": "0",
        "ymax": "40000",
        "action": "replace",
        "pointShape": "circle",
        "pointRadius": 4,
        "showLegend": false,
        "removeOlder": 1,
        "removeOlderUnit": "3600",
        "removeOlderPoints": "",
        "colors": [
            "#227dbf",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "width": "1",
        "height": "5",
        "className": "",
        "x": 1740,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "904e6743db44aacc",
        "type": "function",
        "z": "774e31ba3313707a",
        "name": "formato_ui",
        "func": "msg.payload = {\n    value: msg.payload,\n    label: msg.payload + \" Litros\"\n};\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1570,
        "y": 160,
        "wires": [
            [
                "869327c13ded13cf"
            ]
        ]
    },
    {
        "id": "ec24047e4f5fb171",
        "type": "ui-gauge",
        "z": "774e31ba3313707a",
        "name": "Presion alimentacion",
        "group": "3f690bb5a526a246",
        "order": 3,
        "width": "5",
        "height": "4",
        "gtype": "gauge-half",
        "gstyle": "rounded",
        "title": "Presi√≥n Alimentaci√≥n",
        "units": "Kg/cm2",
        "icon": "",
        "prefix": "",
        "suffix": "",
        "segments": [
            {
                "from": "0",
                "color": "#ea5353"
            },
            {
                "from": "4",
                "color": "#5cd65c"
            },
            {
                "from": "6",
                "color": "#ea5353"
            }
        ],
        "min": 0,
        "max": "10",
        "sizeThickness": "26",
        "sizeGap": "3",
        "sizeKeyThickness": "20",
        "styleRounded": true,
        "styleGlow": false,
        "className": "",
        "x": 1720,
        "y": 340,
        "wires": []
    },
    {
        "id": "51826c4b34797c24",
        "type": "ui-gauge",
        "z": "774e31ba3313707a",
        "name": "Flujo V. DA-01",
        "group": "7c21feeaf5ff947a",
        "order": 7,
        "width": 3,
        "height": 3,
        "gtype": "gauge-half",
        "gstyle": "rounded",
        "title": "Flujo Vapor DA-01",
        "units": "L/h",
        "icon": "",
        "prefix": "",
        "suffix": "",
        "segments": [
            {
                "from": "0",
                "color": "#ea5353"
            },
            {
                "from": "700",
                "color": "#5cd65c"
            },
            {
                "from": "1200",
                "color": "#ea5353"
            }
        ],
        "min": 0,
        "max": "1500",
        "sizeThickness": "20",
        "sizeGap": "3",
        "sizeKeyThickness": "16",
        "styleRounded": true,
        "styleGlow": false,
        "className": "",
        "x": 1740,
        "y": 280,
        "wires": []
    },
    {
        "id": "a3e9e08239043969",
        "type": "debug",
        "z": "774e31ba3313707a",
        "name": "debug 10",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1330,
        "y": 20,
        "wires": []
    },
    {
        "id": "51c52808a227cbd7",
        "type": "function",
        "z": "774e31ba3313707a",
        "name": "Format temp",
        "func": "let temperature = msg.payload;\nmsg.payload = temperature + \"¬∞C\"; // A√±ade la unidad ¬∞C al n√∫mero\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1490,
        "y": 500,
        "wires": [
            [
                "fbc6e7f0798a7030"
            ]
        ]
    },
    {
        "id": "177f161edb9e2789",
        "type": "function",
        "z": "774e31ba3313707a",
        "name": "telemetria",
        "func": "msg.payload = {\n  temperatura: msg.payload\n};\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1500,
        "y": 540,
        "wires": [
            [
                "fbe9645fe6526a4c"
            ]
        ]
    },
    {
        "id": "fbe9645fe6526a4c",
        "type": "mqtt out",
        "z": "774e31ba3313707a",
        "d": true,
        "name": "mqtt_tb_ST-2.1",
        "topic": "v1/devices/me/telemetry",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "233cd5171dde3839",
        "x": 1700,
        "y": 540,
        "wires": []
    },
    {
        "id": "fbc6e7f0798a7030",
        "type": "ui-text",
        "z": "774e31ba3313707a",
        "group": "75e50c331c190f67",
        "order": 1,
        "width": "0",
        "height": "0",
        "name": "Entrada BA-01",
        "label": "Entrada BA-01",
        "format": "{{msg.payload}}",
        "layout": "col-center",
        "style": true,
        "font": "Helvetica, sans-serif",
        "fontSize": 16,
        "color": "#717171",
        "className": "",
        "x": 1700,
        "y": 500,
        "wires": []
    },
    {
        "id": "8c6257adbd66d7a3",
        "type": "mqtt out",
        "z": "774e31ba3313707a",
        "d": true,
        "name": "mqtt_tb_ST-2.1",
        "topic": "v1/devices/me/telemetry",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "3b8eefdff633489b",
        "x": 1700,
        "y": 460,
        "wires": []
    },
    {
        "id": "bc0c2e06f6421329",
        "type": "function",
        "z": "774e31ba3313707a",
        "name": "Format temp",
        "func": "let temperature = msg.payload;\nmsg.payload = temperature + \"¬∞C\"; // A√±ade la unidad ¬∞C al n√∫mero\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1490,
        "y": 420,
        "wires": [
            [
                "78933385e31d0243"
            ]
        ]
    },
    {
        "id": "ae4d02c8d2cd5a97",
        "type": "function",
        "z": "774e31ba3313707a",
        "name": "telemetria",
        "func": "msg.payload = {\n  temperatura: msg.payload\n};\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1500,
        "y": 460,
        "wires": [
            [
                "8c6257adbd66d7a3"
            ]
        ]
    },
    {
        "id": "78933385e31d0243",
        "type": "ui-text",
        "z": "774e31ba3313707a",
        "group": "75e50c331c190f67",
        "order": 6,
        "width": 0,
        "height": 0,
        "name": "Salida BA-01",
        "label": "Salida BA-01",
        "format": "{{msg.payload}}",
        "layout": "col-center",
        "style": true,
        "font": "Helvetica, sans-serif",
        "fontSize": 16,
        "color": "#717171",
        "className": "",
        "x": 1710,
        "y": 420,
        "wires": []
    },
    {
        "id": "a264f23c87a1ea46",
        "type": "function",
        "z": "774e31ba3313707a",
        "name": "calc_temp",
        "func": "const valorADCMin = 4000;\nconst valorADCMax = 20000;\nconst valorMin = 0;\nconst valorMax = 1300;\n\nconst valorADC = msg.payload[0];\nconst valorTemperatura = ((valorADC - valorADCMin) / (valorADCMax - valorADCMin)) * (valorMax - valorMin) + valorMin;\n\nmsg.payload = Math.round(valorTemperatura);\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1230,
        "y": 420,
        "wires": [
            [
                "bc0c2e06f6421329",
                "ae4d02c8d2cd5a97"
            ]
        ]
    },
    {
        "id": "40474d8fa1941078",
        "type": "function",
        "z": "774e31ba3313707a",
        "name": "calc_temp",
        "func": "const valorADCMin = 4000;\nconst valorADCMax = 20000;\nconst valorMin = 0;\nconst valorMax = 1300;\n\nconst valorADC = msg.payload[0];\nconst valorTemperatura = ((valorADC - valorADCMin) / (valorADCMax - valorADCMin)) * (valorMax - valorMin) + valorMin;\n\nmsg.payload = Math.round(valorTemperatura);\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1230,
        "y": 460,
        "wires": [
            [
                "51c52808a227cbd7",
                "177f161edb9e2789"
            ]
        ]
    },
    {
        "id": "52808d04cdd74a21",
        "type": "inject",
        "z": "190ed3e96d0709a5",
        "name": "update",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "update",
        "payload": "",
        "payloadType": "date",
        "x": 360,
        "y": 560,
        "wires": [
            [
                "a1d380aff2236a21"
            ]
        ]
    },
    {
        "id": "d1bdf4bd97f40d4c",
        "type": "inject",
        "z": "190ed3e96d0709a5",
        "name": "next",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "next",
        "payload": "",
        "payloadType": "date",
        "x": 370,
        "y": 520,
        "wires": [
            [
                "a1d380aff2236a21"
            ]
        ]
    },
    {
        "id": "0c9c4c6ccd5f1680",
        "type": "change",
        "z": "190ed3e96d0709a5",
        "name": "Advance queue",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "next",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 740,
        "y": 600,
        "wires": [
            [
                "a1d380aff2236a21"
            ]
        ]
    },
    {
        "id": "a1d380aff2236a21",
        "type": "function",
        "z": "190ed3e96d0709a5",
        "name": "Modbus Queue",
        "func": "let resendifnoresposne = true; // resend the last message is no response is received\nlet resendinterval = 10; // resend last e message every x seconds\nlet online_threshold = 10; // Seconds between updates under which the device is considered online\nlet offline_threshold = 300; // Seconds between updates above which the device is considered offline\n\nlet notifmsg = null;\n\n// Check and make sure the incoming message has a topic\nif ((msg.topic===\"\")||(msg.topic===null)||(msg.topic===undefined)) {\n    node.status({fill:\"red\",shape:\"dot\",text:\"Topic missing\"});\n    return;\n}\n\nlet lastupdate = context.get(\"lastupdate\");\nlet state = context.get(\"state\") | 0;\nlet queue = context.get(\"queue\");\nlet queuecount = 0;\nif (queue === undefined) {\n    queue = [];\n} else {\n    if (Array.isArray(queue)) {\n        queuecount = queue.length;\n    } else {\n        queue = [];\n    }\n}\nlet current = new Date().getTime();\nlet send = false;\n\nswitch (msg.topic.toLowerCase()) {\n    case \"update\":\n        // Update the timer and statistics\n\n        if (lastupdate !== undefined) {\n            notifmsg = { \"topic\": \"Information\", \"payload\": {} };\n            current = current - lastupdate;\n            current = Math.floor(current / 1000);\n            notifmsg.payload.secondsincelastupdate = current;\n            var minute = Math.floor(current / 60);\n            var hour = Math.floor(minute / 60);\n            var day = Math.floor(hour / 24);\n            if (current > 24 * 60 * 60) {\n                notifmsg.payload.updatetext = \"Last update \" + day + \" days, \" + hour % 24 + \" hours, \" + minute % 60 + \" minutes, \" + current % 60 + \" seconds ago\";\n            } else if (current > 60 * 60) {\n                notifmsg.payload.updatetext = \"Last update \" + hour % 24 + \" hours, \" + minute % 60 + \" minutes, \" + current % 60 + \" seconds ago\";\n            } else if (current > 60) {\n                notifmsg.payload.updatetext = \"Last update \" + minute % 60 + \" minutes, \" + current % 60 + \" seconds ago\";\n            } else {\n                notifmsg.payload.updatetext = \"Last update \" + current % 60 + \" seconds ago\";\n            }\n\n            // Resend last message if there is no response from the server\n            if (resendifnoresposne) {\n                if ((current>0) && (current % resendinterval===0)) {\n                    let lastmsg = context.get(\"lastmsg\");\n                    if ((lastmsg!==undefined) && (context.get(\"sent\"))) {\n                        notifmsg.payload.resend = true;\n                        if ((lastmsg.payload.fc === 1) || (lastmsg.payload.fc === 2) || (lastmsg.payload.fc === 3) || (lastmsg.payload.fc === 4)) {\n                            // this is a modbus read request\n                            node.status({ fill: \"green\", shape: \"dot\", text: \"Read re-sent!\" });\n                            return [lastmsg, null, notifmsg];\n                        } else {\n                            // this is a modbus write request\n                            node.status({ fill: \"green\", shape: \"dot\", text: \"Write re-sent!\" });\n                            return [null, lastmsg, notifmsg];\n                        }\n                    }\n                }\n            }\n\n            // Check for online state\n            if (state !== 1) {\n                if (current < online_threshold) {\n                    notifmsg.topic = \"Warning\";\n                    notifmsg.payload.text = \"Device is now online\";\n                    notifmsg.payload.statuschange = true;\n                    state = 1;\n                    context.set(\"state\", state);\n                }\n            } else {\n                if (current > offline_threshold) {\n                    notifmsg.topic = \"Error\";\n                    notifmsg.payload.text = \"Device is not transmitting\";\n                    notifmsg.payload.statuschange = true;\n                    state = 99;\n                    context.set(\"state\", state);\n                }\n            }\n            notifmsg.payload.state = state;\n            if (state===1) {\n                node.status({ fill: \"blue\", shape: \"ring\", text: queuecount+ \" | \"+notifmsg.payload.updatetext });\n            } else {\n                node.status({ fill: \"red\", shape: \"ring\", text: queuecount + \" | \" + notifmsg.payload.updatetext });\n            }\n            return [null, null, notifmsg];\n\n        } else {\n            node.status({ fill: \"grey\", shape: \"ring\", text: \"No data\" });\n        }\n        break;\n    case \"next\":\n        // Update the lastupdate counter\n        context.set(\"lastupdate\", current);\n        context.set(\"sent\", false);\n        send = true;\n        break;\n    case \"reset\":\n        context.set(\"queue\",[]);\n        context.set(\"sent\", false);\n        context.set(\"lastmsg\", undefined);\n        break;\n    default:\n        // The incoming message is a modbus request\n\n        // delete the last msg to prevent from being resent\n        // context.set(\"lastmsg\", undefined);\n\n        // Check if there is already a message in the queue with the same topic. \n        // If there is it needs to be deleted, because we only keep the last message.\n        for (let i=queue.length-1; i>=0; i--) {\n            if (queue[i].topic === msg.topic) {\n                queue.splice(i,1);\n            }\n        }\n\n        // Add the message to the end of the queue\n        queue.push(msg);\n        context.set(\"queue\",queue);\n\n        if (!context.get(\"sent\")) {\n            send = true;\n        }\n        node.status({ fill: \"green\", shape: \"dot\", text: queue.length });\n\n}\n\n// We need to send out a new message\nif (send) {\n\n    if (queue.length>0) {\n        // Get the older message from the array\n        let newmsg = queue[0];\n        // remove this message\n        queue.splice(0,1);\n        context.set(\"queue\",queue);\n        context.set(\"sent\", true);\n        context.set(\"lastmsg\", newmsg);\n\n        if ((newmsg.payload.fc === 1) || (newmsg.payload.fc === 2) || (newmsg.payload.fc === 3) || (newmsg.payload.fc === 4)) {\n            // this is a modbus read request\n            node.status({ fill: \"green\", shape: \"dot\", text: \"Read sent!\" });\n            return[newmsg,null,null];\n        } else {\n            // this is a modbus write request\n            node.status({ fill: \"green\", shape: \"dot\", text: \"Write sent!\" });\n            return [null, newmsg, null];\n        }\n        \n    }\n}\n",
        "outputs": 3,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 740,
        "y": 700,
        "wires": [
            [
                "935f6caa0c13c143"
            ],
            [],
            [
                "55b26ddfc0cc83ba"
            ]
        ],
        "info": "# Modbus Queue\r\n\r\nThis node queueing read and write messages for modbus. Use this node if you are reading and writing the same device with many different requests. E.g. reading different coil/register intervals continously and also writing to the device at the same time.\r\n\r\nIt does a few things:\r\n- queues all messages arrive on the input port\r\n- based on the msg.topic, older messages of the same topci is ignored\r\n- sends out the oldest message and waits for the \r\n- monitors the time since last message and send out report on the output\r\n- handles online/offline status\r\n- resend the last message is response is not received in time\r\n\r\n## Input Data\r\n\r\n### payload\r\n\r\nThe payload should contain the data that gets sent to the flex-getter or flex-write node.\r\nTypical modbus read payload:\r\n`{\"value\":0,\"fc\":3,\"unitid\":1,\"address\":1000,\"quantity\":20}`\r\nTypical modbus write payload:\r\n`{\"value\":false,\"fc\":5,\"unitid\":1,\"address\":0,\"quantity\":1}`\r\n\r\n### topic\r\n\r\nEach message must contain a topic (any text), and this topic is used to identify the different read/write requests and delete any earlier request with the same topic if it still in the queueing\r\n\r\nThere are a few reserved topic for special function (for these payload is ignored):\r\n- reset: resets the queue and deleted any data collected so far\r\n- next: this is the message fed back from the flex getter/write node to indicate to this node that a new message can be sent out\r\n- update: this should be coming from a 1 second time to display the current queue count, time since the last update and online/offline status\r\n\r\n## Output ports\r\n\r\n### Port 1: flex getter\r\n\r\nThis output should be connected to a modbos-flex-getter and all the read requests will be sent out through this port\r\n\r\n### Port 2: flex write\r\n\r\nThis output should be connected to a modbos-flex-write and all the write requests will be sent out through this port\r\n\r\n### Port 3: status messages\r\n\r\nThis port outputs a status message for every update message (msg.topic=\"update\").\r\n\r\n- topic: \"Information\" for regular updates, \"Warning\": offline device is now back online, \"Error\": device is offline\r\n- payload.text: message like when the device gone offline, or back online\r\n- payload.updatetext: time passed since the last update (human readable format)\r\n- payload.secondsincelastupdate: number of seconds since the last update from the device\r\n- payload.statuschange: true if status is changed (gone offline, back online)\r\n- payload.state: 0: initial state, no data yet, 1: device online, 99: device offline\r\n\r\n## Node Settings\r\n\r\nChange the settings in the first 4 lines of the code to influence the behaviour. Explanation is in the code as comment."
    },
    {
        "id": "b846c12e16e8c9a6",
        "type": "inject",
        "z": "190ed3e96d0709a5",
        "name": "reset",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "update",
        "payload": "",
        "payloadType": "date",
        "x": 370,
        "y": 480,
        "wires": [
            [
                "a1d380aff2236a21"
            ]
        ]
    },
    {
        "id": "c9844975fe8595b3",
        "type": "link in",
        "z": "190ed3e96d0709a5",
        "name": "link in 2",
        "links": [],
        "x": 405,
        "y": 440,
        "wires": [
            [
                "a1d380aff2236a21"
            ]
        ]
    },
    {
        "id": "a1d834793368bfbb",
        "type": "inject",
        "z": "190ed3e96d0709a5",
        "name": "check",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 570,
        "y": 980,
        "wires": [
            [
                "e0659949c89e4b1c"
            ]
        ]
    },
    {
        "id": "e0659949c89e4b1c",
        "type": "function",
        "z": "190ed3e96d0709a5",
        "name": "health check",
        "func": "\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 750,
        "y": 980,
        "wires": [
            [
                "c9e48161f035ca2a"
            ]
        ]
    },
    {
        "id": "c9e48161f035ca2a",
        "type": "switch",
        "z": "190ed3e96d0709a5",
        "name": "update diag",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 950,
        "y": 980,
        "wires": [
            []
        ]
    },
    {
        "id": "55b26ddfc0cc83ba",
        "type": "function",
        "z": "190ed3e96d0709a5",
        "name": "update log",
        "func": "if (msg.topic === \"Information\") {\n    // Registrar mensajes de informaci√≥n\n    node.log(\"Informaci√≥n: \" + msg.payload.updatetext);\n} else if (msg.topic === \"Warning\") {\n    // Registrar mensajes de advertencia\n    node.warn(\"Advertencia: \" + msg.payload.text);\n} else if (msg.topic === \"Error\") {\n    // Registrar mensajes de error\n    node.error(\"Error: \" + msg.payload.text);\n}\n\n// Puedes agregar l√≥gica adicional para procesar otros campos del mensaje de estado\n// Por ejemplo, puedes verificar el valor de msg.payload.state para realizar acciones espec√≠ficas\n// seg√∫n el estado del dispositivo (en l√≠nea, fuera de l√≠nea, etc.)\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 930,
        "y": 720,
        "wires": [
            []
        ]
    },
    {
        "id": "5c1e21e0692f309f",
        "type": "inject",
        "z": "190ed3e96d0709a5",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 380,
        "y": 940,
        "wires": [
            [
                "a1d380aff2236a21"
            ]
        ]
    },
    {
        "id": "69b686e91740cea5",
        "type": "switch",
        "z": "190ed3e96d0709a5",
        "name": "ADC2 Registers",
        "property": "topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "read_ADC2_AI1",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "read_ADC2_AI2",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "read_ADC2_AI3",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "read_ADC2_AI4",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 4,
        "x": 1160,
        "y": 700,
        "wires": [
            [
                "577bce23d5b23116"
            ],
            [
                "358a6d7f67ffce8f"
            ],
            [
                "73e1e81e7546e4fb"
            ],
            []
        ]
    },
    {
        "id": "e88437c06ce5e178",
        "type": "inject",
        "z": "190ed3e96d0709a5",
        "name": "ADC_2_AI1",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "2",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "read_ADC2_AI1",
        "payload": "{\"value\":0,\"fc\":4,\"unitid\":1,\"address\":0,\"quantity\":1}",
        "payloadType": "json",
        "x": 340,
        "y": 700,
        "wires": [
            [
                "a1d380aff2236a21"
            ]
        ]
    },
    {
        "id": "935f6caa0c13c143",
        "type": "modbus-flex-getter",
        "z": "190ed3e96d0709a5",
        "name": "ADC_2",
        "showStatusActivities": false,
        "showErrors": false,
        "showWarnings": false,
        "logIOActivities": false,
        "server": "f1b3a3acb886c48c",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "keepMsgProperties": false,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 940,
        "y": 680,
        "wires": [
            [
                "0c9c4c6ccd5f1680"
            ],
            [
                "69b686e91740cea5"
            ]
        ]
    },
    {
        "id": "7ff3dc8119cca4d3",
        "type": "inject",
        "z": "190ed3e96d0709a5",
        "name": "ADC_2_AI2",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "2",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "read_ADC2_AI2",
        "payload": "{\"value\":0,\"fc\":4,\"unitid\":1,\"address\":1,\"quantity\":1}",
        "payloadType": "json",
        "x": 340,
        "y": 740,
        "wires": [
            [
                "a1d380aff2236a21"
            ]
        ]
    },
    {
        "id": "75e2840ee8295271",
        "type": "inject",
        "z": "190ed3e96d0709a5",
        "name": "ADC_2_AI3",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "2",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "read_ADC2_AI3",
        "payload": "{\"value\":0,\"fc\":4,\"unitid\":1,\"address\":2,\"quantity\":1}",
        "payloadType": "json",
        "x": 340,
        "y": 780,
        "wires": [
            []
        ]
    },
    {
        "id": "d24d58116973bc71",
        "type": "inject",
        "z": "190ed3e96d0709a5",
        "name": "ADC_2_AI4",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "2",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "read_ADC2_AI4",
        "payload": "{\"value\":0,\"fc\":3,\"unitid\":1,\"address\":0,\"quantity\":1}",
        "payloadType": "json",
        "x": 340,
        "y": 820,
        "wires": [
            []
        ]
    },
    {
        "id": "577bce23d5b23116",
        "type": "function",
        "z": "190ed3e96d0709a5",
        "name": "calc_vol_FA-01",
        "func": "const valorCrudo = msg.payload.data[0];\nconst valorLitros = ((valorCrudo - 4000) / (20000 - 4000)) * (115500 - 0);\nmsg.payload = Math.round(valorLitros);  // Mantener solo el valor num√©rico\nreturn msg;\n",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1420,
        "y": 560,
        "wires": [
            [
                "168aaf88f24c3fe4",
                "b4188b3a422f8bef",
                "e405700295bd27f7"
            ],
            []
        ]
    },
    {
        "id": "50d885b438d788be",
        "type": "mqtt out",
        "z": "190ed3e96d0709a5",
        "d": true,
        "name": "mqtt_tb_MN-1",
        "topic": "v1/devices/me/telemetry",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "7ac8f4b3a29c864f",
        "x": 1780,
        "y": 580,
        "wires": []
    },
    {
        "id": "168aaf88f24c3fe4",
        "type": "function",
        "z": "190ed3e96d0709a5",
        "name": "telemetria",
        "func": "msg.payload = {\n  volumen: msg.payload\n};\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1620,
        "y": 580,
        "wires": [
            [
                "50d885b438d788be"
            ]
        ]
    },
    {
        "id": "55044db629aca6f4",
        "type": "ui-chart",
        "z": "190ed3e96d0709a5",
        "d": true,
        "group": "3f690bb5a526a246",
        "name": "Volumen FA-01",
        "label": "Volumen FA-01",
        "order": 1,
        "chartType": "bar",
        "category": "label",
        "categoryType": "property",
        "xAxisProperty": "",
        "xAxisPropertyType": "msg",
        "xAxisType": "category",
        "yAxisProperty": "value",
        "ymin": "0",
        "ymax": "105000",
        "action": "replace",
        "pointShape": "circle",
        "pointRadius": 4,
        "showLegend": false,
        "removeOlder": 1,
        "removeOlderUnit": "3600",
        "removeOlderPoints": "",
        "colors": [
            "#227dbf",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "width": "1",
        "height": "5",
        "className": "",
        "x": 1800,
        "y": 520,
        "wires": [
            []
        ]
    },
    {
        "id": "b4188b3a422f8bef",
        "type": "function",
        "z": "190ed3e96d0709a5",
        "name": "formato_ui",
        "func": "msg.payload = {\n    value: msg.payload,\n    label: msg.payload + \" Litros\"\n};\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1630,
        "y": 520,
        "wires": [
            [
                "55044db629aca6f4"
            ]
        ]
    },
    {
        "id": "e405700295bd27f7",
        "type": "debug",
        "z": "190ed3e96d0709a5",
        "name": "vol_FA-01",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1960,
        "y": 560,
        "wires": []
    },
    {
        "id": "358a6d7f67ffce8f",
        "type": "function",
        "z": "190ed3e96d0709a5",
        "name": "calc_vol_FA-09",
        "func": "const valorCrudo = msg.payload.data[0];\nconst valorLitros = ((valorCrudo - 4000) / (20000 - 4000)) * (19000 - 0);\nmsg.payload = Math.round(valorLitros);  // Mantener solo el valor num√©rico\nreturn msg;\n",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1420,
        "y": 660,
        "wires": [
            [
                "c1ca46f6bb75b7dd",
                "83a76faa5a6226ef",
                "1765a68bea6d7b05"
            ],
            []
        ]
    },
    {
        "id": "e5568dbdb4388bd7",
        "type": "mqtt out",
        "z": "190ed3e96d0709a5",
        "d": true,
        "name": "mqtt_tb_MN-9",
        "topic": "v1/devices/me/telemetry",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "bb61bb0c49cb82b4",
        "x": 1780,
        "y": 680,
        "wires": []
    },
    {
        "id": "c1ca46f6bb75b7dd",
        "type": "function",
        "z": "190ed3e96d0709a5",
        "name": "telemetria",
        "func": "msg.payload = {\n  volumen: msg.payload\n};\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1620,
        "y": 680,
        "wires": [
            [
                "e5568dbdb4388bd7"
            ]
        ]
    },
    {
        "id": "409147dccbfefd7e",
        "type": "ui-chart",
        "z": "190ed3e96d0709a5",
        "d": true,
        "group": "3f690bb5a526a246",
        "name": "Volumen FA-09",
        "label": "Volumen FA-09",
        "order": 1,
        "chartType": "bar",
        "category": "label",
        "categoryType": "property",
        "xAxisProperty": "",
        "xAxisPropertyType": "msg",
        "xAxisType": "category",
        "yAxisProperty": "value",
        "ymin": "0",
        "ymax": "20000",
        "action": "replace",
        "pointShape": "circle",
        "pointRadius": 4,
        "showLegend": false,
        "removeOlder": 1,
        "removeOlderUnit": "3600",
        "removeOlderPoints": "",
        "colors": [
            "#227dbf",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "width": "1",
        "height": "5",
        "className": "",
        "x": 1800,
        "y": 620,
        "wires": [
            []
        ]
    },
    {
        "id": "83a76faa5a6226ef",
        "type": "function",
        "z": "190ed3e96d0709a5",
        "name": "formato_ui",
        "func": "msg.payload = {\n    value: msg.payload,\n    label: msg.payload + \" Litros\"\n};\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1630,
        "y": 620,
        "wires": [
            [
                "409147dccbfefd7e"
            ]
        ]
    },
    {
        "id": "1765a68bea6d7b05",
        "type": "debug",
        "z": "190ed3e96d0709a5",
        "name": "vol_FA-09",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1940,
        "y": 660,
        "wires": []
    },
    {
        "id": "73e1e81e7546e4fb",
        "type": "function",
        "z": "190ed3e96d0709a5",
        "name": "calc_vol_FA-07",
        "func": "const valorCrudo = msg.payload.data[0];\nconst valorLitros = ((valorCrudo - 4000) / (20000 - 4000)) * (200000 - 0);\nmsg.payload = Math.round(valorLitros);  // Mantener solo el valor num√©rico\nreturn msg;\n",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1420,
        "y": 760,
        "wires": [
            [
                "1925a962bbeb0bdd",
                "ab6e924ec584b66b",
                "72632dd37f42d210"
            ],
            []
        ]
    },
    {
        "id": "c22c16254362436d",
        "type": "mqtt out",
        "z": "190ed3e96d0709a5",
        "d": true,
        "name": "mqtt_tb_MN-7",
        "topic": "v1/devices/me/telemetry",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "aeb8c7546d28ce5c",
        "x": 1780,
        "y": 780,
        "wires": []
    },
    {
        "id": "1925a962bbeb0bdd",
        "type": "function",
        "z": "190ed3e96d0709a5",
        "name": "telemetria",
        "func": "msg.payload = {\n  volumen: msg.payload\n};\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1620,
        "y": 780,
        "wires": [
            [
                "c22c16254362436d"
            ]
        ]
    },
    {
        "id": "ad4fc4580773a583",
        "type": "ui-chart",
        "z": "190ed3e96d0709a5",
        "d": true,
        "group": "3f690bb5a526a246",
        "name": "Volumen FA-07",
        "label": "Volumen FA-07",
        "order": 1,
        "chartType": "bar",
        "category": "label",
        "categoryType": "property",
        "xAxisProperty": "",
        "xAxisPropertyType": "msg",
        "xAxisType": "category",
        "yAxisProperty": "value",
        "ymin": "0",
        "ymax": "200000",
        "action": "replace",
        "pointShape": "circle",
        "pointRadius": 4,
        "showLegend": false,
        "removeOlder": 1,
        "removeOlderUnit": "3600",
        "removeOlderPoints": "",
        "colors": [
            "#227dbf",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "width": "1",
        "height": "5",
        "className": "",
        "x": 1800,
        "y": 740,
        "wires": [
            []
        ]
    },
    {
        "id": "ab6e924ec584b66b",
        "type": "function",
        "z": "190ed3e96d0709a5",
        "name": "formato_ui",
        "func": "msg.payload = {\n    value: msg.payload,\n    label: msg.payload + \" Litros\"\n};\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1630,
        "y": 740,
        "wires": [
            [
                "ad4fc4580773a583"
            ]
        ]
    },
    {
        "id": "72632dd37f42d210",
        "type": "debug",
        "z": "190ed3e96d0709a5",
        "name": "vol_FA-07",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1960,
        "y": 760,
        "wires": []
    },
    {
        "id": "abbcccf771764af6",
        "type": "inject",
        "z": "5abe0cc40f5ad9c5",
        "name": "CH3",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "2",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "read_TC_3",
        "payload": "{\"value\":0,\"fc\":3,\"unitid\":1,\"address\":16,\"quantity\":1}",
        "payloadType": "json",
        "x": 450,
        "y": 500,
        "wires": [
            [
                "3eeca4f2870275ab"
            ]
        ]
    },
    {
        "id": "1e8be9ee0af07cce",
        "type": "inject",
        "z": "5abe0cc40f5ad9c5",
        "name": "update",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "update",
        "payload": "",
        "payloadType": "date",
        "x": 500,
        "y": 340,
        "wires": [
            [
                "3eeca4f2870275ab"
            ]
        ]
    },
    {
        "id": "2f776b033e7cd327",
        "type": "inject",
        "z": "5abe0cc40f5ad9c5",
        "name": "next",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "next",
        "payload": "",
        "payloadType": "date",
        "x": 490,
        "y": 300,
        "wires": [
            [
                "3eeca4f2870275ab"
            ]
        ]
    },
    {
        "id": "f5f5072b97fc34c5",
        "type": "change",
        "z": "5abe0cc40f5ad9c5",
        "name": "Advance queue",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "next",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 840,
        "y": 360,
        "wires": [
            [
                "3eeca4f2870275ab"
            ]
        ]
    },
    {
        "id": "3eeca4f2870275ab",
        "type": "function",
        "z": "5abe0cc40f5ad9c5",
        "name": "Modbus Queue",
        "func": "let resendifnoresposne = true; // resend the last message is no response is received\nlet resendinterval = 10; // resend last e message every x seconds\nlet online_threshold = 10; // Seconds between updates under which the device is considered online\nlet offline_threshold = 300; // Seconds between updates above which the device is considered offline\n\nlet notifmsg = null;\n\n// Check and make sure the incoming message has a topic\nif ((msg.topic===\"\")||(msg.topic===null)||(msg.topic===undefined)) {\n    node.status({fill:\"red\",shape:\"dot\",text:\"Topic missing\"});\n    return;\n}\n\nlet lastupdate = context.get(\"lastupdate\");\nlet state = context.get(\"state\") | 0;\nlet queue = context.get(\"queue\");\nlet queuecount = 0;\nif (queue === undefined) {\n    queue = [];\n} else {\n    if (Array.isArray(queue)) {\n        queuecount = queue.length;\n    } else {\n        queue = [];\n    }\n}\nlet current = new Date().getTime();\nlet send = false;\n\nswitch (msg.topic.toLowerCase()) {\n    case \"update\":\n        // Update the timer and statistics\n\n        if (lastupdate !== undefined) {\n            notifmsg = { \"topic\": \"Information\", \"payload\": {} };\n            current = current - lastupdate;\n            current = Math.floor(current / 1000);\n            notifmsg.payload.secondsincelastupdate = current;\n            var minute = Math.floor(current / 60);\n            var hour = Math.floor(minute / 60);\n            var day = Math.floor(hour / 24);\n            if (current > 24 * 60 * 60) {\n                notifmsg.payload.updatetext = \"Last update \" + day + \" days, \" + hour % 24 + \" hours, \" + minute % 60 + \" minutes, \" + current % 60 + \" seconds ago\";\n            } else if (current > 60 * 60) {\n                notifmsg.payload.updatetext = \"Last update \" + hour % 24 + \" hours, \" + minute % 60 + \" minutes, \" + current % 60 + \" seconds ago\";\n            } else if (current > 60) {\n                notifmsg.payload.updatetext = \"Last update \" + minute % 60 + \" minutes, \" + current % 60 + \" seconds ago\";\n            } else {\n                notifmsg.payload.updatetext = \"Last update \" + current % 60 + \" seconds ago\";\n            }\n\n            // Resend last message if there is no response from the server\n            if (resendifnoresposne) {\n                if ((current>0) && (current % resendinterval===0)) {\n                    let lastmsg = context.get(\"lastmsg\");\n                    if ((lastmsg!==undefined) && (context.get(\"sent\"))) {\n                        notifmsg.payload.resend = true;\n                        if ((lastmsg.payload.fc === 1) || (lastmsg.payload.fc === 2) || (lastmsg.payload.fc === 3) || (lastmsg.payload.fc === 4)) {\n                            // this is a modbus read request\n                            node.status({ fill: \"green\", shape: \"dot\", text: \"Read re-sent!\" });\n                            return [lastmsg, null, notifmsg];\n                        } else {\n                            // this is a modbus write request\n                            node.status({ fill: \"green\", shape: \"dot\", text: \"Write re-sent!\" });\n                            return [null, lastmsg, notifmsg];\n                        }\n                    }\n                }\n            }\n\n            // Check for online state\n            if (state !== 1) {\n                if (current < online_threshold) {\n                    notifmsg.topic = \"Warning\";\n                    notifmsg.payload.text = \"Device is now online\";\n                    notifmsg.payload.statuschange = true;\n                    state = 1;\n                    context.set(\"state\", state);\n                }\n            } else {\n                if (current > offline_threshold) {\n                    notifmsg.topic = \"Error\";\n                    notifmsg.payload.text = \"Device is not transmitting\";\n                    notifmsg.payload.statuschange = true;\n                    state = 99;\n                    context.set(\"state\", state);\n                }\n            }\n            notifmsg.payload.state = state;\n            if (state===1) {\n                node.status({ fill: \"blue\", shape: \"ring\", text: queuecount+ \" | \"+notifmsg.payload.updatetext });\n            } else {\n                node.status({ fill: \"red\", shape: \"ring\", text: queuecount + \" | \" + notifmsg.payload.updatetext });\n            }\n            return [null, null, notifmsg];\n\n        } else {\n            node.status({ fill: \"grey\", shape: \"ring\", text: \"No data\" });\n        }\n        break;\n    case \"next\":\n        // Update the lastupdate counter\n        context.set(\"lastupdate\", current);\n        context.set(\"sent\", false);\n        send = true;\n        break;\n    case \"reset\":\n        context.set(\"queue\",[]);\n        context.set(\"sent\", false);\n        context.set(\"lastmsg\", undefined);\n        break;\n    default:\n        // The incoming message is a modbus request\n\n        // delete the last msg to prevent from being resent\n        // context.set(\"lastmsg\", undefined);\n\n        // Check if there is already a message in the queue with the same topic. \n        // If there is it needs to be deleted, because we only keep the last message.\n        for (let i=queue.length-1; i>=0; i--) {\n            if (queue[i].topic === msg.topic) {\n                queue.splice(i,1);\n            }\n        }\n\n        // Add the message to the end of the queue\n        queue.push(msg);\n        context.set(\"queue\",queue);\n\n        if (!context.get(\"sent\")) {\n            send = true;\n        }\n        node.status({ fill: \"green\", shape: \"dot\", text: queue.length });\n\n}\n\n// We need to send out a new message\nif (send) {\n\n    if (queue.length>0) {\n        // Get the older message from the array\n        let newmsg = queue[0];\n        // remove this message\n        queue.splice(0,1);\n        context.set(\"queue\",queue);\n        context.set(\"sent\", true);\n        context.set(\"lastmsg\", newmsg);\n\n        if ((newmsg.payload.fc === 1) || (newmsg.payload.fc === 2) || (newmsg.payload.fc === 3) || (newmsg.payload.fc === 4)) {\n            // this is a modbus read request\n            node.status({ fill: \"green\", shape: \"dot\", text: \"Read sent!\" });\n            return[newmsg,null,null];\n        } else {\n            // this is a modbus write request\n            node.status({ fill: \"green\", shape: \"dot\", text: \"Write sent!\" });\n            return [null, newmsg, null];\n        }\n        \n    }\n}\n",
        "outputs": 3,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 740,
        "y": 480,
        "wires": [
            [
                "2c8e65186a7fd7ec"
            ],
            [],
            [
                "1769f99a48c701a1"
            ]
        ],
        "info": "# Modbus Queue\r\n\r\nThis node queueing read and write messages for modbus. Use this node if you are reading and writing the same device with many different requests. E.g. reading different coil/register intervals continously and also writing to the device at the same time.\r\n\r\nIt does a few things:\r\n- queues all messages arrive on the input port\r\n- based on the msg.topic, older messages of the same topci is ignored\r\n- sends out the oldest message and waits for the \r\n- monitors the time since last message and send out report on the output\r\n- handles online/offline status\r\n- resend the last message is response is not received in time\r\n\r\n## Input Data\r\n\r\n### payload\r\n\r\nThe payload should contain the data that gets sent to the flex-getter or flex-write node.\r\nTypical modbus read payload:\r\n`{\"value\":0,\"fc\":3,\"unitid\":1,\"address\":1000,\"quantity\":20}`\r\nTypical modbus write payload:\r\n`{\"value\":false,\"fc\":5,\"unitid\":1,\"address\":0,\"quantity\":1}`\r\n\r\n### topic\r\n\r\nEach message must contain a topic (any text), and this topic is used to identify the different read/write requests and delete any earlier request with the same topic if it still in the queueing\r\n\r\nThere are a few reserved topic for special function (for these payload is ignored):\r\n- reset: resets the queue and deleted any data collected so far\r\n- next: this is the message fed back from the flex getter/write node to indicate to this node that a new message can be sent out\r\n- update: this should be coming from a 1 second time to display the current queue count, time since the last update and online/offline status\r\n\r\n## Output ports\r\n\r\n### Port 1: flex getter\r\n\r\nThis output should be connected to a modbos-flex-getter and all the read requests will be sent out through this port\r\n\r\n### Port 2: flex write\r\n\r\nThis output should be connected to a modbos-flex-write and all the write requests will be sent out through this port\r\n\r\n### Port 3: status messages\r\n\r\nThis port outputs a status message for every update message (msg.topic=\"update\").\r\n\r\n- topic: \"Information\" for regular updates, \"Warning\": offline device is now back online, \"Error\": device is offline\r\n- payload.text: message like when the device gone offline, or back online\r\n- payload.updatetext: time passed since the last update (human readable format)\r\n- payload.secondsincelastupdate: number of seconds since the last update from the device\r\n- payload.statuschange: true if status is changed (gone offline, back online)\r\n- payload.state: 0: initial state, no data yet, 1: device online, 99: device offline\r\n\r\n## Node Settings\r\n\r\nChange the settings in the first 4 lines of the code to influence the behaviour. Explanation is in the code as comment."
    },
    {
        "id": "2c8e65186a7fd7ec",
        "type": "modbus-flex-getter",
        "z": "5abe0cc40f5ad9c5",
        "name": "output",
        "showStatusActivities": false,
        "showErrors": false,
        "showWarnings": true,
        "logIOActivities": false,
        "server": "ba775fe896e243b7",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "keepMsgProperties": false,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 930,
        "y": 460,
        "wires": [
            [
                "f5f5072b97fc34c5"
            ],
            [
                "81a729ec4384f6d9",
                "specialTemperatureFunction",
                "0808674536b8b325"
            ]
        ]
    },
    {
        "id": "2fceac4eaaf2ac16",
        "type": "switch",
        "z": "5abe0cc40f5ad9c5",
        "name": "get topic",
        "property": "topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "read_TC_2",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "read_TC_3",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "read_TC_4",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 3,
        "x": 1320,
        "y": 460,
        "wires": [
            [],
            [
                "e96f222d604596a9",
                "d8cb9785b7f8e460"
            ],
            [
                "849e5d398277bae3",
                "eb931d150b681d2e"
            ]
        ]
    },
    {
        "id": "fb726970df3a5a11",
        "type": "inject",
        "z": "5abe0cc40f5ad9c5",
        "name": "inject1",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 470,
        "y": 120,
        "wires": [
            [
                "0c548bd3de817c51"
            ]
        ]
    },
    {
        "id": "88b118ad8adef70d",
        "type": "inject",
        "z": "5abe0cc40f5ad9c5",
        "name": "inject1",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 470,
        "y": 160,
        "wires": [
            [
                "23cbf47d22124f5a"
            ]
        ]
    },
    {
        "id": "0c548bd3de817c51",
        "type": "change",
        "z": "5abe0cc40f5ad9c5",
        "name": "set flow.flags",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 650,
        "y": 120,
        "wires": [
            []
        ]
    },
    {
        "id": "23cbf47d22124f5a",
        "type": "change",
        "z": "5abe0cc40f5ad9c5",
        "name": "set flow.registers",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 670,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "a82d87f1056b77c2",
        "type": "inject",
        "z": "5abe0cc40f5ad9c5",
        "name": "reset",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "update",
        "payload": "",
        "payloadType": "date",
        "x": 490,
        "y": 260,
        "wires": [
            [
                "3eeca4f2870275ab"
            ]
        ]
    },
    {
        "id": "149fb1a9b90bf891",
        "type": "inject",
        "z": "5abe0cc40f5ad9c5",
        "name": "check",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 610,
        "y": 820,
        "wires": [
            [
                "0b775d57cde70c0c"
            ]
        ]
    },
    {
        "id": "0b775d57cde70c0c",
        "type": "function",
        "z": "5abe0cc40f5ad9c5",
        "name": "health check",
        "func": "\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 790,
        "y": 820,
        "wires": [
            [
                "886d9660db30a8f9"
            ]
        ]
    },
    {
        "id": "886d9660db30a8f9",
        "type": "switch",
        "z": "5abe0cc40f5ad9c5",
        "name": "update diag",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 990,
        "y": 820,
        "wires": [
            []
        ]
    },
    {
        "id": "1769f99a48c701a1",
        "type": "function",
        "z": "5abe0cc40f5ad9c5",
        "name": "update log",
        "func": "\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 930,
        "y": 520,
        "wires": [
            []
        ]
    },
    {
        "id": "2185333d2bcd9585",
        "type": "inject",
        "z": "5abe0cc40f5ad9c5",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 440,
        "y": 580,
        "wires": [
            [
                "3eeca4f2870275ab"
            ]
        ]
    },
    {
        "id": "78601e62052a7a7a",
        "type": "inject",
        "z": "5abe0cc40f5ad9c5",
        "name": "CH4",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "2",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "read_TC_4",
        "payload": "{\"value\":0,\"fc\":3,\"unitid\":1,\"address\":17,\"quantity\":1}",
        "payloadType": "json",
        "x": 450,
        "y": 540,
        "wires": [
            [
                "3eeca4f2870275ab"
            ]
        ]
    },
    {
        "id": "cb9058bec1b46565",
        "type": "inject",
        "z": "5abe0cc40f5ad9c5",
        "name": "CH2",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "2",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "read_TC_2",
        "payload": "{\"value\":0,\"fc\":3,\"unitid\":1,\"address\":15,\"quantity\":1}",
        "payloadType": "json",
        "x": 450,
        "y": 460,
        "wires": [
            [
                "3eeca4f2870275ab"
            ]
        ]
    },
    {
        "id": "f9271a012094580e",
        "type": "inject",
        "z": "5abe0cc40f5ad9c5",
        "name": "CH1",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "2",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "read_TC_1",
        "payload": "{\"value\":0,\"fc\":3,\"unitid\":1,\"address\":14,\"quantity\":1}",
        "payloadType": "json",
        "x": 450,
        "y": 420,
        "wires": [
            [
                "3eeca4f2870275ab"
            ]
        ]
    },
    {
        "id": "tempFormatFunction",
        "type": "function",
        "z": "5abe0cc40f5ad9c5",
        "name": "Format temp",
        "func": "let temperature = msg.payload;\nmsg.payload = temperature + \"¬∞C\"; // A√±ade la unidad ¬∞C al n√∫mero\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1550,
        "y": 340,
        "wires": [
            [
                "9e0c6a146be0aa98"
            ]
        ]
    },
    {
        "id": "861c961ca382753d",
        "type": "function",
        "z": "5abe0cc40f5ad9c5",
        "name": "Format temp",
        "func": "let temperature = msg.payload;\nmsg.payload = temperature + \"¬∞C\"; // A√±ade la unidad ¬∞C al n√∫mero\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1550,
        "y": 440,
        "wires": [
            [
                "7e4aa1530de89ffd"
            ]
        ]
    },
    {
        "id": "849e5d398277bae3",
        "type": "function",
        "z": "5abe0cc40f5ad9c5",
        "name": "Format temp",
        "func": "let temperature = msg.payload;\nmsg.payload = temperature + \"¬∞C\"; // A√±ade la unidad ¬∞C al n√∫mero\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1570,
        "y": 540,
        "wires": [
            [
                "e84c799602999daa"
            ]
        ]
    },
    {
        "id": "e84c799602999daa",
        "type": "ui-text",
        "z": "5abe0cc40f5ad9c5",
        "group": "d1e5da8ea7145cd4",
        "order": 4,
        "width": 0,
        "height": 0,
        "name": "Superior Columna DA-02",
        "label": "Superior Columna DA-02",
        "format": "{{msg.payload}}",
        "layout": "col-center",
        "style": true,
        "font": "Helvetica, sans-serif",
        "fontSize": 16,
        "color": "#717171",
        "className": "",
        "x": 1770,
        "y": 540,
        "wires": []
    },
    {
        "id": "e96f222d604596a9",
        "type": "function",
        "z": "5abe0cc40f5ad9c5",
        "name": "Format temp",
        "func": "let temperature = msg.payload;\nmsg.payload = temperature + \"¬∞C\"; // A√±ade la unidad ¬∞C al n√∫mero\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1570,
        "y": 640,
        "wires": [
            [
                "b6b650a4d8645bca"
            ]
        ]
    },
    {
        "id": "b6b650a4d8645bca",
        "type": "ui-text",
        "z": "5abe0cc40f5ad9c5",
        "group": "d1e5da8ea7145cd4",
        "order": 5,
        "width": 0,
        "height": 0,
        "name": "Inferior columna DA-02",
        "label": "Inferior columna DA-02",
        "format": "{{msg.payload}}",
        "layout": "col-center",
        "style": true,
        "font": "Helvetica, sans-serif",
        "fontSize": 16,
        "color": "#717171",
        "className": "",
        "x": 1770,
        "y": 640,
        "wires": []
    },
    {
        "id": "81a729ec4384f6d9",
        "type": "function",
        "z": "5abe0cc40f5ad9c5",
        "name": "Procesar Temperatura",
        "func": "let values = msg.payload.data;\nlet temperature = values[0] * 0.1; // Asumimos que la conversi√≥n es correcta seg√∫n tu sistema\nlet adjustedTemperature = 1.3587 * temperature - 14.0434;\nmsg.payload = parseFloat(adjustedTemperature.toFixed(1)); // Env√≠a solo el n√∫mero ajustado\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1140,
        "y": 460,
        "wires": [
            [
                "2fceac4eaaf2ac16"
            ]
        ]
    },
    {
        "id": "d8cb9785b7f8e460",
        "type": "function",
        "z": "5abe0cc40f5ad9c5",
        "name": "telemetria",
        "func": "msg.payload = {\n  temperatura: msg.payload\n};\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1580,
        "y": 680,
        "wires": [
            [
                "509b308158b1e8fa"
            ]
        ]
    },
    {
        "id": "4877dd97a4790381",
        "type": "mqtt out",
        "z": "5abe0cc40f5ad9c5",
        "d": true,
        "name": "mqtt_tb_ST-3.4",
        "topic": "v1/devices/me/telemetry",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "7d040f0f19d79e89",
        "x": 1740,
        "y": 580,
        "wires": []
    },
    {
        "id": "509b308158b1e8fa",
        "type": "mqtt out",
        "z": "5abe0cc40f5ad9c5",
        "d": true,
        "name": "mqtt_tb_ST-3.3",
        "topic": "v1/devices/me/telemetry",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "b2eea5177ada0477",
        "x": 1740,
        "y": 680,
        "wires": []
    },
    {
        "id": "eb931d150b681d2e",
        "type": "function",
        "z": "5abe0cc40f5ad9c5",
        "name": "telemetria",
        "func": "msg.payload = {\n  temperatura: msg.payload\n};\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1580,
        "y": 580,
        "wires": [
            [
                "4877dd97a4790381"
            ]
        ]
    },
    {
        "id": "c6ceedc803939e46",
        "type": "function",
        "z": "5abe0cc40f5ad9c5",
        "name": "telemetria",
        "func": "msg.payload = {\n  temperatura: msg.payload\n};\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1560,
        "y": 480,
        "wires": [
            [
                "32d36338cd23f2a3"
            ]
        ]
    },
    {
        "id": "831adbcf90229b5a",
        "type": "function",
        "z": "5abe0cc40f5ad9c5",
        "name": "telemetria",
        "func": "msg.payload = {\n  temperatura: msg.payload\n};\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1560,
        "y": 380,
        "wires": [
            [
                "99d036f3b6ab43be"
            ]
        ]
    },
    {
        "id": "9e0c6a146be0aa98",
        "type": "ui-text",
        "z": "5abe0cc40f5ad9c5",
        "group": "d1e5da8ea7145cd4",
        "order": 2,
        "width": 0,
        "height": 0,
        "name": "Superior Columna DA-01",
        "label": "Superior Columna DA-01",
        "format": "{{msg.payload}}",
        "layout": "col-center",
        "style": true,
        "font": "Helvetica, sans-serif",
        "fontSize": 16,
        "color": "#717171",
        "className": "",
        "x": 1750,
        "y": 340,
        "wires": []
    },
    {
        "id": "7e4aa1530de89ffd",
        "type": "ui-text",
        "z": "5abe0cc40f5ad9c5",
        "group": "d1e5da8ea7145cd4",
        "order": 3,
        "width": 0,
        "height": 0,
        "name": "Inferior Columna DA-01",
        "label": "Inferior Columna DA-01",
        "format": "{{msg.payload}}",
        "layout": "col-center",
        "style": true,
        "font": "Helvetica, sans-serif",
        "fontSize": 16,
        "color": "#717171",
        "className": "",
        "x": 1750,
        "y": 440,
        "wires": []
    },
    {
        "id": "99d036f3b6ab43be",
        "type": "mqtt out",
        "z": "5abe0cc40f5ad9c5",
        "d": true,
        "name": "mqtt_tb_ST-3.2",
        "topic": "v1/devices/me/telemetry",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "a32defc5189db4ea",
        "x": 1720,
        "y": 380,
        "wires": []
    },
    {
        "id": "32d36338cd23f2a3",
        "type": "mqtt out",
        "z": "5abe0cc40f5ad9c5",
        "d": true,
        "name": "mqtt_tb_ST-3.1",
        "topic": "v1/devices/me/telemetry",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "9c9e2630ed80f90e",
        "x": 1720,
        "y": 480,
        "wires": []
    },
    {
        "id": "specialTemperatureFunction",
        "type": "function",
        "z": "5abe0cc40f5ad9c5",
        "name": "Procesar Temperatura Especial",
        "func": "let values = msg.payload.data;\nlet temperature = values[0] * 0.1 * 1.022; // Multiplicaci√≥n por 0.1 y luego por 1.022\nmsg.payload = parseFloat(temperature.toFixed(1)); // Env√≠a solo el n√∫mero ajustado\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1150,
        "y": 360,
        "wires": [
            [
                "498a4b6131b3e221"
            ]
        ]
    },
    {
        "id": "498a4b6131b3e221",
        "type": "switch",
        "z": "5abe0cc40f5ad9c5",
        "name": "get topic",
        "property": "topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "read_TC_1",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1360,
        "y": 360,
        "wires": [
            [
                "861c961ca382753d",
                "c6ceedc803939e46"
            ]
        ]
    },
    {
        "id": "0808674536b8b325",
        "type": "function",
        "z": "5abe0cc40f5ad9c5",
        "name": "Procesar Temperatura",
        "func": "let values = msg.payload.data;\nlet temperature = values[0] * 0.1 * 0.985; // Asumimos que la conversi√≥n es correcta seg√∫n tu sistema\nlet adjustedTemperature = 1.3587 * temperature - 14.0434;\nmsg.payload = parseFloat(adjustedTemperature.toFixed(1)); // Env√≠a solo el n√∫mero ajustado\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1060,
        "y": 280,
        "wires": [
            [
                "746cb60e1737af3b"
            ]
        ]
    },
    {
        "id": "746cb60e1737af3b",
        "type": "switch",
        "z": "5abe0cc40f5ad9c5",
        "name": "get topic",
        "property": "topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "read_TC_2",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1360,
        "y": 300,
        "wires": [
            [
                "tempFormatFunction",
                "831adbcf90229b5a"
            ]
        ]
    },
    {
        "id": "e00fc1d0d3c743a7",
        "type": "inject",
        "z": "af530bfa0859125d",
        "name": "ADC3_AI0",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "2",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "read_ADC3_AI0",
        "payload": "{\"value\":0,\"fc\":3,\"unitid\":1,\"address\":96,\"quantity\":1}",
        "payloadType": "json",
        "x": 220,
        "y": 420,
        "wires": [
            [
                "353a26fce582e8c1"
            ]
        ]
    },
    {
        "id": "b7810f4cf10e09bd",
        "type": "inject",
        "z": "af530bfa0859125d",
        "name": "update",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "update",
        "payload": "",
        "payloadType": "date",
        "x": 260,
        "y": 380,
        "wires": [
            [
                "353a26fce582e8c1"
            ]
        ]
    },
    {
        "id": "3c2713ff0b14637b",
        "type": "inject",
        "z": "af530bfa0859125d",
        "name": "next",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "next",
        "payload": "",
        "payloadType": "date",
        "x": 270,
        "y": 340,
        "wires": [
            [
                "353a26fce582e8c1"
            ]
        ]
    },
    {
        "id": "9a7897e7aa8a9fef",
        "type": "change",
        "z": "af530bfa0859125d",
        "name": "Advance queue",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "next",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 560,
        "y": 440,
        "wires": [
            [
                "353a26fce582e8c1"
            ]
        ]
    },
    {
        "id": "353a26fce582e8c1",
        "type": "function",
        "z": "af530bfa0859125d",
        "name": "Modbus Queue",
        "func": "let resendifnoresposne = true; // resend the last message is no response is received\nlet resendinterval = 10; // resend last e message every x seconds\nlet online_threshold = 10; // Seconds between updates under which the device is considered online\nlet offline_threshold = 300; // Seconds between updates above which the device is considered offline\n\nlet notifmsg = null;\n\n// Check and make sure the incoming message has a topic\nif ((msg.topic===\"\")||(msg.topic===null)||(msg.topic===undefined)) {\n    node.status({fill:\"red\",shape:\"dot\",text:\"Topic missing\"});\n    return;\n}\n\nlet lastupdate = context.get(\"lastupdate\");\nlet state = context.get(\"state\") | 0;\nlet queue = context.get(\"queue\");\nlet queuecount = 0;\nif (queue === undefined) {\n    queue = [];\n} else {\n    if (Array.isArray(queue)) {\n        queuecount = queue.length;\n    } else {\n        queue = [];\n    }\n}\nlet current = new Date().getTime();\nlet send = false;\n\nswitch (msg.topic.toLowerCase()) {\n    case \"update\":\n        // Update the timer and statistics\n\n        if (lastupdate !== undefined) {\n            notifmsg = { \"topic\": \"Information\", \"payload\": {} };\n            current = current - lastupdate;\n            current = Math.floor(current / 1000);\n            notifmsg.payload.secondsincelastupdate = current;\n            var minute = Math.floor(current / 60);\n            var hour = Math.floor(minute / 60);\n            var day = Math.floor(hour / 24);\n            if (current > 24 * 60 * 60) {\n                notifmsg.payload.updatetext = \"Last update \" + day + \" days, \" + hour % 24 + \" hours, \" + minute % 60 + \" minutes, \" + current % 60 + \" seconds ago\";\n            } else if (current > 60 * 60) {\n                notifmsg.payload.updatetext = \"Last update \" + hour % 24 + \" hours, \" + minute % 60 + \" minutes, \" + current % 60 + \" seconds ago\";\n            } else if (current > 60) {\n                notifmsg.payload.updatetext = \"Last update \" + minute % 60 + \" minutes, \" + current % 60 + \" seconds ago\";\n            } else {\n                notifmsg.payload.updatetext = \"Last update \" + current % 60 + \" seconds ago\";\n            }\n\n            // Resend last message if there is no response from the server\n            if (resendifnoresposne) {\n                if ((current>0) && (current % resendinterval===0)) {\n                    let lastmsg = context.get(\"lastmsg\");\n                    if ((lastmsg!==undefined) && (context.get(\"sent\"))) {\n                        notifmsg.payload.resend = true;\n                        if ((lastmsg.payload.fc === 1) || (lastmsg.payload.fc === 2) || (lastmsg.payload.fc === 3) || (lastmsg.payload.fc === 4)) {\n                            // this is a modbus read request\n                            node.status({ fill: \"green\", shape: \"dot\", text: \"Read re-sent!\" });\n                            return [lastmsg, null, notifmsg];\n                        } else {\n                            // this is a modbus write request\n                            node.status({ fill: \"green\", shape: \"dot\", text: \"Write re-sent!\" });\n                            return [null, lastmsg, notifmsg];\n                        }\n                    }\n                }\n            }\n\n            // Check for online state\n            if (state !== 1) {\n                if (current < online_threshold) {\n                    notifmsg.topic = \"Warning\";\n                    notifmsg.payload.text = \"Device is now online\";\n                    notifmsg.payload.statuschange = true;\n                    state = 1;\n                    context.set(\"state\", state);\n                }\n            } else {\n                if (current > offline_threshold) {\n                    notifmsg.topic = \"Error\";\n                    notifmsg.payload.text = \"Device is not transmitting\";\n                    notifmsg.payload.statuschange = true;\n                    state = 99;\n                    context.set(\"state\", state);\n                }\n            }\n            notifmsg.payload.state = state;\n            if (state===1) {\n                node.status({ fill: \"blue\", shape: \"ring\", text: queuecount+ \" | \"+notifmsg.payload.updatetext });\n            } else {\n                node.status({ fill: \"red\", shape: \"ring\", text: queuecount + \" | \" + notifmsg.payload.updatetext });\n            }\n            return [null, null, notifmsg];\n\n        } else {\n            node.status({ fill: \"grey\", shape: \"ring\", text: \"No data\" });\n        }\n        break;\n    case \"next\":\n        // Update the lastupdate counter\n        context.set(\"lastupdate\", current);\n        context.set(\"sent\", false);\n        send = true;\n        break;\n    case \"reset\":\n        context.set(\"queue\",[]);\n        context.set(\"sent\", false);\n        context.set(\"lastmsg\", undefined);\n        break;\n    default:\n        // The incoming message is a modbus request\n\n        // delete the last msg to prevent from being resent\n        // context.set(\"lastmsg\", undefined);\n\n        // Check if there is already a message in the queue with the same topic. \n        // If there is it needs to be deleted, because we only keep the last message.\n        for (let i=queue.length-1; i>=0; i--) {\n            if (queue[i].topic === msg.topic) {\n                queue.splice(i,1);\n            }\n        }\n\n        // Add the message to the end of the queue\n        queue.push(msg);\n        context.set(\"queue\",queue);\n\n        if (!context.get(\"sent\")) {\n            send = true;\n        }\n        node.status({ fill: \"green\", shape: \"dot\", text: queue.length });\n\n}\n\n// We need to send out a new message\nif (send) {\n\n    if (queue.length>0) {\n        // Get the older message from the array\n        let newmsg = queue[0];\n        // remove this message\n        queue.splice(0,1);\n        context.set(\"queue\",queue);\n        context.set(\"sent\", true);\n        context.set(\"lastmsg\", newmsg);\n\n        if ((newmsg.payload.fc === 1) || (newmsg.payload.fc === 2) || (newmsg.payload.fc === 3) || (newmsg.payload.fc === 4)) {\n            // this is a modbus read request\n            node.status({ fill: \"green\", shape: \"dot\", text: \"Read sent!\" });\n            return[newmsg,null,null];\n        } else {\n            // this is a modbus write request\n            node.status({ fill: \"green\", shape: \"dot\", text: \"Write sent!\" });\n            return [null, newmsg, null];\n        }\n        \n    }\n}\n",
        "outputs": 3,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 480,
        "y": 560,
        "wires": [
            [
                "016a37d03da729e6"
            ],
            [],
            [
                "5181badbc62bd71b"
            ]
        ],
        "info": "# Modbus Queue\r\n\r\nThis node queueing read and write messages for modbus. Use this node if you are reading and writing the same device with many different requests. E.g. reading different coil/register intervals continously and also writing to the device at the same time.\r\n\r\nIt does a few things:\r\n- queues all messages arrive on the input port\r\n- based on the msg.topic, older messages of the same topci is ignored\r\n- sends out the oldest message and waits for the \r\n- monitors the time since last message and send out report on the output\r\n- handles online/offline status\r\n- resend the last message is response is not received in time\r\n\r\n## Input Data\r\n\r\n### payload\r\n\r\nThe payload should contain the data that gets sent to the flex-getter or flex-write node.\r\nTypical modbus read payload:\r\n`{\"value\":0,\"fc\":3,\"unitid\":1,\"address\":1000,\"quantity\":20}`\r\nTypical modbus write payload:\r\n`{\"value\":false,\"fc\":5,\"unitid\":1,\"address\":0,\"quantity\":1}`\r\n\r\n### topic\r\n\r\nEach message must contain a topic (any text), and this topic is used to identify the different read/write requests and delete any earlier request with the same topic if it still in the queueing\r\n\r\nThere are a few reserved topic for special function (for these payload is ignored):\r\n- reset: resets the queue and deleted any data collected so far\r\n- next: this is the message fed back from the flex getter/write node to indicate to this node that a new message can be sent out\r\n- update: this should be coming from a 1 second time to display the current queue count, time since the last update and online/offline status\r\n\r\n## Output ports\r\n\r\n### Port 1: flex getter\r\n\r\nThis output should be connected to a modbos-flex-getter and all the read requests will be sent out through this port\r\n\r\n### Port 2: flex write\r\n\r\nThis output should be connected to a modbos-flex-write and all the write requests will be sent out through this port\r\n\r\n### Port 3: status messages\r\n\r\nThis port outputs a status message for every update message (msg.topic=\"update\").\r\n\r\n- topic: \"Information\" for regular updates, \"Warning\": offline device is now back online, \"Error\": device is offline\r\n- payload.text: message like when the device gone offline, or back online\r\n- payload.updatetext: time passed since the last update (human readable format)\r\n- payload.secondsincelastupdate: number of seconds since the last update from the device\r\n- payload.statuschange: true if status is changed (gone offline, back online)\r\n- payload.state: 0: initial state, no data yet, 1: device online, 99: device offline\r\n\r\n## Node Settings\r\n\r\nChange the settings in the first 4 lines of the code to influence the behaviour. Explanation is in the code as comment."
    },
    {
        "id": "f05fa78a9f1fb2b9",
        "type": "inject",
        "z": "af530bfa0859125d",
        "name": "reset",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "update",
        "payload": "",
        "payloadType": "date",
        "x": 270,
        "y": 300,
        "wires": [
            [
                "353a26fce582e8c1"
            ]
        ]
    },
    {
        "id": "1324cca7591d2ccc",
        "type": "link in",
        "z": "af530bfa0859125d",
        "name": "link in 3",
        "links": [],
        "x": 305,
        "y": 260,
        "wires": [
            [
                "353a26fce582e8c1"
            ]
        ]
    },
    {
        "id": "3cee6e20e00881c4",
        "type": "inject",
        "z": "af530bfa0859125d",
        "name": "check",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 470,
        "y": 880,
        "wires": [
            [
                "eed20640a37ec99a"
            ]
        ]
    },
    {
        "id": "eed20640a37ec99a",
        "type": "function",
        "z": "af530bfa0859125d",
        "name": "health check",
        "func": "\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 650,
        "y": 880,
        "wires": [
            [
                "4047775ea3d83083"
            ]
        ]
    },
    {
        "id": "4047775ea3d83083",
        "type": "switch",
        "z": "af530bfa0859125d",
        "name": "update diag",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 850,
        "y": 880,
        "wires": [
            []
        ]
    },
    {
        "id": "5181badbc62bd71b",
        "type": "function",
        "z": "af530bfa0859125d",
        "name": "update log",
        "func": "if (msg.topic === \"Information\") {\n    // Registrar mensajes de informaci√≥n\n    node.log(\"Informaci√≥n: \" + msg.payload.updatetext);\n} else if (msg.topic === \"Warning\") {\n    // Registrar mensajes de advertencia\n    node.warn(\"Advertencia: \" + msg.payload.text);\n} else if (msg.topic === \"Error\") {\n    // Registrar mensajes de error\n    node.error(\"Error: \" + msg.payload.text);\n}\n\n// Puedes agregar l√≥gica adicional para procesar otros campos del mensaje de estado\n// Por ejemplo, puedes verificar el valor de msg.payload.state para realizar acciones espec√≠ficas\n// seg√∫n el estado del dispositivo (en l√≠nea, fuera de l√≠nea, etc.)\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 650,
        "y": 600,
        "wires": [
            []
        ]
    },
    {
        "id": "80a17bb3a34ff2e8",
        "type": "inject",
        "z": "af530bfa0859125d",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 280,
        "y": 880,
        "wires": [
            [
                "353a26fce582e8c1"
            ]
        ]
    },
    {
        "id": "fc6786449d855df4",
        "type": "inject",
        "z": "af530bfa0859125d",
        "name": "ADC_3_AI1",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "2",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "read_ADC3_AI1",
        "payload": "{\"value\":0,\"fc\":3,\"unitid\":1,\"address\":97,\"quantity\":1}",
        "payloadType": "json",
        "x": 220,
        "y": 460,
        "wires": [
            [
                "353a26fce582e8c1"
            ]
        ]
    },
    {
        "id": "3a1b7a401bce11cb",
        "type": "inject",
        "z": "af530bfa0859125d",
        "name": "ADC3_AI2",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "2",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "read_ADC3_AI2",
        "payload": "{\"value\":0,\"fc\":3,\"unitid\":1,\"address\":98,\"quantity\":1}",
        "payloadType": "json",
        "x": 220,
        "y": 500,
        "wires": [
            [
                "353a26fce582e8c1"
            ]
        ]
    },
    {
        "id": "016a37d03da729e6",
        "type": "modbus-flex-getter",
        "z": "af530bfa0859125d",
        "name": "ADC3",
        "showStatusActivities": true,
        "showErrors": true,
        "showWarnings": true,
        "logIOActivities": false,
        "server": "3ab988e0e462aed7",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "keepMsgProperties": true,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 690,
        "y": 540,
        "wires": [
            [
                "6382a708c5d5d64a",
                "9a7897e7aa8a9fef"
            ],
            []
        ]
    },
    {
        "id": "6382a708c5d5d64a",
        "type": "switch",
        "z": "af530bfa0859125d",
        "name": "ADC3 Registers",
        "property": "topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "read_ADC3_AI0",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "read_ADC3_AI1",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "read_ADC3_AI2",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "read_ADC3_AI3",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "read_ADC3_AI4",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "read_ADC3_AI5",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "read_ADC3_AI6",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "read_ADC3_AI7",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 8,
        "x": 960,
        "y": 440,
        "wires": [
            [
                "75aad67f2f25ad34"
            ],
            [
                "0dc0895b9aa00f3f"
            ],
            [
                "ef0e847332fbea6c"
            ],
            [],
            [],
            [],
            [],
            []
        ]
    },
    {
        "id": "bd27e451fea31f87",
        "type": "inject",
        "z": "af530bfa0859125d",
        "name": "ADC3_AI3",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "2",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "read_ADC3_AI3",
        "payload": "{\"value\":0,\"fc\":3,\"unitid\":1,\"address\":99,\"quantity\":1}",
        "payloadType": "json",
        "x": 220,
        "y": 540,
        "wires": [
            [
                "353a26fce582e8c1"
            ]
        ]
    },
    {
        "id": "fb06c897cafafe9d",
        "type": "inject",
        "z": "af530bfa0859125d",
        "name": "ADC3_AI4",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "2",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "read_ADC3_AI4",
        "payload": "{\"value\":0,\"fc\":4,\"unitid\":100,\"address\":0,\"quantity\":2}",
        "payloadType": "json",
        "x": 220,
        "y": 580,
        "wires": [
            [
                "353a26fce582e8c1"
            ]
        ]
    },
    {
        "id": "dd43e1e756f244aa",
        "type": "inject",
        "z": "af530bfa0859125d",
        "name": "ADC3_AI5",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "2",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "read_ADC3_AI5",
        "payload": "{\"value\":0,\"fc\":4,\"unitid\":1,\"address\":5,\"quantity\":1}",
        "payloadType": "json",
        "x": 220,
        "y": 620,
        "wires": [
            [
                "353a26fce582e8c1"
            ]
        ]
    },
    {
        "id": "5a6b0b197b9dddd2",
        "type": "inject",
        "z": "af530bfa0859125d",
        "name": "ADC3_AI6",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "2",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "read_ADC3_AI6",
        "payload": "{\"value\":0,\"fc\":4,\"unitid\":1,\"address\":6,\"quantity\":1}",
        "payloadType": "json",
        "x": 220,
        "y": 660,
        "wires": [
            [
                "353a26fce582e8c1"
            ]
        ]
    },
    {
        "id": "ef0e847332fbea6c",
        "type": "function",
        "z": "af530bfa0859125d",
        "name": "calc_vol_FA-04",
        "func": "const valorCrudo = msg.payload[0];\nconst valorLitros = ((valorCrudo - 4000) / (20000 - 4000)) * (65000 - 3200);\nmsg.payload = Math.round(valorLitros);  // Mantener solo el valor num√©rico\nreturn msg;\n",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1260,
        "y": 300,
        "wires": [
            [
                "b7d660696b25b6a1",
                "b37b8c9f95b42e83",
                "58df9191d2b0ec79"
            ],
            []
        ]
    },
    {
        "id": "c99a1643742a9413",
        "type": "mqtt out",
        "z": "af530bfa0859125d",
        "d": true,
        "name": "mqtt_tb_MN-4",
        "topic": "v1/devices/me/telemetry",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "586ef25fd8e81fa5",
        "x": 1620,
        "y": 320,
        "wires": []
    },
    {
        "id": "b7d660696b25b6a1",
        "type": "function",
        "z": "af530bfa0859125d",
        "name": "telemetria",
        "func": "msg.payload = {\n  volumen: msg.payload\n};\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1460,
        "y": 320,
        "wires": [
            [
                "c99a1643742a9413"
            ]
        ]
    },
    {
        "id": "d4d7dcc0b4ffc0bb",
        "type": "ui-chart",
        "z": "af530bfa0859125d",
        "group": "485ecec3c95ed560",
        "name": "Volumen FA-04",
        "label": "Volumen FA-04",
        "order": 1,
        "chartType": "bar",
        "category": "label",
        "categoryType": "property",
        "xAxisProperty": "",
        "xAxisPropertyType": "msg",
        "xAxisType": "category",
        "yAxisProperty": "value",
        "ymin": "0",
        "ymax": "63000",
        "action": "replace",
        "pointShape": "circle",
        "pointRadius": 4,
        "showLegend": false,
        "removeOlder": 1,
        "removeOlderUnit": "3600",
        "removeOlderPoints": "",
        "colors": [
            "#227dbf",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "width": "1",
        "height": "5",
        "className": "",
        "x": 1640,
        "y": 260,
        "wires": [
            []
        ]
    },
    {
        "id": "b37b8c9f95b42e83",
        "type": "function",
        "z": "af530bfa0859125d",
        "name": "formato_ui",
        "func": "msg.payload = {\n    value: msg.payload,\n    label: msg.payload + \" Litros\"\n};\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1470,
        "y": 260,
        "wires": [
            [
                "d4d7dcc0b4ffc0bb"
            ]
        ]
    },
    {
        "id": "58df9191d2b0ec79",
        "type": "debug",
        "z": "af530bfa0859125d",
        "name": "vol_FA-04",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1800,
        "y": 300,
        "wires": []
    },
    {
        "id": "0dc0895b9aa00f3f",
        "type": "function",
        "z": "af530bfa0859125d",
        "name": "calc_vol_FA-06A",
        "func": "const valorCrudo = msg.payload[0];\nconst valorLitros = ((valorCrudo - 4000) / (20000 - 4000)) * (51600 - 0);\nmsg.payload = Math.round(valorLitros);  // Mantener solo el valor num√©rico\nreturn msg;\n",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1270,
        "y": 400,
        "wires": [
            [
                "997623779ae3ed09",
                "237f98f39bd31333",
                "fcf47df319656d71"
            ],
            []
        ]
    },
    {
        "id": "0cb4f7ef995c42e4",
        "type": "mqtt out",
        "z": "af530bfa0859125d",
        "d": true,
        "name": "mqtt_tb_MN-6A",
        "topic": "v1/devices/me/telemetry",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "b4cdb9cd5246ed2e",
        "x": 1620,
        "y": 420,
        "wires": []
    },
    {
        "id": "997623779ae3ed09",
        "type": "function",
        "z": "af530bfa0859125d",
        "name": "telemetria",
        "func": "msg.payload = {\n  volumen: msg.payload\n};\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1460,
        "y": 420,
        "wires": [
            [
                "0cb4f7ef995c42e4"
            ]
        ]
    },
    {
        "id": "b975d4199caf0fab",
        "type": "ui-chart",
        "z": "af530bfa0859125d",
        "group": "485ecec3c95ed560",
        "name": "Volumen FA-06A",
        "label": "Volumen FA-06A",
        "order": 1,
        "chartType": "bar",
        "category": "label",
        "categoryType": "property",
        "xAxisProperty": "",
        "xAxisPropertyType": "msg",
        "xAxisType": "category",
        "yAxisProperty": "value",
        "ymin": "0",
        "ymax": "54000",
        "action": "replace",
        "pointShape": "circle",
        "pointRadius": 4,
        "showLegend": false,
        "removeOlder": 1,
        "removeOlderUnit": "3600",
        "removeOlderPoints": "",
        "colors": [
            "#227dbf",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "width": "1",
        "height": "5",
        "className": "",
        "x": 1650,
        "y": 360,
        "wires": [
            []
        ]
    },
    {
        "id": "237f98f39bd31333",
        "type": "function",
        "z": "af530bfa0859125d",
        "name": "formato_ui",
        "func": "msg.payload = {\n    value: msg.payload,\n    label: msg.payload + \" Litros\"\n};\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1470,
        "y": 360,
        "wires": [
            [
                "b975d4199caf0fab"
            ]
        ]
    },
    {
        "id": "fcf47df319656d71",
        "type": "debug",
        "z": "af530bfa0859125d",
        "name": "vol_FA-06A",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1790,
        "y": 400,
        "wires": []
    },
    {
        "id": "75aad67f2f25ad34",
        "type": "function",
        "z": "af530bfa0859125d",
        "name": "calc_vol_FA-06B",
        "func": "const valorCrudo = msg.payload[0];\nconst valorLitros = ((valorCrudo - 4000) / (20000 - 4000)) * (94100 - 0);\nmsg.payload = Math.round(valorLitros);  // Mantener solo el valor num√©rico\nreturn msg;\n",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1270,
        "y": 500,
        "wires": [
            [
                "b59a10c3b3f0eff7",
                "8a4c85b2584f7d44",
                "81a1f17334e29684"
            ],
            []
        ]
    },
    {
        "id": "0ebe715e42edc25a",
        "type": "mqtt out",
        "z": "af530bfa0859125d",
        "d": true,
        "name": "mqtt_tb_MN-6B",
        "topic": "v1/devices/me/telemetry",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "4aabcdd5a91592fb",
        "x": 1620,
        "y": 520,
        "wires": []
    },
    {
        "id": "b59a10c3b3f0eff7",
        "type": "function",
        "z": "af530bfa0859125d",
        "name": "telemetria",
        "func": "msg.payload = {\n  volumen: msg.payload\n};\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1460,
        "y": 520,
        "wires": [
            [
                "0ebe715e42edc25a"
            ]
        ]
    },
    {
        "id": "a9d0c6ab38b8787e",
        "type": "ui-chart",
        "z": "af530bfa0859125d",
        "group": "485ecec3c95ed560",
        "name": "Volumen FA-06B",
        "label": "Volumen FA-06B",
        "order": 1,
        "chartType": "bar",
        "category": "label",
        "categoryType": "property",
        "xAxisProperty": "",
        "xAxisPropertyType": "msg",
        "xAxisType": "category",
        "yAxisProperty": "value",
        "ymin": "0",
        "ymax": "93000",
        "action": "replace",
        "pointShape": "circle",
        "pointRadius": 4,
        "showLegend": false,
        "removeOlder": 1,
        "removeOlderUnit": "3600",
        "removeOlderPoints": "",
        "colors": [
            "#227dbf",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "width": "1",
        "height": "5",
        "className": "",
        "x": 1650,
        "y": 460,
        "wires": [
            []
        ]
    },
    {
        "id": "8a4c85b2584f7d44",
        "type": "function",
        "z": "af530bfa0859125d",
        "name": "formato_ui",
        "func": "msg.payload = {\n    value: msg.payload,\n    label: msg.payload + \" Litros\"\n};\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1470,
        "y": 460,
        "wires": [
            [
                "a9d0c6ab38b8787e"
            ]
        ]
    },
    {
        "id": "81a1f17334e29684",
        "type": "debug",
        "z": "af530bfa0859125d",
        "name": "vol_FA-06B",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1790,
        "y": 500,
        "wires": []
    },
    {
        "id": "b6ad7e85b72dac92",
        "type": "inject",
        "z": "9fa46c697055fd5a",
        "name": "update",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "update",
        "payload": "",
        "payloadType": "date",
        "x": 750,
        "y": 600,
        "wires": [
            [
                "9e6c0ff1151a09d0"
            ]
        ]
    },
    {
        "id": "a55f26ece7c5d393",
        "type": "inject",
        "z": "9fa46c697055fd5a",
        "name": "next",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "next",
        "payload": "",
        "payloadType": "date",
        "x": 760,
        "y": 560,
        "wires": [
            [
                "9e6c0ff1151a09d0"
            ]
        ]
    },
    {
        "id": "e876b6180acc4082",
        "type": "change",
        "z": "9fa46c697055fd5a",
        "name": "Advance queue",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "next",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 980,
        "y": 660,
        "wires": [
            [
                "9e6c0ff1151a09d0"
            ]
        ]
    },
    {
        "id": "9e6c0ff1151a09d0",
        "type": "function",
        "z": "9fa46c697055fd5a",
        "name": "Modbus Queue",
        "func": "let resendifnoresposne = true; // resend the last message is no response is received\nlet resendinterval = 10; // resend last e message every x seconds\nlet online_threshold = 10; // Seconds between updates under which the device is considered online\nlet offline_threshold = 300; // Seconds between updates above which the device is considered offline\n\nlet notifmsg = null;\n\n// Check and make sure the incoming message has a topic\nif ((msg.topic===\"\")||(msg.topic===null)||(msg.topic===undefined)) {\n    node.status({fill:\"red\",shape:\"dot\",text:\"Topic missing\"});\n    return;\n}\n\nlet lastupdate = context.get(\"lastupdate\");\nlet state = context.get(\"state\") | 0;\nlet queue = context.get(\"queue\");\nlet queuecount = 0;\nif (queue === undefined) {\n    queue = [];\n} else {\n    if (Array.isArray(queue)) {\n        queuecount = queue.length;\n    } else {\n        queue = [];\n    }\n}\nlet current = new Date().getTime();\nlet send = false;\n\nswitch (msg.topic.toLowerCase()) {\n    case \"update\":\n        // Update the timer and statistics\n\n        if (lastupdate !== undefined) {\n            notifmsg = { \"topic\": \"Information\", \"payload\": {} };\n            current = current - lastupdate;\n            current = Math.floor(current / 1000);\n            notifmsg.payload.secondsincelastupdate = current;\n            var minute = Math.floor(current / 60);\n            var hour = Math.floor(minute / 60);\n            var day = Math.floor(hour / 24);\n            if (current > 24 * 60 * 60) {\n                notifmsg.payload.updatetext = \"Last update \" + day + \" days, \" + hour % 24 + \" hours, \" + minute % 60 + \" minutes, \" + current % 60 + \" seconds ago\";\n            } else if (current > 60 * 60) {\n                notifmsg.payload.updatetext = \"Last update \" + hour % 24 + \" hours, \" + minute % 60 + \" minutes, \" + current % 60 + \" seconds ago\";\n            } else if (current > 60) {\n                notifmsg.payload.updatetext = \"Last update \" + minute % 60 + \" minutes, \" + current % 60 + \" seconds ago\";\n            } else {\n                notifmsg.payload.updatetext = \"Last update \" + current % 60 + \" seconds ago\";\n            }\n\n            // Resend last message if there is no response from the server\n            if (resendifnoresposne) {\n                if ((current>0) && (current % resendinterval===0)) {\n                    let lastmsg = context.get(\"lastmsg\");\n                    if ((lastmsg!==undefined) && (context.get(\"sent\"))) {\n                        notifmsg.payload.resend = true;\n                        if ((lastmsg.payload.fc === 1) || (lastmsg.payload.fc === 2) || (lastmsg.payload.fc === 3) || (lastmsg.payload.fc === 4)) {\n                            // this is a modbus read request\n                            node.status({ fill: \"green\", shape: \"dot\", text: \"Read re-sent!\" });\n                            return [lastmsg, null, notifmsg];\n                        } else {\n                            // this is a modbus write request\n                            node.status({ fill: \"green\", shape: \"dot\", text: \"Write re-sent!\" });\n                            return [null, lastmsg, notifmsg];\n                        }\n                    }\n                }\n            }\n\n            // Check for online state\n            if (state !== 1) {\n                if (current < online_threshold) {\n                    notifmsg.topic = \"Warning\";\n                    notifmsg.payload.text = \"Device is now online\";\n                    notifmsg.payload.statuschange = true;\n                    state = 1;\n                    context.set(\"state\", state);\n                }\n            } else {\n                if (current > offline_threshold) {\n                    notifmsg.topic = \"Error\";\n                    notifmsg.payload.text = \"Device is not transmitting\";\n                    notifmsg.payload.statuschange = true;\n                    state = 99;\n                    context.set(\"state\", state);\n                }\n            }\n            notifmsg.payload.state = state;\n            if (state===1) {\n                node.status({ fill: \"blue\", shape: \"ring\", text: queuecount+ \" | \"+notifmsg.payload.updatetext });\n            } else {\n                node.status({ fill: \"red\", shape: \"ring\", text: queuecount + \" | \" + notifmsg.payload.updatetext });\n            }\n            return [null, null, notifmsg];\n\n        } else {\n            node.status({ fill: \"grey\", shape: \"ring\", text: \"No data\" });\n        }\n        break;\n    case \"next\":\n        // Update the lastupdate counter\n        context.set(\"lastupdate\", current);\n        context.set(\"sent\", false);\n        send = true;\n        break;\n    case \"reset\":\n        context.set(\"queue\",[]);\n        context.set(\"sent\", false);\n        context.set(\"lastmsg\", undefined);\n        break;\n    default:\n        // The incoming message is a modbus request\n\n        // delete the last msg to prevent from being resent\n        // context.set(\"lastmsg\", undefined);\n\n        // Check if there is already a message in the queue with the same topic. \n        // If there is it needs to be deleted, because we only keep the last message.\n        for (let i=queue.length-1; i>=0; i--) {\n            if (queue[i].topic === msg.topic) {\n                queue.splice(i,1);\n            }\n        }\n\n        // Add the message to the end of the queue\n        queue.push(msg);\n        context.set(\"queue\",queue);\n\n        if (!context.get(\"sent\")) {\n            send = true;\n        }\n        node.status({ fill: \"green\", shape: \"dot\", text: queue.length });\n\n}\n\n// We need to send out a new message\nif (send) {\n\n    if (queue.length>0) {\n        // Get the older message from the array\n        let newmsg = queue[0];\n        // remove this message\n        queue.splice(0,1);\n        context.set(\"queue\",queue);\n        context.set(\"sent\", true);\n        context.set(\"lastmsg\", newmsg);\n\n        if ((newmsg.payload.fc === 1) || (newmsg.payload.fc === 2) || (newmsg.payload.fc === 3) || (newmsg.payload.fc === 4)) {\n            // this is a modbus read request\n            node.status({ fill: \"green\", shape: \"dot\", text: \"Read sent!\" });\n            return[newmsg,null,null];\n        } else {\n            // this is a modbus write request\n            node.status({ fill: \"green\", shape: \"dot\", text: \"Write sent!\" });\n            return [null, newmsg, null];\n        }\n        \n    }\n}\n",
        "outputs": 3,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 980,
        "y": 780,
        "wires": [
            [
                "e6e60d5a9427cf31"
            ],
            [],
            [
                "53d976498e89501e"
            ]
        ],
        "info": "# Modbus Queue\r\n\r\nThis node queueing read and write messages for modbus. Use this node if you are reading and writing the same device with many different requests. E.g. reading different coil/register intervals continously and also writing to the device at the same time.\r\n\r\nIt does a few things:\r\n- queues all messages arrive on the input port\r\n- based on the msg.topic, older messages of the same topci is ignored\r\n- sends out the oldest message and waits for the \r\n- monitors the time since last message and send out report on the output\r\n- handles online/offline status\r\n- resend the last message is response is not received in time\r\n\r\n## Input Data\r\n\r\n### payload\r\n\r\nThe payload should contain the data that gets sent to the flex-getter or flex-write node.\r\nTypical modbus read payload:\r\n`{\"value\":0,\"fc\":3,\"unitid\":1,\"address\":1000,\"quantity\":20}`\r\nTypical modbus write payload:\r\n`{\"value\":false,\"fc\":5,\"unitid\":1,\"address\":0,\"quantity\":1}`\r\n\r\n### topic\r\n\r\nEach message must contain a topic (any text), and this topic is used to identify the different read/write requests and delete any earlier request with the same topic if it still in the queueing\r\n\r\nThere are a few reserved topic for special function (for these payload is ignored):\r\n- reset: resets the queue and deleted any data collected so far\r\n- next: this is the message fed back from the flex getter/write node to indicate to this node that a new message can be sent out\r\n- update: this should be coming from a 1 second time to display the current queue count, time since the last update and online/offline status\r\n\r\n## Output ports\r\n\r\n### Port 1: flex getter\r\n\r\nThis output should be connected to a modbos-flex-getter and all the read requests will be sent out through this port\r\n\r\n### Port 2: flex write\r\n\r\nThis output should be connected to a modbos-flex-write and all the write requests will be sent out through this port\r\n\r\n### Port 3: status messages\r\n\r\nThis port outputs a status message for every update message (msg.topic=\"update\").\r\n\r\n- topic: \"Information\" for regular updates, \"Warning\": offline device is now back online, \"Error\": device is offline\r\n- payload.text: message like when the device gone offline, or back online\r\n- payload.updatetext: time passed since the last update (human readable format)\r\n- payload.secondsincelastupdate: number of seconds since the last update from the device\r\n- payload.statuschange: true if status is changed (gone offline, back online)\r\n- payload.state: 0: initial state, no data yet, 1: device online, 99: device offline\r\n\r\n## Node Settings\r\n\r\nChange the settings in the first 4 lines of the code to influence the behaviour. Explanation is in the code as comment."
    },
    {
        "id": "7b75b7eec74151d1",
        "type": "inject",
        "z": "9fa46c697055fd5a",
        "name": "reset",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "update",
        "payload": "",
        "payloadType": "date",
        "x": 760,
        "y": 520,
        "wires": [
            [
                "9e6c0ff1151a09d0"
            ]
        ]
    },
    {
        "id": "3782d60ed19c01fc",
        "type": "link in",
        "z": "9fa46c697055fd5a",
        "name": "link in 4",
        "links": [],
        "x": 795,
        "y": 480,
        "wires": [
            [
                "9e6c0ff1151a09d0"
            ]
        ]
    },
    {
        "id": "53d976498e89501e",
        "type": "function",
        "z": "9fa46c697055fd5a",
        "name": "update log",
        "func": "if (msg.topic === \"Information\") {\n    // Registrar mensajes de informaci√≥n\n    node.log(\"Informaci√≥n: \" + msg.payload.updatetext);\n} else if (msg.topic === \"Warning\") {\n    // Registrar mensajes de advertencia\n    node.warn(\"Advertencia: \" + msg.payload.text);\n} else if (msg.topic === \"Error\") {\n    // Registrar mensajes de error\n    node.error(\"Error: \" + msg.payload.text);\n}\n\n// Puedes agregar l√≥gica adicional para procesar otros campos del mensaje de estado\n// Por ejemplo, puedes verificar el valor de msg.payload.state para realizar acciones espec√≠ficas\n// seg√∫n el estado del dispositivo (en l√≠nea, fuera de l√≠nea, etc.)\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1170,
        "y": 820,
        "wires": [
            []
        ]
    },
    {
        "id": "58a7f2059c9ae542",
        "type": "inject",
        "z": "9fa46c697055fd5a",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 720,
        "y": 1020,
        "wires": [
            [
                "9e6c0ff1151a09d0"
            ]
        ]
    },
    {
        "id": "9a01a5f2a23f06fd",
        "type": "function",
        "z": "9fa46c697055fd5a",
        "name": "calc_vol",
        "func": "const valorCrudo = msg.payload[0];\nconst valorLitros = ((valorCrudo - 4000) / (20000 - 4000)) * (40000 - 0);\nmsg.payload = Math.round(valorLitros);  // Mantener solo el valor num√©rico\nreturn msg;\n",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1710,
        "y": 540,
        "wires": [
            [
                "18eab2c3c21c232b",
                "3fdacd0a92232648",
                "26e5c2b41a0956af"
            ],
            []
        ]
    },
    {
        "id": "08481f95f5e7ae86",
        "type": "function",
        "z": "9fa46c697055fd5a",
        "name": "Data Accumulation Node",
        "func": "let cola = flow.get(\"colaLecturas\") || [];\nconst tiempoMaximo = 300000; // 5 minutos en milisegundos\n\n// A√±adir nuevo registro con timestamp actual si no viene incluido en el mensaje\nconst tiempoRegistro = msg.payload.timestamp || Date.now();  // Usar timestamp del mensaje o el tiempo actual si no est√° disponible\ncola.push({\n    tiempo: tiempoRegistro,\n    volumen: msg.payload[0] // Asumiendo que el volumen viene en msg.payload como primer elemento del array\n});\n\n// Eliminar registros m√°s antiguos que el tiempo m√°ximo permitido\nlet tiempoActual = Date.now();\ncola = cola.filter(registro => (tiempoActual - registro.tiempo) <= tiempoMaximo);\n\n// Guardar la cola actualizada en el contexto del flujo\nflow.set(\"colaLecturas\", cola);\n\n// Pasar la cola completa al siguiente nodo para su procesamiento\nreturn { payload: cola };\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1920,
        "y": 500,
        "wires": [
            [
                "2ef0ebdea5ea4864"
            ]
        ]
    },
    {
        "id": "2ef0ebdea5ea4864",
        "type": "function",
        "z": "9fa46c697055fd5a",
        "name": "Flow Calculation Node",
        "func": "const cola = msg.payload;\nlet flujo = 0;\n\nif (cola.length > 1) {\n    const primerRegistro = cola[0];\n    const ultimoRegistro = cola[cola.length - 1];\n    const tiempoDiferencia = (ultimoRegistro.tiempo - primerRegistro.tiempo) / 1000; // en segundos\n\n    // Convertir los valores de volumen seg√∫n la escala proporcionada\n    const volumenInicial = ((primerRegistro.volumen - 4000) / (20000 - 4000)) * (40000 - 0);\n    const volumenFinal = ((ultimoRegistro.volumen - 4000) / (20000 - 4000)) * (40000 - 0);\n\n    if (tiempoDiferencia > 0) {\n        flujo = Math.round(-((volumenFinal - volumenInicial) / tiempoDiferencia) * 3600); // calcular flujo\n    }\n} else {\n    // Manejar el caso cuando no hay suficientes registros para calcular un flujo\n    flujo = \"Insuficientes datos para c√°lculo de flujo\";\n}\n\n// Devolver el valor del flujo\nreturn { payload: flujo };\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1920,
        "y": 440,
        "wires": [
            [
                "fe37a83f45e1fa81",
                "01aeed515035bd81",
                "cb807d9921cf7180"
            ]
        ]
    },
    {
        "id": "fe37a83f45e1fa81",
        "type": "debug",
        "z": "9fa46c697055fd5a",
        "name": "Flujo COPE",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2190,
        "y": 400,
        "wires": []
    },
    {
        "id": "afb5d4de17525b0c",
        "type": "function",
        "z": "9fa46c697055fd5a",
        "name": "calc_presion",
        "func": "const valorADCMin = 4000;\nconst valorADCMax = 20000;\nconst valorMin = 0;\nconst valorMax = 10.1972;\n\nconst valorADC = msg.payload[0];\nconst valorPresion = ((valorADC - valorADCMin) / (valorADCMax - valorADCMin)) * (valorMax - valorMin) + valorMin;\n\nmsg.payload = valorPresion.toFixed(4);\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1720,
        "y": 700,
        "wires": [
            [
                "cf76eeb0d17bcb0c",
                "09835dd1239de5ec"
            ]
        ]
    },
    {
        "id": "e6e60d5a9427cf31",
        "type": "modbus-flex-getter",
        "z": "9fa46c697055fd5a",
        "name": "ADC_1",
        "showStatusActivities": false,
        "showErrors": false,
        "showWarnings": true,
        "logIOActivities": false,
        "server": "60e5d9130b1268c8",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "keepMsgProperties": false,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 1160,
        "y": 740,
        "wires": [
            [
                "e876b6180acc4082",
                "ec132924d2383db1"
            ],
            []
        ]
    },
    {
        "id": "ec132924d2383db1",
        "type": "switch",
        "z": "9fa46c697055fd5a",
        "name": "ADC_1 Registers",
        "property": "topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "read_ADC1_AI0",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "read_ADC1_AI1",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "read_ADC1_AI2",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "read_ADC1_AI3",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 4,
        "x": 1370,
        "y": 740,
        "wires": [
            [
                "08481f95f5e7ae86",
                "9a01a5f2a23f06fd"
            ],
            [
                "afb5d4de17525b0c"
            ],
            [
                "e2fd54688464cad7"
            ],
            [
                "ed83ac5be50fc27a"
            ]
        ]
    },
    {
        "id": "01aeed515035bd81",
        "type": "function",
        "z": "9fa46c697055fd5a",
        "name": "telemetria",
        "func": "msg.payload = {\n  flujo: msg.payload\n};\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2200,
        "y": 480,
        "wires": [
            [
                "70331b9cdbcca788"
            ]
        ]
    },
    {
        "id": "3f991083ea370139",
        "type": "mqtt out",
        "z": "9fa46c697055fd5a",
        "d": true,
        "name": "mqtt_tb_MN-2.1",
        "topic": "v1/devices/me/telemetry",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "75c0821a42a5cdfb",
        "x": 2120,
        "y": 560,
        "wires": []
    },
    {
        "id": "18eab2c3c21c232b",
        "type": "function",
        "z": "9fa46c697055fd5a",
        "name": "telemetria",
        "func": "msg.payload = {\n  volumen: msg.payload\n};\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1940,
        "y": 560,
        "wires": [
            [
                "3f991083ea370139"
            ]
        ]
    },
    {
        "id": "70331b9cdbcca788",
        "type": "mqtt out",
        "z": "9fa46c697055fd5a",
        "d": true,
        "name": "mqtt_tb_MF-1.1",
        "topic": "v1/devices/me/telemetry",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "689c5e6207baccbb",
        "x": 2360,
        "y": 480,
        "wires": []
    },
    {
        "id": "cf76eeb0d17bcb0c",
        "type": "function",
        "z": "9fa46c697055fd5a",
        "name": "telemetria",
        "func": "msg.payload = {\n  presion: msg.payload\n};\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1900,
        "y": 720,
        "wires": [
            [
                "da7568d07a7a4076"
            ]
        ]
    },
    {
        "id": "da7568d07a7a4076",
        "type": "mqtt out",
        "z": "9fa46c697055fd5a",
        "d": true,
        "name": "mqtt_tb_MP-1.1",
        "topic": "v1/devices/me/telemetry",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "feca9c5ced6ec599",
        "x": 2060,
        "y": 720,
        "wires": []
    },
    {
        "id": "cb807d9921cf7180",
        "type": "ui-gauge",
        "z": "9fa46c697055fd5a",
        "name": "Flujo COPE",
        "group": "3f690bb5a526a246",
        "order": 2,
        "width": "5",
        "height": "4",
        "gtype": "gauge-half",
        "gstyle": "rounded",
        "title": "Flujo COPE",
        "units": "L/h",
        "icon": "",
        "prefix": "",
        "suffix": "",
        "segments": [
            {
                "from": "0",
                "color": "#ea5353"
            },
            {
                "from": "4000",
                "color": "#5cd65c"
            },
            {
                "from": "7500",
                "color": "#ea5353"
            }
        ],
        "min": 0,
        "max": "10000",
        "sizeThickness": "26",
        "sizeGap": "3",
        "sizeKeyThickness": "20",
        "styleRounded": true,
        "styleGlow": false,
        "className": "",
        "x": 2190,
        "y": 440,
        "wires": []
    },
    {
        "id": "419f65e87999b9e3",
        "type": "ui-chart",
        "z": "9fa46c697055fd5a",
        "group": "3f690bb5a526a246",
        "name": "Volumen FA-02",
        "label": "Volumen FA-02",
        "order": 1,
        "chartType": "bar",
        "category": "label",
        "categoryType": "property",
        "xAxisProperty": "",
        "xAxisPropertyType": "msg",
        "xAxisType": "category",
        "yAxisProperty": "value",
        "ymin": "0",
        "ymax": "40000",
        "action": "replace",
        "pointShape": "circle",
        "pointRadius": 4,
        "showLegend": false,
        "removeOlder": 1,
        "removeOlderUnit": "3600",
        "removeOlderPoints": "",
        "colors": [
            "#227dbf",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "width": "1",
        "height": "5",
        "className": "",
        "x": 2280,
        "y": 520,
        "wires": [
            []
        ]
    },
    {
        "id": "3fdacd0a92232648",
        "type": "function",
        "z": "9fa46c697055fd5a",
        "name": "formato_ui",
        "func": "msg.payload = {\n    value: msg.payload,\n    label: msg.payload + \" Litros\"\n};\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2110,
        "y": 520,
        "wires": [
            [
                "419f65e87999b9e3"
            ]
        ]
    },
    {
        "id": "09835dd1239de5ec",
        "type": "ui-gauge",
        "z": "9fa46c697055fd5a",
        "name": "Presion alimentacion",
        "group": "3f690bb5a526a246",
        "order": 3,
        "width": "5",
        "height": "4",
        "gtype": "gauge-half",
        "gstyle": "rounded",
        "title": "Presi√≥n Alimentaci√≥n",
        "units": "Kg/cm2",
        "icon": "",
        "prefix": "",
        "suffix": "",
        "segments": [
            {
                "from": "0",
                "color": "#ea5353"
            },
            {
                "from": "4",
                "color": "#5cd65c"
            },
            {
                "from": "6",
                "color": "#ea5353"
            }
        ],
        "min": 0,
        "max": "10",
        "sizeThickness": "26",
        "sizeGap": "3",
        "sizeKeyThickness": "20",
        "styleRounded": true,
        "styleGlow": false,
        "className": "",
        "x": 2260,
        "y": 700,
        "wires": []
    },
    {
        "id": "46e180aca3d59264",
        "type": "inject",
        "z": "9fa46c697055fd5a",
        "name": "Simulate ADC Input",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload.timestamp",
                "v": "",
                "vt": "date"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "9650",
        "payloadType": "num",
        "x": 1690,
        "y": 1080,
        "wires": [
            [
                "95f0f3d662a407d7"
            ]
        ]
    },
    {
        "id": "26e5c2b41a0956af",
        "type": "debug",
        "z": "9fa46c697055fd5a",
        "name": "debug 10",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1870,
        "y": 380,
        "wires": []
    },
    {
        "id": "b9e9facfc40ebfcc",
        "type": "inject",
        "z": "9fa46c697055fd5a",
        "name": "inject1",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 830,
        "y": 360,
        "wires": [
            [
                "1559e8b43c47806c"
            ]
        ]
    },
    {
        "id": "d0fcb6dc09bb0c37",
        "type": "inject",
        "z": "9fa46c697055fd5a",
        "name": "inject1",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 830,
        "y": 400,
        "wires": [
            [
                "84ed7cf6bbe300e6"
            ]
        ]
    },
    {
        "id": "1559e8b43c47806c",
        "type": "change",
        "z": "9fa46c697055fd5a",
        "name": "set flow.flags",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1010,
        "y": 360,
        "wires": [
            []
        ]
    },
    {
        "id": "84ed7cf6bbe300e6",
        "type": "change",
        "z": "9fa46c697055fd5a",
        "name": "set flow.registers",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1030,
        "y": 400,
        "wires": [
            []
        ]
    },
    {
        "id": "3169c48b.f8cc3c",
        "type": "catch",
        "z": "9fa46c697055fd5a",
        "name": "",
        "scope": [
            "e6e60d5a9427cf31",
            "ca9064e5793acd65"
        ],
        "uncaught": false,
        "x": 620,
        "y": 1140,
        "wires": [
            [
                "9536621a.6de0a"
            ]
        ]
    },
    {
        "id": "9536621a.6de0a",
        "type": "function",
        "z": "9fa46c697055fd5a",
        "name": "Error Handling",
        "func": "const maxRetries = 3;\nconst retryDelay = 5000;\n\nlet retryCount = flow.get('retryCount') || 0;\n\nif (retryCount < maxRetries) {\n    // Incrementar el contador de reintentos\n    retryCount++;\n    flow.set('retryCount', retryCount);\n    \n    // Programar el reintento despu√©s del intervalo de tiempo especificado\n    setTimeout(function() {\n        node.warn(`Retrying communication (attempt ${retryCount})`);\n        node.send(msg);\n    }, retryDelay);\n} else {\n    // Se alcanz√≥ el n√∫mero m√°ximo de reintentos, enviar notificaci√≥n de error cr√≠tico\n    node.error('Max retries reached. Critical error occurred.');\n    \n    // Enviar notificaci√≥n por correo electr√≥nico o otro medio\n    const alertMsg = {\n        payload: {\n            to: 'tableroas14@gmail.com',\n            subject: 'Critical Error - Max Retries Reached',\n            body: 'The system encountered a critical error. Max retries reached.'\n        }\n    };\n    node.send([null, alertMsg]);\n    \n    // Restablecer el contador de reintentos\n    flow.set('retryCount', 0);\n}\n\nreturn;",
        "outputs": 2,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 800,
        "y": 1140,
        "wires": [
            [
                "9e6c0ff1151a09d0",
                "9a0e0cc3d2e7ea75"
            ],
            [
                "df4f4c4b.3d3fb",
                "da17853e43730192"
            ]
        ]
    },
    {
        "id": "107e06bff656ac13",
        "type": "inject",
        "z": "9fa46c697055fd5a",
        "name": "ADC_1_AI0",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "2",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "read_ADC1_AI0",
        "payload": "{\"value\":0,\"fc\":4,\"unitid\":1,\"address\":0,\"quantity\":1}",
        "payloadType": "json",
        "x": 700,
        "y": 680,
        "wires": [
            [
                "9e6c0ff1151a09d0"
            ]
        ]
    },
    {
        "id": "91bc601704a59123",
        "type": "inject",
        "z": "9fa46c697055fd5a",
        "name": "ADC_1_AI1",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "2",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "read_ADC1_AI1",
        "payload": "{\"value\":0,\"fc\":4,\"unitid\":1,\"address\":1,\"quantity\":1}",
        "payloadType": "json",
        "x": 700,
        "y": 740,
        "wires": [
            [
                "9e6c0ff1151a09d0"
            ]
        ]
    },
    {
        "id": "ba18db91af131520",
        "type": "inject",
        "z": "9fa46c697055fd5a",
        "name": "ADC_1_AI2",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "2",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "read_ADC1_AI2",
        "payload": "{\"value\":0,\"fc\":4,\"unitid\":1,\"address\":2,\"quantity\":1}",
        "payloadType": "json",
        "x": 700,
        "y": 800,
        "wires": [
            [
                "9e6c0ff1151a09d0"
            ]
        ]
    },
    {
        "id": "2e449a91df660a42",
        "type": "inject",
        "z": "9fa46c697055fd5a",
        "name": "ADC_1_AI3",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "2",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "read_ADC1_AI3",
        "payload": "{\"value\":0,\"fc\":4,\"unitid\":1,\"address\":3,\"quantity\":1}",
        "payloadType": "json",
        "x": 700,
        "y": 860,
        "wires": [
            [
                "9e6c0ff1151a09d0"
            ]
        ]
    },
    {
        "id": "da17853e43730192",
        "type": "debug",
        "z": "9fa46c697055fd5a",
        "name": "debug 11",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1040,
        "y": 1120,
        "wires": []
    },
    {
        "id": "9a0e0cc3d2e7ea75",
        "type": "debug",
        "z": "9fa46c697055fd5a",
        "name": "debug 12",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1000,
        "y": 1080,
        "wires": []
    },
    {
        "id": "df4f4c4b.3d3fb",
        "type": "e-mail",
        "z": "9fa46c697055fd5a",
        "server": "smtp.gmail.com",
        "port": "587",
        "authtype": "BASIC",
        "saslformat": false,
        "token": "oauth2Response.access_token",
        "secure": true,
        "tls": false,
        "name": "tableroas14@gmail.com",
        "dname": "MTO",
        "x": 1040,
        "y": 1160,
        "wires": []
    },
    {
        "id": "95f0f3d662a407d7",
        "type": "function",
        "z": "9fa46c697055fd5a",
        "name": "telemetria",
        "func": "msg.payload = {\n  presion: msg.payload\n};\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1900,
        "y": 1080,
        "wires": [
            [
                "a8c0fa7527cde8d6"
            ]
        ]
    },
    {
        "id": "a8c0fa7527cde8d6",
        "type": "mqtt out",
        "z": "9fa46c697055fd5a",
        "d": true,
        "name": "mqtt_tb_MF-1.2",
        "topic": "v1/devices/me/telemetry",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "2772d50815d076a4",
        "x": 2100,
        "y": 1080,
        "wires": []
    },
    {
        "id": "8c67b189d0ac49f0",
        "type": "function",
        "z": "9fa46c697055fd5a",
        "name": "Format temp",
        "func": "let temperature = msg.payload;\nmsg.payload = temperature + \"¬∞C\"; // A√±ade la unidad ¬∞C al n√∫mero\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2030,
        "y": 860,
        "wires": [
            [
                "371770d320aa2377"
            ]
        ]
    },
    {
        "id": "d53001100386791f",
        "type": "function",
        "z": "9fa46c697055fd5a",
        "name": "telemetria",
        "func": "msg.payload = {\n  temperatura: msg.payload\n};\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2040,
        "y": 900,
        "wires": [
            [
                "20c1c8a56c449f9f"
            ]
        ]
    },
    {
        "id": "20c1c8a56c449f9f",
        "type": "mqtt out",
        "z": "9fa46c697055fd5a",
        "d": true,
        "name": "mqtt_tb_ST-2.1",
        "topic": "v1/devices/me/telemetry",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "233cd5171dde3839",
        "x": 2240,
        "y": 900,
        "wires": []
    },
    {
        "id": "371770d320aa2377",
        "type": "ui-text",
        "z": "9fa46c697055fd5a",
        "group": "75e50c331c190f67",
        "order": 1,
        "width": "0",
        "height": "0",
        "name": "Entrada BA-01",
        "label": "Entrada BA-01",
        "format": "{{msg.payload}}",
        "layout": "col-center",
        "style": true,
        "font": "Helvetica, sans-serif",
        "fontSize": 16,
        "color": "#717171",
        "className": "",
        "x": 2240,
        "y": 860,
        "wires": []
    },
    {
        "id": "2e967e99aa307731",
        "type": "mqtt out",
        "z": "9fa46c697055fd5a",
        "d": true,
        "name": "mqtt_tb_ST-2.1",
        "topic": "v1/devices/me/telemetry",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "3b8eefdff633489b",
        "x": 2160,
        "y": 820,
        "wires": []
    },
    {
        "id": "53bc7861172a15e8",
        "type": "function",
        "z": "9fa46c697055fd5a",
        "name": "Format temp",
        "func": "let temperature = msg.payload;\nmsg.payload = temperature + \"¬∞C\"; // A√±ade la unidad ¬∞C al n√∫mero\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1990,
        "y": 780,
        "wires": [
            [
                "8413cbabe0b57832"
            ]
        ]
    },
    {
        "id": "e1ac2c5b7610bf5a",
        "type": "function",
        "z": "9fa46c697055fd5a",
        "name": "telemetria",
        "func": "msg.payload = {\n  temperatura: msg.payload\n};\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2000,
        "y": 820,
        "wires": [
            [
                "2e967e99aa307731"
            ]
        ]
    },
    {
        "id": "8413cbabe0b57832",
        "type": "ui-text",
        "z": "9fa46c697055fd5a",
        "group": "75e50c331c190f67",
        "order": 6,
        "width": 0,
        "height": 0,
        "name": "Salida BA-01",
        "label": "Salida BA-01",
        "format": "{{msg.payload}}",
        "layout": "col-center",
        "style": true,
        "font": "Helvetica, sans-serif",
        "fontSize": 16,
        "color": "#717171",
        "className": "",
        "x": 2150,
        "y": 780,
        "wires": []
    },
    {
        "id": "ed83ac5be50fc27a",
        "type": "function",
        "z": "9fa46c697055fd5a",
        "name": "calc_temp",
        "func": "const valorADCMin = 4000;\nconst valorADCMax = 20000;\nconst valorMin = 0;\nconst valorMax = 1300;\n\nconst valorADC = msg.payload[0];\nconst valorTemperatura = ((valorADC - valorADCMin) / (valorADCMax - valorADCMin)) * (valorMax - valorMin) + valorMin;\n\nmsg.payload = Math.round(valorTemperatura);\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1770,
        "y": 780,
        "wires": [
            [
                "53bc7861172a15e8",
                "e1ac2c5b7610bf5a"
            ]
        ]
    },
    {
        "id": "e2fd54688464cad7",
        "type": "function",
        "z": "9fa46c697055fd5a",
        "name": "calc_temp",
        "func": "const valorADCMin = 4000;\nconst valorADCMax = 20000;\nconst valorMin = 0;\nconst valorMax = 1300;\n\nconst valorADC = msg.payload[0];\nconst valorTemperatura = ((valorADC - valorADCMin) / (valorADCMax - valorADCMin)) * (valorMax - valorMin) + valorMin;\n\nmsg.payload = Math.round(valorTemperatura);\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1790,
        "y": 860,
        "wires": [
            [
                "8c67b189d0ac49f0",
                "d53001100386791f"
            ]
        ]
    },
    {
        "id": "ab9e4d816b6ea51c",
        "type": "change",
        "z": "897febeee65a86fd",
        "name": "Advance queue",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "next",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 520,
        "y": 640,
        "wires": [
            [
                "6d5876df5040f740"
            ]
        ]
    },
    {
        "id": "6d5876df5040f740",
        "type": "function",
        "z": "897febeee65a86fd",
        "name": "Modbus Queue",
        "func": "let resendifnoresposne = true; // resend the last message is no response is received\nlet resendinterval = 10; // resend last e message every x seconds\nlet online_threshold = 10; // Seconds between updates under which the device is considered online\nlet offline_threshold = 300; // Seconds between updates above which the device is considered offline\n\nlet notifmsg = null;\n\n// Check and make sure the incoming message has a topic\nif ((msg.topic===\"\")||(msg.topic===null)||(msg.topic===undefined)) {\n    node.status({fill:\"red\",shape:\"dot\",text:\"Topic missing\"});\n    return;\n}\n\nlet lastupdate = context.get(\"lastupdate\");\nlet state = context.get(\"state\") | 0;\nlet queue = context.get(\"queue\");\nlet queuecount = 0;\nif (queue === undefined) {\n    queue = [];\n} else {\n    if (Array.isArray(queue)) {\n        queuecount = queue.length;\n    } else {\n        queue = [];\n    }\n}\nlet current = new Date().getTime();\nlet send = false;\n\nswitch (msg.topic.toLowerCase()) {\n    case \"update\":\n        // Update the timer and statistics\n\n        if (lastupdate !== undefined) {\n            notifmsg = { \"topic\": \"Information\", \"payload\": {} };\n            current = current - lastupdate;\n            current = Math.floor(current / 1000);\n            notifmsg.payload.secondsincelastupdate = current;\n            var minute = Math.floor(current / 60);\n            var hour = Math.floor(minute / 60);\n            var day = Math.floor(hour / 24);\n            if (current > 24 * 60 * 60) {\n                notifmsg.payload.updatetext = \"Last update \" + day + \" days, \" + hour % 24 + \" hours, \" + minute % 60 + \" minutes, \" + current % 60 + \" seconds ago\";\n            } else if (current > 60 * 60) {\n                notifmsg.payload.updatetext = \"Last update \" + hour % 24 + \" hours, \" + minute % 60 + \" minutes, \" + current % 60 + \" seconds ago\";\n            } else if (current > 60) {\n                notifmsg.payload.updatetext = \"Last update \" + minute % 60 + \" minutes, \" + current % 60 + \" seconds ago\";\n            } else {\n                notifmsg.payload.updatetext = \"Last update \" + current % 60 + \" seconds ago\";\n            }\n\n            // Resend last message if there is no response from the server\n            if (resendifnoresposne) {\n                if ((current>0) && (current % resendinterval===0)) {\n                    let lastmsg = context.get(\"lastmsg\");\n                    if ((lastmsg!==undefined) && (context.get(\"sent\"))) {\n                        notifmsg.payload.resend = true;\n                        if ((lastmsg.payload.fc === 1) || (lastmsg.payload.fc === 2) || (lastmsg.payload.fc === 3) || (lastmsg.payload.fc === 4)) {\n                            // this is a modbus read request\n                            node.status({ fill: \"green\", shape: \"dot\", text: \"Read re-sent!\" });\n                            return [lastmsg, null, notifmsg];\n                        } else {\n                            // this is a modbus write request\n                            node.status({ fill: \"green\", shape: \"dot\", text: \"Write re-sent!\" });\n                            return [null, lastmsg, notifmsg];\n                        }\n                    }\n                }\n            }\n\n            // Check for online state\n            if (state !== 1) {\n                if (current < online_threshold) {\n                    notifmsg.topic = \"Warning\";\n                    notifmsg.payload.text = \"Device is now online\";\n                    notifmsg.payload.statuschange = true;\n                    state = 1;\n                    context.set(\"state\", state);\n                }\n            } else {\n                if (current > offline_threshold) {\n                    notifmsg.topic = \"Error\";\n                    notifmsg.payload.text = \"Device is not transmitting\";\n                    notifmsg.payload.statuschange = true;\n                    state = 99;\n                    context.set(\"state\", state);\n                }\n            }\n            notifmsg.payload.state = state;\n            if (state===1) {\n                node.status({ fill: \"blue\", shape: \"ring\", text: queuecount+ \" | \"+notifmsg.payload.updatetext });\n            } else {\n                node.status({ fill: \"red\", shape: \"ring\", text: queuecount + \" | \" + notifmsg.payload.updatetext });\n            }\n            return [null, null, notifmsg];\n\n        } else {\n            node.status({ fill: \"grey\", shape: \"ring\", text: \"No data\" });\n        }\n        break;\n    case \"next\":\n        // Update the lastupdate counter\n        context.set(\"lastupdate\", current);\n        context.set(\"sent\", false);\n        send = true;\n        break;\n    case \"reset\":\n        context.set(\"queue\",[]);\n        context.set(\"sent\", false);\n        context.set(\"lastmsg\", undefined);\n        break;\n    default:\n        // The incoming message is a modbus request\n\n        // delete the last msg to prevent from being resent\n        // context.set(\"lastmsg\", undefined);\n\n        // Check if there is already a message in the queue with the same topic. \n        // If there is it needs to be deleted, because we only keep the last message.\n        for (let i=queue.length-1; i>=0; i--) {\n            if (queue[i].topic === msg.topic) {\n                queue.splice(i,1);\n            }\n        }\n\n        // Add the message to the end of the queue\n        queue.push(msg);\n        context.set(\"queue\",queue);\n\n        if (!context.get(\"sent\")) {\n            send = true;\n        }\n        node.status({ fill: \"green\", shape: \"dot\", text: queue.length });\n\n}\n\n// We need to send out a new message\nif (send) {\n\n    if (queue.length>0) {\n        // Get the older message from the array\n        let newmsg = queue[0];\n        // remove this message\n        queue.splice(0,1);\n        context.set(\"queue\",queue);\n        context.set(\"sent\", true);\n        context.set(\"lastmsg\", newmsg);\n\n        if ((newmsg.payload.fc === 1) || (newmsg.payload.fc === 2) || (newmsg.payload.fc === 3) || (newmsg.payload.fc === 4)) {\n            // this is a modbus read request\n            node.status({ fill: \"green\", shape: \"dot\", text: \"Read sent!\" });\n            return[newmsg,null,null];\n        } else {\n            // this is a modbus write request\n            node.status({ fill: \"green\", shape: \"dot\", text: \"Write sent!\" });\n            return [null, newmsg, null];\n        }\n        \n    }\n}\n",
        "outputs": 3,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 520,
        "y": 740,
        "wires": [
            [
                "3daa9c2cfd4bfdc3"
            ],
            [],
            [
                "c16954b91395ec88"
            ]
        ],
        "info": "# Modbus Queue\r\n\r\nThis node queueing read and write messages for modbus. Use this node if you are reading and writing the same device with many different requests. E.g. reading different coil/register intervals continously and also writing to the device at the same time.\r\n\r\nIt does a few things:\r\n- queues all messages arrive on the input port\r\n- based on the msg.topic, older messages of the same topci is ignored\r\n- sends out the oldest message and waits for the \r\n- monitors the time since last message and send out report on the output\r\n- handles online/offline status\r\n- resend the last message is response is not received in time\r\n\r\n## Input Data\r\n\r\n### payload\r\n\r\nThe payload should contain the data that gets sent to the flex-getter or flex-write node.\r\nTypical modbus read payload:\r\n`{\"value\":0,\"fc\":3,\"unitid\":1,\"address\":1000,\"quantity\":20}`\r\nTypical modbus write payload:\r\n`{\"value\":false,\"fc\":5,\"unitid\":1,\"address\":0,\"quantity\":1}`\r\n\r\n### topic\r\n\r\nEach message must contain a topic (any text), and this topic is used to identify the different read/write requests and delete any earlier request with the same topic if it still in the queueing\r\n\r\nThere are a few reserved topic for special function (for these payload is ignored):\r\n- reset: resets the queue and deleted any data collected so far\r\n- next: this is the message fed back from the flex getter/write node to indicate to this node that a new message can be sent out\r\n- update: this should be coming from a 1 second time to display the current queue count, time since the last update and online/offline status\r\n\r\n## Output ports\r\n\r\n### Port 1: flex getter\r\n\r\nThis output should be connected to a modbos-flex-getter and all the read requests will be sent out through this port\r\n\r\n### Port 2: flex write\r\n\r\nThis output should be connected to a modbos-flex-write and all the write requests will be sent out through this port\r\n\r\n### Port 3: status messages\r\n\r\nThis port outputs a status message for every update message (msg.topic=\"update\").\r\n\r\n- topic: \"Information\" for regular updates, \"Warning\": offline device is now back online, \"Error\": device is offline\r\n- payload.text: message like when the device gone offline, or back online\r\n- payload.updatetext: time passed since the last update (human readable format)\r\n- payload.secondsincelastupdate: number of seconds since the last update from the device\r\n- payload.statuschange: true if status is changed (gone offline, back online)\r\n- payload.state: 0: initial state, no data yet, 1: device online, 99: device offline\r\n\r\n## Node Settings\r\n\r\nChange the settings in the first 4 lines of the code to influence the behaviour. Explanation is in the code as comment."
    },
    {
        "id": "c16954b91395ec88",
        "type": "function",
        "z": "897febeee65a86fd",
        "name": "update log",
        "func": "if (msg.topic === \"Information\") {\n    // Registrar mensajes de informaci√≥n\n    node.log(\"Informaci√≥n: \" + msg.payload.updatetext);\n} else if (msg.topic === \"Warning\") {\n    // Registrar mensajes de advertencia\n    node.warn(\"Advertencia: \" + msg.payload.text);\n} else if (msg.topic === \"Error\") {\n    // Registrar mensajes de error\n    node.error(\"Error: \" + msg.payload.text);\n}\n\n// Puedes agregar l√≥gica adicional para procesar otros campos del mensaje de estado\n// Por ejemplo, puedes verificar el valor de msg.payload.state para realizar acciones espec√≠ficas\n// seg√∫n el estado del dispositivo (en l√≠nea, fuera de l√≠nea, etc.)\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 690,
        "y": 780,
        "wires": [
            []
        ]
    },
    {
        "id": "a11ce1fbb49a90fd",
        "type": "inject",
        "z": "897febeee65a86fd",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 320,
        "y": 760,
        "wires": [
            [
                "6d5876df5040f740"
            ]
        ]
    },
    {
        "id": "bbe40e1a8b0bf14e",
        "type": "function",
        "z": "897febeee65a86fd",
        "name": "calc_vol",
        "func": "const valorCrudo = msg.payload.value;\nconst valorLitros = ((valorCrudo - 4000) / (20000 - 4000)) * (40000 - 0);\nmsg.payload = Math.round(valorLitros);\nreturn msg;",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1140,
        "y": 780,
        "wires": [
            [
                "d0f9845fe25bafb5",
                "6ba057fb54a62204",
                "e3b93b8fb390d04a",
                "4a5a5af391d84bb8"
            ],
            []
        ]
    },
    {
        "id": "3daa9c2cfd4bfdc3",
        "type": "modbus-flex-getter",
        "z": "897febeee65a86fd",
        "name": "ADC_1",
        "showStatusActivities": false,
        "showErrors": false,
        "showWarnings": true,
        "logIOActivities": false,
        "server": "60e5d9130b1268c8",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "keepMsgProperties": false,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 700,
        "y": 720,
        "wires": [
            [
                "ab9e4d816b6ea51c"
            ],
            []
        ]
    },
    {
        "id": "e6a36a74b4b02e6c",
        "type": "switch",
        "z": "897febeee65a86fd",
        "name": "ADC_1 Registers",
        "property": "topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "read_ADC1_AI0",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "read_ADC1_AI1",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1120,
        "y": 820,
        "wires": [
            [
                "bbe40e1a8b0bf14e"
            ],
            [
                "29a59cde5f120749"
            ]
        ]
    },
    {
        "id": "dc873e31c907643e",
        "type": "mqtt out",
        "z": "897febeee65a86fd",
        "d": true,
        "name": "mqtt_tb_MN-2.1",
        "topic": "v1/devices/me/telemetry",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "75c0821a42a5cdfb",
        "x": 1520,
        "y": 780,
        "wires": []
    },
    {
        "id": "d0f9845fe25bafb5",
        "type": "function",
        "z": "897febeee65a86fd",
        "name": "telemetria",
        "func": "msg.payload = {\n  volumen: msg.payload\n};\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1340,
        "y": 780,
        "wires": [
            [
                "dc873e31c907643e"
            ]
        ]
    },
    {
        "id": "be67e0fa855a6e77",
        "type": "ui-chart",
        "z": "897febeee65a86fd",
        "group": "3f690bb5a526a246",
        "name": "Volumen FA-02",
        "label": "Volumen FA-02",
        "order": 1,
        "chartType": "bar",
        "category": "label",
        "categoryType": "property",
        "xAxisProperty": "",
        "xAxisPropertyType": "msg",
        "xAxisType": "category",
        "yAxisProperty": "value",
        "ymin": "0",
        "ymax": "40000",
        "action": "replace",
        "pointShape": "circle",
        "pointRadius": 4,
        "showLegend": false,
        "removeOlder": 1,
        "removeOlderUnit": "3600",
        "removeOlderPoints": "",
        "colors": [
            "#227dbf",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "width": "1",
        "height": "5",
        "className": "",
        "x": 1520,
        "y": 740,
        "wires": [
            []
        ]
    },
    {
        "id": "6ba057fb54a62204",
        "type": "function",
        "z": "897febeee65a86fd",
        "name": "formato_ui",
        "func": "msg.payload = {\n    value: msg.payload,\n    label: msg.payload + \" Litros\"\n};\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1330,
        "y": 740,
        "wires": [
            [
                "be67e0fa855a6e77"
            ]
        ]
    },
    {
        "id": "c7a735c2eecc0247",
        "type": "inject",
        "z": "897febeee65a86fd",
        "name": "ADC_1_AI1",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "2",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "read_ADC1_AI1",
        "payload": "{\"value\":0,\"fc\":4,\"unitid\":1,\"address\":1,\"quantity\":1}",
        "payloadType": "json",
        "x": 440,
        "y": 560,
        "wires": [
            []
        ]
    },
    {
        "id": "be39fb82418c1506",
        "type": "mqtt out",
        "z": "897febeee65a86fd",
        "d": true,
        "name": "mqtt_tb_ST-2.1",
        "topic": "v1/devices/me/telemetry",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "3b8eefdff633489b",
        "x": 1520,
        "y": 920,
        "wires": []
    },
    {
        "id": "466b14e3eeb05193",
        "type": "function",
        "z": "897febeee65a86fd",
        "name": "Format temp",
        "func": "let temperature = msg.payload;\nmsg.payload = temperature + \"¬∞C\"; // A√±ade la unidad ¬∞C al n√∫mero\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1350,
        "y": 880,
        "wires": [
            [
                "41505558b752f6dd"
            ]
        ]
    },
    {
        "id": "b00916a459e07505",
        "type": "function",
        "z": "897febeee65a86fd",
        "name": "telemetria",
        "func": "msg.payload = {\n  temperatura: msg.payload\n};\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1360,
        "y": 920,
        "wires": [
            [
                "be39fb82418c1506"
            ]
        ]
    },
    {
        "id": "41505558b752f6dd",
        "type": "ui-text",
        "z": "897febeee65a86fd",
        "group": "75e50c331c190f67",
        "order": 6,
        "width": 0,
        "height": 0,
        "name": "Salida BA-01",
        "label": "Salida BA-01",
        "format": "{{msg.payload}}",
        "layout": "col-center",
        "style": true,
        "font": "Helvetica, sans-serif",
        "fontSize": 16,
        "color": "#717171",
        "className": "",
        "x": 1530,
        "y": 880,
        "wires": []
    },
    {
        "id": "29a59cde5f120749",
        "type": "function",
        "z": "897febeee65a86fd",
        "name": "calc_temp",
        "func": "const valorADCMin = 4000;\nconst valorADCMax = 20000;\nconst valorMin = 0;\nconst valorMax = 1300;\n\nconst valorADC = msg.payload.value;\nconst valorTemperatura = ((valorADC - valorADCMin) / (valorADCMax - valorADCMin)) * (valorMax - valorMin) + valorMin;\n\nmsg.payload = Math.round(valorTemperatura);\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1130,
        "y": 860,
        "wires": [
            [
                "466b14e3eeb05193",
                "b00916a459e07505",
                "fde403123a42bdbb",
                "a39526dd95186a85"
            ]
        ]
    },
    {
        "id": "fde403123a42bdbb",
        "type": "function",
        "z": "897febeee65a86fd",
        "name": "F_influx_temp",
        "func": "const measurement = \"temperatura\";\nconst tags = {\n    equipo: \"ST-2.1\",\n    ubicacion: \"Refineria\"\n};\nconst fields = {\n    valor: {\n        value: msg.payload,\n        type: \"float\"\n    }\n};\nconst timestamp = new Date();\n\nmsg.payload = [\n    {\n        measurement: measurement,\n        tags: tags,\n        fields: fields,\n        timestamp: timestamp\n    }\n];\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1340,
        "y": 840,
        "wires": [
            [
                "6896b7b682b7b820"
            ]
        ]
    },
    {
        "id": "e3b93b8fb390d04a",
        "type": "function",
        "z": "897febeee65a86fd",
        "name": "F_influx_vol",
        "func": "const measurement = \"volumen\";\nconst tags = {\n    equipo: \"MN-2.1\",\n    ubicacion: \"Refineria\"\n};\nconst fields = {\n    valor: {\n        value: msg.payload,\n        type: \"float\"\n    }\n};\nconst timestamp = new Date();\n\nmsg.payload = [\n    {\n        measurement: measurement,\n        tags: tags,\n        fields: fields,\n        timestamp: timestamp\n    }\n];\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1330,
        "y": 700,
        "wires": [
            [
                "5c6de4893b26f103"
            ]
        ]
    },
    {
        "id": "5c6de4893b26f103",
        "type": "influxdb out",
        "z": "897febeee65a86fd",
        "influxdb": "ed48d447e5ea8d0c",
        "name": "vol_MN-2.1",
        "measurement": "volumen",
        "precision": "",
        "retentionPolicy": "",
        "database": "database",
        "precisionV18FluxV20": "ms",
        "retentionPolicyV18Flux": "",
        "org": "aspro",
        "bucket": "Refineria",
        "x": 1510,
        "y": 700,
        "wires": []
    },
    {
        "id": "6896b7b682b7b820",
        "type": "influxdb out",
        "z": "897febeee65a86fd",
        "influxdb": "ed48d447e5ea8d0c",
        "name": "temp_ST-2.1",
        "measurement": "temperatura",
        "precision": "",
        "retentionPolicy": "",
        "database": "database",
        "precisionV18FluxV20": "ms",
        "retentionPolicyV18Flux": "",
        "org": "aspro",
        "bucket": "Refineria",
        "x": 1530,
        "y": 840,
        "wires": []
    },
    {
        "id": "ec36ebfda7a0c3d9",
        "type": "inject",
        "z": "897febeee65a86fd",
        "name": "ADC_1_AI0",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "2",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "read_ADC1_AI0",
        "payload": "{\"value\":0,\"fc\":4,\"unitid\":1,\"address\":0,\"quantity\":1}",
        "payloadType": "json",
        "x": 440,
        "y": 520,
        "wires": [
            []
        ]
    },
    {
        "id": "4a5a5af391d84bb8",
        "type": "debug",
        "z": "897febeee65a86fd",
        "name": "debug 33",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1210,
        "y": 640,
        "wires": []
    },
    {
        "id": "a39526dd95186a85",
        "type": "debug",
        "z": "897febeee65a86fd",
        "name": "debug 34",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1250,
        "y": 980,
        "wires": []
    },
    {
        "id": "random_adc1_ai0",
        "type": "function",
        "z": "897febeee65a86fd",
        "name": "Random Data ADC_1_AI0",
        "func": "msg.payload = {\n    value: Math.floor(Math.random() * (20000 - 4000) + 4000),\n    fc: 4,\n    unitid: 1,\n    address: 0,\n    quantity: 1\n};\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 970,
        "y": 660,
        "wires": [
            [
                "e6a36a74b4b02e6c"
            ]
        ]
    },
    {
        "id": "random_adc1_ai1",
        "type": "function",
        "z": "897febeee65a86fd",
        "name": "Random Data ADC_1_AI1",
        "func": "msg.payload = {\n    value: Math.floor(Math.random() * (20000 - 4000) + 4000),\n    fc: 4,\n    unitid: 1,\n    address: 1,\n    quantity: 1\n};\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 930,
        "y": 980,
        "wires": [
            [
                "e6a36a74b4b02e6c"
            ]
        ]
    },
    {
        "id": "7bf5d1c516fb15ea",
        "type": "inject",
        "z": "897febeee65a86fd",
        "name": "ADC_1_AI1",
        "props": [
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "2",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "read_ADC1_AI1",
        "x": 900,
        "y": 860,
        "wires": [
            [
                "random_adc1_ai1"
            ]
        ]
    },
    {
        "id": "71817804f062c556",
        "type": "inject",
        "z": "897febeee65a86fd",
        "name": "ADC_1_AI0",
        "props": [
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "2",
        "crontab": "",
        "once": true,
        "onceDelay": 1,
        "topic": "read_ADC1_AI0",
        "x": 920,
        "y": 760,
        "wires": [
            [
                "random_adc1_ai0"
            ]
        ]
    },
    {
        "id": "c354c96974a1c4a1",
        "type": "inject",
        "z": "99aae1551605c876",
        "name": "EDP1_AI1",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "2",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "read_EDP1_AI1",
        "payload": "{\"value\":0,\"fc\":4,\"unitid\":1,\"address\":0,\"quantity\":1}",
        "payloadType": "json",
        "x": 190,
        "y": 460,
        "wires": [
            [
                "0b7c0e80208bbee2"
            ]
        ]
    },
    {
        "id": "eb071e109e3373af",
        "type": "inject",
        "z": "99aae1551605c876",
        "name": "update",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "update",
        "payload": "",
        "payloadType": "date",
        "x": 240,
        "y": 380,
        "wires": [
            [
                "0b7c0e80208bbee2"
            ]
        ]
    },
    {
        "id": "a2c9f4f389b1e538",
        "type": "inject",
        "z": "99aae1551605c876",
        "name": "next",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "next",
        "payload": "",
        "payloadType": "date",
        "x": 250,
        "y": 340,
        "wires": [
            [
                "0b7c0e80208bbee2"
            ]
        ]
    },
    {
        "id": "2de2ccb5329d1be3",
        "type": "change",
        "z": "99aae1551605c876",
        "name": "Advance queue",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "next",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 480,
        "y": 440,
        "wires": [
            [
                "0b7c0e80208bbee2"
            ]
        ]
    },
    {
        "id": "0b7c0e80208bbee2",
        "type": "function",
        "z": "99aae1551605c876",
        "name": "Modbus Queue",
        "func": "let resendifnoresposne = true; // resend the last message is no response is received\nlet resendinterval = 10; // resend last e message every x seconds\nlet online_threshold = 10; // Seconds between updates under which the device is considered online\nlet offline_threshold = 300; // Seconds between updates above which the device is considered offline\n\nlet notifmsg = null;\n\n// Check and make sure the incoming message has a topic\nif ((msg.topic===\"\")||(msg.topic===null)||(msg.topic===undefined)) {\n    node.status({fill:\"red\",shape:\"dot\",text:\"Topic missing\"});\n    return;\n}\n\nlet lastupdate = context.get(\"lastupdate\");\nlet state = context.get(\"state\") | 0;\nlet queue = context.get(\"queue\");\nlet queuecount = 0;\nif (queue === undefined) {\n    queue = [];\n} else {\n    if (Array.isArray(queue)) {\n        queuecount = queue.length;\n    } else {\n        queue = [];\n    }\n}\nlet current = new Date().getTime();\nlet send = false;\n\nswitch (msg.topic.toLowerCase()) {\n    case \"update\":\n        // Update the timer and statistics\n\n        if (lastupdate !== undefined) {\n            notifmsg = { \"topic\": \"Information\", \"payload\": {} };\n            current = current - lastupdate;\n            current = Math.floor(current / 1000);\n            notifmsg.payload.secondsincelastupdate = current;\n            var minute = Math.floor(current / 60);\n            var hour = Math.floor(minute / 60);\n            var day = Math.floor(hour / 24);\n            if (current > 24 * 60 * 60) {\n                notifmsg.payload.updatetext = \"Last update \" + day + \" days, \" + hour % 24 + \" hours, \" + minute % 60 + \" minutes, \" + current % 60 + \" seconds ago\";\n            } else if (current > 60 * 60) {\n                notifmsg.payload.updatetext = \"Last update \" + hour % 24 + \" hours, \" + minute % 60 + \" minutes, \" + current % 60 + \" seconds ago\";\n            } else if (current > 60) {\n                notifmsg.payload.updatetext = \"Last update \" + minute % 60 + \" minutes, \" + current % 60 + \" seconds ago\";\n            } else {\n                notifmsg.payload.updatetext = \"Last update \" + current % 60 + \" seconds ago\";\n            }\n\n            // Resend last message if there is no response from the server\n            if (resendifnoresposne) {\n                if ((current>0) && (current % resendinterval===0)) {\n                    let lastmsg = context.get(\"lastmsg\");\n                    if ((lastmsg!==undefined) && (context.get(\"sent\"))) {\n                        notifmsg.payload.resend = true;\n                        if ((lastmsg.payload.fc === 1) || (lastmsg.payload.fc === 2) || (lastmsg.payload.fc === 3) || (lastmsg.payload.fc === 4)) {\n                            // this is a modbus read request\n                            node.status({ fill: \"green\", shape: \"dot\", text: \"Read re-sent!\" });\n                            return [lastmsg, null, notifmsg];\n                        } else {\n                            // this is a modbus write request\n                            node.status({ fill: \"green\", shape: \"dot\", text: \"Write re-sent!\" });\n                            return [null, lastmsg, notifmsg];\n                        }\n                    }\n                }\n            }\n\n            // Check for online state\n            if (state !== 1) {\n                if (current < online_threshold) {\n                    notifmsg.topic = \"Warning\";\n                    notifmsg.payload.text = \"Device is now online\";\n                    notifmsg.payload.statuschange = true;\n                    state = 1;\n                    context.set(\"state\", state);\n                }\n            } else {\n                if (current > offline_threshold) {\n                    notifmsg.topic = \"Error\";\n                    notifmsg.payload.text = \"Device is not transmitting\";\n                    notifmsg.payload.statuschange = true;\n                    state = 99;\n                    context.set(\"state\", state);\n                }\n            }\n            notifmsg.payload.state = state;\n            if (state===1) {\n                node.status({ fill: \"blue\", shape: \"ring\", text: queuecount+ \" | \"+notifmsg.payload.updatetext });\n            } else {\n                node.status({ fill: \"red\", shape: \"ring\", text: queuecount + \" | \" + notifmsg.payload.updatetext });\n            }\n            return [null, null, notifmsg];\n\n        } else {\n            node.status({ fill: \"grey\", shape: \"ring\", text: \"No data\" });\n        }\n        break;\n    case \"next\":\n        // Update the lastupdate counter\n        context.set(\"lastupdate\", current);\n        context.set(\"sent\", false);\n        send = true;\n        break;\n    case \"reset\":\n        context.set(\"queue\",[]);\n        context.set(\"sent\", false);\n        context.set(\"lastmsg\", undefined);\n        break;\n    default:\n        // The incoming message is a modbus request\n\n        // delete the last msg to prevent from being resent\n        // context.set(\"lastmsg\", undefined);\n\n        // Check if there is already a message in the queue with the same topic. \n        // If there is it needs to be deleted, because we only keep the last message.\n        for (let i=queue.length-1; i>=0; i--) {\n            if (queue[i].topic === msg.topic) {\n                queue.splice(i,1);\n            }\n        }\n\n        // Add the message to the end of the queue\n        queue.push(msg);\n        context.set(\"queue\",queue);\n\n        if (!context.get(\"sent\")) {\n            send = true;\n        }\n        node.status({ fill: \"green\", shape: \"dot\", text: queue.length });\n\n}\n\n// We need to send out a new message\nif (send) {\n\n    if (queue.length>0) {\n        // Get the older message from the array\n        let newmsg = queue[0];\n        // remove this message\n        queue.splice(0,1);\n        context.set(\"queue\",queue);\n        context.set(\"sent\", true);\n        context.set(\"lastmsg\", newmsg);\n\n        if ((newmsg.payload.fc === 1) || (newmsg.payload.fc === 2) || (newmsg.payload.fc === 3) || (newmsg.payload.fc === 4)) {\n            // this is a modbus read request\n            node.status({ fill: \"green\", shape: \"dot\", text: \"Read sent!\" });\n            return[newmsg,null,null];\n        } else {\n            // this is a modbus write request\n            node.status({ fill: \"green\", shape: \"dot\", text: \"Write sent!\" });\n            return [null, newmsg, null];\n        }\n        \n    }\n}\n",
        "outputs": 3,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 460,
        "y": 560,
        "wires": [
            [
                "9a56b7fccec13043"
            ],
            [],
            [
                "e3a4ed615e582aa0"
            ]
        ],
        "info": "# Modbus Queue\r\n\r\nThis node queueing read and write messages for modbus. Use this node if you are reading and writing the same device with many different requests. E.g. reading different coil/register intervals continously and also writing to the device at the same time.\r\n\r\nIt does a few things:\r\n- queues all messages arrive on the input port\r\n- based on the msg.topic, older messages of the same topci is ignored\r\n- sends out the oldest message and waits for the \r\n- monitors the time since last message and send out report on the output\r\n- handles online/offline status\r\n- resend the last message is response is not received in time\r\n\r\n## Input Data\r\n\r\n### payload\r\n\r\nThe payload should contain the data that gets sent to the flex-getter or flex-write node.\r\nTypical modbus read payload:\r\n`{\"value\":0,\"fc\":3,\"unitid\":1,\"address\":1000,\"quantity\":20}`\r\nTypical modbus write payload:\r\n`{\"value\":false,\"fc\":5,\"unitid\":1,\"address\":0,\"quantity\":1}`\r\n\r\n### topic\r\n\r\nEach message must contain a topic (any text), and this topic is used to identify the different read/write requests and delete any earlier request with the same topic if it still in the queueing\r\n\r\nThere are a few reserved topic for special function (for these payload is ignored):\r\n- reset: resets the queue and deleted any data collected so far\r\n- next: this is the message fed back from the flex getter/write node to indicate to this node that a new message can be sent out\r\n- update: this should be coming from a 1 second time to display the current queue count, time since the last update and online/offline status\r\n\r\n## Output ports\r\n\r\n### Port 1: flex getter\r\n\r\nThis output should be connected to a modbos-flex-getter and all the read requests will be sent out through this port\r\n\r\n### Port 2: flex write\r\n\r\nThis output should be connected to a modbos-flex-write and all the write requests will be sent out through this port\r\n\r\n### Port 3: status messages\r\n\r\nThis port outputs a status message for every update message (msg.topic=\"update\").\r\n\r\n- topic: \"Information\" for regular updates, \"Warning\": offline device is now back online, \"Error\": device is offline\r\n- payload.text: message like when the device gone offline, or back online\r\n- payload.updatetext: time passed since the last update (human readable format)\r\n- payload.secondsincelastupdate: number of seconds since the last update from the device\r\n- payload.statuschange: true if status is changed (gone offline, back online)\r\n- payload.state: 0: initial state, no data yet, 1: device online, 99: device offline\r\n\r\n## Node Settings\r\n\r\nChange the settings in the first 4 lines of the code to influence the behaviour. Explanation is in the code as comment."
    },
    {
        "id": "b63ce17de9dd842c",
        "type": "inject",
        "z": "99aae1551605c876",
        "name": "reset",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "update",
        "payload": "",
        "payloadType": "date",
        "x": 250,
        "y": 300,
        "wires": [
            [
                "0b7c0e80208bbee2"
            ]
        ]
    },
    {
        "id": "36107c2cdcfcdbfa",
        "type": "link in",
        "z": "99aae1551605c876",
        "name": "link in 5",
        "links": [],
        "x": 285,
        "y": 260,
        "wires": [
            [
                "0b7c0e80208bbee2"
            ]
        ]
    },
    {
        "id": "cbc641e71f83afcb",
        "type": "inject",
        "z": "99aae1551605c876",
        "name": "check",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 320,
        "y": 900,
        "wires": [
            [
                "058fb640a5dc0336"
            ]
        ]
    },
    {
        "id": "e3a4ed615e582aa0",
        "type": "function",
        "z": "99aae1551605c876",
        "name": "update log",
        "func": "if (msg.topic === \"Information\") {\n    // Registrar mensajes de informaci√≥n\n    node.log(\"Informaci√≥n: \" + msg.payload.updatetext);\n} else if (msg.topic === \"Warning\") {\n    // Registrar mensajes de advertencia\n    node.warn(\"Advertencia: \" + msg.payload.text);\n} else if (msg.topic === \"Error\") {\n    // Registrar mensajes de error\n    node.error(\"Error: \" + msg.payload.text);\n}\n\n// Puedes agregar l√≥gica adicional para procesar otros campos del mensaje de estado\n// Por ejemplo, puedes verificar el valor de msg.payload.state para realizar acciones espec√≠ficas\n// seg√∫n el estado del dispositivo (en l√≠nea, fuera de l√≠nea, etc.)\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 660,
        "y": 600,
        "wires": [
            []
        ]
    },
    {
        "id": "d6a42df6945f4bc0",
        "type": "inject",
        "z": "99aae1551605c876",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 210,
        "y": 800,
        "wires": [
            [
                "0b7c0e80208bbee2"
            ]
        ]
    },
    {
        "id": "89266e2d19a34e47",
        "type": "function",
        "z": "99aae1551605c876",
        "name": "calc_vol",
        "func": "const valorCrudo = msg.payload[0];\nconst valorLitros = ((valorCrudo - 4000) / (20000 - 4000)) * (40000 - 0);\nmsg.payload = Math.round(valorLitros);  // Mantener solo el valor num√©rico\nreturn msg;\n",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1200,
        "y": 320,
        "wires": [
            [
                "9697e28409cf8e9a",
                "97558b3920c147c4"
            ],
            []
        ]
    },
    {
        "id": "d22dd7fabe6a49f6",
        "type": "function",
        "z": "99aae1551605c876",
        "name": "Data Accumulation Node",
        "func": "let cola = flow.get(\"colaLecturas\") || [];\nconst tiempoMaximo = 300000; // 5 minutos en milisegundos\n\n// A√±adir nuevo registro con timestamp actual si no viene incluido en el mensaje\nconst tiempoRegistro = msg.payload.timestamp || Date.now();  // Usar timestamp del mensaje o el tiempo actual si no est√° disponible\ncola.push({\n    tiempo: tiempoRegistro,\n    volumen: msg.payload[0] // Asumiendo que el volumen viene en msg.payload como primer elemento del array\n});\n\n// Eliminar registros m√°s antiguos que el tiempo m√°ximo permitido\nlet tiempoActual = Date.now();\ncola = cola.filter(registro => (tiempoActual - registro.tiempo) <= tiempoMaximo);\n\n// Guardar la cola actualizada en el contexto del flujo\nflow.set(\"colaLecturas\", cola);\n\n// Pasar la cola completa al siguiente nodo para su procesamiento\nreturn { payload: cola };\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1410,
        "y": 280,
        "wires": [
            [
                "eadb84f0e779e634"
            ]
        ]
    },
    {
        "id": "eadb84f0e779e634",
        "type": "function",
        "z": "99aae1551605c876",
        "name": "Flow Calculation Node",
        "func": "const cola = msg.payload;\nlet flujo = 0;\n\nif (cola.length > 1) {\n    const primerRegistro = cola[0];\n    const ultimoRegistro = cola[cola.length - 1];\n    const tiempoDiferencia = (ultimoRegistro.tiempo - primerRegistro.tiempo) / 1000; // en segundos\n\n    // Convertir los valores de volumen seg√∫n la escala proporcionada\n    const volumenInicial = ((primerRegistro.volumen - 4000) / (20000 - 4000)) * (40000 - 0);\n    const volumenFinal = ((ultimoRegistro.volumen - 4000) / (20000 - 4000)) * (40000 - 0);\n\n    if (tiempoDiferencia > 0) {\n        flujo = Math.round(-((volumenFinal - volumenInicial) / tiempoDiferencia) * 3600); // calcular flujo\n    }\n} else {\n    // Manejar el caso cuando no hay suficientes registros para calcular un flujo\n    flujo = \"Insuficientes datos para c√°lculo de flujo\";\n}\n\n// Devolver el valor del flujo\nreturn { payload: flujo };\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1410,
        "y": 220,
        "wires": [
            [
                "a282daa8ba70f2d5",
                "1fb5c87cd2cd1c27"
            ]
        ]
    },
    {
        "id": "ed69841dd94bdf96",
        "type": "function",
        "z": "99aae1551605c876",
        "name": "calc_presion",
        "func": "const valorADCMin = 4000;\nconst valorADCMax = 20000;\nconst valorMin = 0;\nconst valorMax = 10.1972;\n\nconst valorADC = msg.payload[0];\nconst valorPresion = ((valorADC - valorADCMin) / (valorADCMax - valorADCMin)) * (valorMax - valorMin) + valorMin;\n\nmsg.payload = valorPresion.toFixed(4);\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1210,
        "y": 480,
        "wires": [
            [
                "494650c3e811a093",
                "04e1f4be01298558"
            ]
        ]
    },
    {
        "id": "0cc127d80da4ccb2",
        "type": "function",
        "z": "99aae1551605c876",
        "name": "calc_flujo",
        "func": "const valorADCMin = 4000;\nconst valorADCMax = 20000;\nconst valorMin = 0;\nconst valorMax = 10000;\n\nconst valorADC = msg.payload[0];\nconst valorLitrosHora = ((valorADC - valorADCMin) / (valorADCMax - valorADCMin)) * (valorMax - valorMin) + valorMin;\n\nmsg.payload = Math.round(valorLitrosHora);\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1200,
        "y": 420,
        "wires": [
            [
                "44a43c8b1983c102"
            ]
        ]
    },
    {
        "id": "9a56b7fccec13043",
        "type": "modbus-flex-getter",
        "z": "99aae1551605c876",
        "name": "EDP1",
        "showStatusActivities": false,
        "showErrors": false,
        "showWarnings": true,
        "logIOActivities": false,
        "server": "52f2d0e38d313f88",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "keepMsgProperties": false,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 640,
        "y": 520,
        "wires": [
            [
                "2de2ccb5329d1be3",
                "bd88d086d530441a"
            ],
            []
        ]
    },
    {
        "id": "bd88d086d530441a",
        "type": "switch",
        "z": "99aae1551605c876",
        "name": "EDP1_Registros",
        "property": "topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "read_EDP1_AI1",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "read_EDP1_AI2",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "read_EDP1_AI3",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "read_EDP1_AI4",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "read_EDP1_AI5",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "read_EDP1_AI6",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 6,
        "x": 950,
        "y": 440,
        "wires": [
            [
                "0cc127d80da4ccb2"
            ],
            [],
            [],
            [],
            [],
            []
        ]
    },
    {
        "id": "a282daa8ba70f2d5",
        "type": "function",
        "z": "99aae1551605c876",
        "name": "telemetria",
        "func": "msg.payload = {\n  flujo: msg.payload\n};\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1690,
        "y": 260,
        "wires": [
            [
                "46a388943a40c850"
            ]
        ]
    },
    {
        "id": "8c078635aaa0eedc",
        "type": "mqtt out",
        "z": "99aae1551605c876",
        "d": true,
        "name": "mqtt_tb_MN-2.1",
        "topic": "v1/devices/me/telemetry",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "75c0821a42a5cdfb",
        "x": 1590,
        "y": 340,
        "wires": []
    },
    {
        "id": "9697e28409cf8e9a",
        "type": "function",
        "z": "99aae1551605c876",
        "name": "telemetria",
        "func": "msg.payload = {\n  volumen: msg.payload\n};\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1430,
        "y": 340,
        "wires": [
            [
                "8c078635aaa0eedc"
            ]
        ]
    },
    {
        "id": "46a388943a40c850",
        "type": "mqtt out",
        "z": "99aae1551605c876",
        "d": true,
        "name": "mqtt_tb_MF-1.1",
        "topic": "v1/devices/me/telemetry",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "689c5e6207baccbb",
        "x": 1840,
        "y": 260,
        "wires": []
    },
    {
        "id": "82d2dd0f681c095c",
        "type": "function",
        "z": "99aae1551605c876",
        "name": "telemetria",
        "func": "msg.payload = {\n  flujo: msg.payload\n};\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1420,
        "y": 400,
        "wires": [
            [
                "39acba24e1c67dab"
            ]
        ]
    },
    {
        "id": "39acba24e1c67dab",
        "type": "mqtt out",
        "z": "99aae1551605c876",
        "d": true,
        "name": "mqtt_tb_MF-3.1",
        "topic": "v1/devices/me/telemetry",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "74ceda570d3e66dc",
        "x": 1590,
        "y": 400,
        "wires": []
    },
    {
        "id": "494650c3e811a093",
        "type": "function",
        "z": "99aae1551605c876",
        "name": "telemetria",
        "func": "msg.payload = {\n  presion: msg.payload\n};\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1510,
        "y": 460,
        "wires": [
            [
                "8400e8f5f81f078a"
            ]
        ]
    },
    {
        "id": "8400e8f5f81f078a",
        "type": "mqtt out",
        "z": "99aae1551605c876",
        "d": true,
        "name": "mqtt_tb_MP-1.1",
        "topic": "v1/devices/me/telemetry",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "feca9c5ced6ec599",
        "x": 1780,
        "y": 520,
        "wires": []
    },
    {
        "id": "2c5878d79e32f7b6",
        "type": "inject",
        "z": "99aae1551605c876",
        "name": "Simulate ADC Input",
        "props": [
            {
                "p": "payload[0]",
                "v": "9650",
                "vt": "num"
            },
            {
                "p": "payload.timestamp",
                "v": "",
                "vt": "date"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 980,
        "y": 560,
        "wires": [
            []
        ]
    },
    {
        "id": "1fb5c87cd2cd1c27",
        "type": "ui-gauge",
        "z": "99aae1551605c876",
        "name": "Flujo COPE",
        "group": "3f690bb5a526a246",
        "order": 2,
        "width": "5",
        "height": "4",
        "gtype": "gauge-half",
        "gstyle": "rounded",
        "title": "Flujo COPE",
        "units": "L/h",
        "icon": "",
        "prefix": "",
        "suffix": "",
        "segments": [
            {
                "from": "0",
                "color": "#ea5353"
            },
            {
                "from": "4000",
                "color": "#5cd65c"
            },
            {
                "from": "7500",
                "color": "#ea5353"
            }
        ],
        "min": 0,
        "max": "10000",
        "sizeThickness": "26",
        "sizeGap": "3",
        "sizeKeyThickness": "20",
        "styleRounded": true,
        "styleGlow": false,
        "className": "",
        "x": 1680,
        "y": 220,
        "wires": []
    },
    {
        "id": "6cb40d53b7eca096",
        "type": "ui-chart",
        "z": "99aae1551605c876",
        "group": "3f690bb5a526a246",
        "name": "Volumen FA-02",
        "label": "Volumen FA-02",
        "order": 1,
        "chartType": "bar",
        "category": "label",
        "categoryType": "property",
        "xAxisProperty": "",
        "xAxisPropertyType": "msg",
        "xAxisType": "category",
        "yAxisProperty": "value",
        "ymin": "0",
        "ymax": "40000",
        "action": "replace",
        "pointShape": "circle",
        "pointRadius": 4,
        "showLegend": false,
        "removeOlder": 1,
        "removeOlderUnit": "3600",
        "removeOlderPoints": "",
        "colors": [
            "#227dbf",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "width": "1",
        "height": "5",
        "className": "",
        "x": 1770,
        "y": 300,
        "wires": [
            []
        ]
    },
    {
        "id": "97558b3920c147c4",
        "type": "function",
        "z": "99aae1551605c876",
        "name": "formato_ui",
        "func": "msg.payload = {\n    value: msg.payload,\n    label: msg.payload + \" Litros\"\n};\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1600,
        "y": 300,
        "wires": [
            [
                "6cb40d53b7eca096"
            ]
        ]
    },
    {
        "id": "04e1f4be01298558",
        "type": "ui-gauge",
        "z": "99aae1551605c876",
        "name": "Presion alimentacion",
        "group": "3f690bb5a526a246",
        "order": 3,
        "width": "5",
        "height": "4",
        "gtype": "gauge-half",
        "gstyle": "rounded",
        "title": "Presi√≥n Alimentaci√≥n",
        "units": "Kg/cm2",
        "icon": "",
        "prefix": "",
        "suffix": "",
        "segments": [
            {
                "from": "0",
                "color": "#ea5353"
            },
            {
                "from": "4",
                "color": "#5cd65c"
            },
            {
                "from": "6",
                "color": "#ea5353"
            }
        ],
        "min": 0,
        "max": "10",
        "sizeThickness": "26",
        "sizeGap": "3",
        "sizeKeyThickness": "20",
        "styleRounded": true,
        "styleGlow": false,
        "className": "",
        "x": 1750,
        "y": 480,
        "wires": []
    },
    {
        "id": "f37a387a6db4a4f0",
        "type": "ui-gauge",
        "z": "99aae1551605c876",
        "name": "Flujo V. DA-01",
        "group": "d1e5da8ea7145cd4",
        "order": 9,
        "width": 3,
        "height": 3,
        "gtype": "gauge-half",
        "gstyle": "rounded",
        "title": "Flujo Vapor DA-01",
        "units": "L/h",
        "icon": "",
        "prefix": "",
        "suffix": "",
        "segments": [
            {
                "from": "0",
                "color": "#ea5353"
            },
            {
                "from": "700",
                "color": "#5cd65c"
            },
            {
                "from": "1200",
                "color": "#ea5353"
            }
        ],
        "min": 0,
        "max": "1500",
        "sizeThickness": "20",
        "sizeGap": "3",
        "sizeKeyThickness": "16",
        "styleRounded": true,
        "styleGlow": false,
        "className": "",
        "x": 1770,
        "y": 420,
        "wires": []
    },
    {
        "id": "1e505102148666b6",
        "type": "inject",
        "z": "99aae1551605c876",
        "name": "Simulate ADC Input",
        "props": [
            {
                "p": "payload.value",
                "v": "9650",
                "vt": "num"
            },
            {
                "p": "payload.timestamp",
                "v": "",
                "vt": "date"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 930,
        "y": 300,
        "wires": [
            [
                "89266e2d19a34e47"
            ]
        ]
    },
    {
        "id": "be77768ac4cea264",
        "type": "inject",
        "z": "99aae1551605c876",
        "name": "Simulate ADC Input",
        "props": [
            {
                "p": "payload.value",
                "v": "18500",
                "vt": "num"
            },
            {
                "p": "payload.timestamp",
                "v": "",
                "vt": "date"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 930,
        "y": 260,
        "wires": [
            []
        ]
    },
    {
        "id": "9132fa71ff43c519",
        "type": "inject",
        "z": "99aae1551605c876",
        "name": "inject1",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 320,
        "y": 140,
        "wires": [
            [
                "0514657b673c818b"
            ]
        ]
    },
    {
        "id": "89ef0e481f6b6e46",
        "type": "inject",
        "z": "99aae1551605c876",
        "name": "inject1",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 320,
        "y": 180,
        "wires": [
            [
                "96c5396a3fcc5384"
            ]
        ]
    },
    {
        "id": "0514657b673c818b",
        "type": "change",
        "z": "99aae1551605c876",
        "name": "set flow.flags",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 500,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "96c5396a3fcc5384",
        "type": "change",
        "z": "99aae1551605c876",
        "name": "set flow.registers",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 520,
        "y": 180,
        "wires": [
            []
        ]
    },
    {
        "id": "058fb640a5dc0336",
        "type": "function",
        "z": "99aae1551605c876",
        "name": "health check",
        "func": "let status = 'Unknown';\n\nif (msg.payload === 'online') {\n    status = 'Online';\n} else if (msg.payload === 'offline') {\n    status = 'Offline';\n}\n\nmsg.payload = {\n    status: status,\n    timestamp: new Date().toISOString()\n};\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 300,
        "y": 960,
        "wires": [
            [
                "390ced906a1b098b"
            ]
        ]
    },
    {
        "id": "390ced906a1b098b",
        "type": "switch",
        "z": "99aae1551605c876",
        "name": "update diag",
        "property": "payload.status",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "Online",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "Offline",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 300,
        "y": 1020,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "9f0bd479e0ac9876",
        "type": "catch",
        "z": "99aae1551605c876",
        "name": "",
        "scope": [
            "9a56b7fccec13043",
            "84f76f1cd9d92dda"
        ],
        "uncaught": false,
        "x": 640,
        "y": 780,
        "wires": [
            [
                "b28613bb2ff51d4e"
            ]
        ]
    },
    {
        "id": "b28613bb2ff51d4e",
        "type": "function",
        "z": "99aae1551605c876",
        "name": "Error Handling",
        "func": "const maxRetries = 3;\nconst retryDelay = 5000;\n\nlet retryCount = flow.get('retryCount') || 0;\n\nif (retryCount < maxRetries) {\n    // Incrementar el contador de reintentos\n    retryCount++;\n    flow.set('retryCount', retryCount);\n    \n    // Programar el reintento despu√©s del intervalo de tiempo especificado\n    setTimeout(function() {\n        node.warn(`Retrying communication (attempt ${retryCount})`);\n        node.send(msg);\n    }, retryDelay);\n} else {\n    // Se alcanz√≥ el n√∫mero m√°ximo de reintentos, enviar notificaci√≥n de error cr√≠tico\n    node.error('Max retries reached. Critical error occurred.');\n    \n    // Enviar notificaci√≥n por correo electr√≥nico o otro medio\n    const alertMsg = {\n        payload: {\n            to: 'tableroas14@gmail.com',\n            subject: 'Critical Error - Max Retries Reached',\n            body: 'The system encountered a critical error. Max retries reached.'\n        }\n    };\n    node.send([null, alertMsg]);\n    \n    // Restablecer el contador de reintentos\n    flow.set('retryCount', 0);\n}\n\nreturn;",
        "outputs": 2,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 820,
        "y": 780,
        "wires": [
            [
                "0b7c0e80208bbee2"
            ],
            [
                "33ce777ac1b61790"
            ]
        ]
    },
    {
        "id": "33ce777ac1b61790",
        "type": "e-mail",
        "z": "99aae1551605c876",
        "server": "smtp.gmail.com",
        "port": "587",
        "authtype": "BASIC",
        "saslformat": false,
        "token": "oauth2Response.access_token",
        "secure": true,
        "tls": false,
        "name": "tableroas14@gmail.com",
        "dname": "MTO",
        "x": 1080,
        "y": 800,
        "wires": []
    },
    {
        "id": "d51707904dd44d1b",
        "type": "function",
        "z": "99aae1551605c876",
        "name": "Error Handling",
        "func": "const maxRetries = 3;\nconst retryDelay = 5000;\nconst maxFlowRestarts = 2;\nconst maxServerRestarts = 1;\n\nlet retryCount = flow.get('retryCount') || 0;\nlet flowRestartCount = flow.get('flowRestartCount') || 0;\nlet serverRestartCount = flow.get('serverRestartCount') || 0;\n\nif (retryCount < maxRetries) {\n    // Incrementar el contador de reintentos\n    retryCount++;\n    flow.set('retryCount', retryCount);\n    \n    // Programar el reintento despu√©s del intervalo de tiempo especificado\n    setTimeout(function() {\n        node.warn(`Retrying communication (attempt ${retryCount})`);\n        node.send(msg);\n    }, retryDelay);\n} else {\n    // Se alcanz√≥ el n√∫mero m√°ximo de reintentos\n    node.error('Max retries reached. Triggering flow restart.');\n    \n    // Reiniciar el flujo\n    if (flowRestartCount < maxFlowRestarts) {\n        flowRestartCount++;\n        flow.set('flowRestartCount', flowRestartCount);\n        \n        // Enviar mensaje al nodo de reinicio del flujo\n        const flowRestartMsg = {\n            payload: {\n                action: 'restartFlow'\n            }\n        };\n        node.send([null, null, flowRestartMsg]);\n    } else {\n        // Se alcanz√≥ el n√∫mero m√°ximo de reinicios del flujo\n        node.error('Max flow restarts reached. Triggering server restart.');\n        \n        // Reiniciar el servidor Node-RED\n        if (serverRestartCount < maxServerRestarts) {\n            serverRestartCount++;\n            flow.set('serverRestartCount', serverRestartCount);\n            \n            // Enviar mensaje al nodo de reinicio del servidor\n            const serverRestartMsg = {\n                payload: {\n                    action: 'restartServer'\n                }\n            };\n            node.send([null, null, null, serverRestartMsg]);\n        } else {\n            // Se alcanz√≥ el n√∫mero m√°ximo de reinicios del servidor\n            node.error('Max server restarts reached. Triggering system reboot.');\n            \n            // Enviar mensaje al nodo de reinicio del sistema\n            const systemRebootMsg = {\n                payload: {\n                    action: 'rebootSystem'\n                }\n            };\n            node.send([null, null, null, null, systemRebootMsg]);\n        }\n    }\n    \n    // Restablecer el contador de reintentos\n    flow.set('retryCount', 0);\n}\n\nreturn;",
        "outputs": 5,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 770,
        "y": 980,
        "wires": [
            [],
            [],
            [
                "7818ced5c9af3f9d"
            ],
            [
                "ed86c00c9a4c2dde"
            ],
            [
                "c3a92d109c981b24"
            ]
        ]
    },
    {
        "id": "7818ced5c9af3f9d",
        "type": "function",
        "z": "99aae1551605c876",
        "name": "Restart Flow",
        "func": "const http = require('http');\n\n// URL de la API de Node-RED para reiniciar el flujo\nconst nodeRedUrl = 'http://localhost:1880/flows';\n\n// Opciones de la solicitud HTTP\nconst options = {\n    method: 'POST',\n    headers: {\n        'Content-Type': 'application/json',\n        'Node-RED-Deployment-Type': 'reload'\n    }\n};\n\n// Funci√≥n para reiniciar el flujo\nfunction restartFlow(msg) {\n    const req = http.request(options, (res) => {\n        let data = '';\n\n        res.on('data', (chunk) => {\n            data += chunk;\n        });\n\n        res.on('end', () => {\n            if (res.statusCode === 200) {\n                node.log('Flow restarted successfully');\n                node.status({ fill: 'green', shape: 'dot', text: 'Flow restarted' });\n            } else {\n                node.error('Failed to restart flow. Status code: ' + res.statusCode);\n                node.status({ fill: 'red', shape: 'dot', text: 'Restart failed' });\n            }\n        });\n    });\n\n    req.on('error', (error) => {\n        node.error('Failed to restart flow. Error: ' + error.message);\n        node.status({ fill: 'red', shape: 'dot', text: 'Restart failed' });\n    });\n\n    req.end();\n\n    return msg;\n}\n\n// Reiniciar el flujo cuando se recibe un mensaje\nrestartFlow(msg);",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1080,
        "y": 940,
        "wires": [
            []
        ]
    },
    {
        "id": "ed86c00c9a4c2dde",
        "type": "function",
        "z": "99aae1551605c876",
        "name": "Restart Server",
        "func": "const exec = require('child_process').exec;\n\n// Comando para reiniciar el servidor Node-RED\nconst restartCommand = 'sudo systemctl restart nodered';\n\n// Funci√≥n para reiniciar el servidor Node-RED\nfunction restartServer(msg) {\n    exec(restartCommand, (error, stdout, stderr) => {\n        if (error) {\n            node.error('Failed to restart server. Error: ' + error.message);\n            node.status({ fill: 'red', shape: 'dot', text: 'Restart failed' });\n        } else {\n            node.log('Server restarted successfully');\n            node.status({ fill: 'green', shape: 'dot', text: 'Server restarted' });\n        }\n    });\n\n    return msg;\n}\n\n// Reiniciar el servidor cuando se recibe un mensaje\nrestartServer(msg);",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1070,
        "y": 980,
        "wires": [
            []
        ]
    },
    {
        "id": "c3a92d109c981b24",
        "type": "function",
        "z": "99aae1551605c876",
        "name": "Reboot System",
        "func": "const exec = require('child_process').exec;\n\n// Comando para reiniciar el sistema operativo\nconst rebootCommand = 'sudo reboot';\n\n// Funci√≥n para reiniciar el sistema operativo\nfunction rebootSystem(msg) {\n    exec(rebootCommand, (error, stdout, stderr) => {\n        if (error) {\n            node.error('Failed to reboot system. Error: ' + error.message);\n            node.status({ fill: 'red', shape: 'dot', text: 'Reboot failed' });\n        } else {\n            node.log('System reboot initiated');\n            node.status({ fill: 'green', shape: 'dot', text: 'System rebooting' });\n        }\n    });\n\n    return msg;\n}\n\n// Reiniciar el sistema cuando se recibe un mensaje\nrebootSystem(msg);",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1070,
        "y": 1020,
        "wires": [
            []
        ]
    },
    {
        "id": "12c43c5cebeaca2f",
        "type": "inject",
        "z": "99aae1551605c876",
        "name": "Simulate Error",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "simulate error",
        "payloadType": "str",
        "x": 540,
        "y": 720,
        "wires": [
            [
                "84f76f1cd9d92dda"
            ]
        ]
    },
    {
        "id": "84f76f1cd9d92dda",
        "type": "function",
        "z": "99aae1551605c876",
        "name": "function 2",
        "func": "// Comprobar si el mensaje es un 'simulated error'\nif (msg.payload === \"simulate error\") {\n    throw new Error(\"Simulated Error\");\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 710,
        "y": 720,
        "wires": [
            []
        ]
    },
    {
        "id": "0a195c4886b29420",
        "type": "inject",
        "z": "99aae1551605c876",
        "name": "EDP1_AI2",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "2",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "read_EDP1_AI2",
        "payload": "{\"value\":0,\"fc\":4,\"unitid\":1,\"address\":0,\"quantity\":1}",
        "payloadType": "json",
        "x": 190,
        "y": 500,
        "wires": [
            [
                "0b7c0e80208bbee2"
            ]
        ]
    },
    {
        "id": "3f8fca7d660cac13",
        "type": "inject",
        "z": "99aae1551605c876",
        "name": "EDP1_AI3",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "2",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "read_EDP1_AI3",
        "payload": "{\"value\":0,\"fc\":4,\"unitid\":1,\"address\":0,\"quantity\":1}",
        "payloadType": "json",
        "x": 190,
        "y": 540,
        "wires": [
            [
                "0b7c0e80208bbee2"
            ]
        ]
    },
    {
        "id": "14dd5efb4ac6d2ca",
        "type": "inject",
        "z": "99aae1551605c876",
        "name": "EDP1_AI4",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "2",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "read_EDP1_AI4",
        "payload": "{\"value\":0,\"fc\":4,\"unitid\":1,\"address\":0,\"quantity\":1}",
        "payloadType": "json",
        "x": 190,
        "y": 580,
        "wires": [
            [
                "0b7c0e80208bbee2"
            ]
        ]
    },
    {
        "id": "e241822f0b248902",
        "type": "inject",
        "z": "99aae1551605c876",
        "name": "EDP1_AI5",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "2",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "read_EDP1_AI5",
        "payload": "{\"value\":0,\"fc\":4,\"unitid\":1,\"address\":0,\"quantity\":1}",
        "payloadType": "json",
        "x": 190,
        "y": 620,
        "wires": [
            [
                "0b7c0e80208bbee2"
            ]
        ]
    },
    {
        "id": "ae76a3e51e064268",
        "type": "inject",
        "z": "99aae1551605c876",
        "name": "EDP1_AI6",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "2",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "read_EDP1_AI6",
        "payload": "{\"value\":0,\"fc\":4,\"unitid\":1,\"address\":0,\"quantity\":1}",
        "payloadType": "json",
        "x": 190,
        "y": 660,
        "wires": [
            [
                "0b7c0e80208bbee2"
            ]
        ]
    },
    {
        "id": "44a43c8b1983c102",
        "type": "debug",
        "z": "99aae1551605c876",
        "name": "flujo delta",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1390,
        "y": 560,
        "wires": []
    },
    {
        "id": "9184f2e7.dada4",
        "type": "inject",
        "z": "e9c3b7a8.f1b4f8",
        "name": "Simular Temperatura Sensor",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "1",
        "topic": "",
        "payload": "194.1",
        "payloadType": "num",
        "x": 300,
        "y": 280,
        "wires": [
            [
                "d5bcd3b4.0fbd6"
            ]
        ]
    },
    {
        "id": "d5bcd3b4.0fbd6",
        "type": "function",
        "z": "e9c3b7a8.f1b4f8",
        "name": "Ajustar Temperatura",
        "func": "msg.payload = 1.3587 * msg.payload - 14.0434;\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 540,
        "y": 280,
        "wires": [
            [
                "b8a1bb91.8f8b48"
            ]
        ]
    },
    {
        "id": "b8a1bb91.8f8b48",
        "type": "debug",
        "z": "e9c3b7a8.f1b4f8",
        "name": "Resultado",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 720,
        "y": 280,
        "wires": []
    },
    {
        "id": "a2190cefde701caf",
        "type": "function",
        "z": "1234567890abcdef",
        "name": "Convert ASCII to RTU Device",
        "func": "function convertToRTU(ascii) {\n    let address = Buffer.from(ascii.slice(0, 2), 'hex');\n    let functionCode = Buffer.from(ascii.slice(2, 4), 'hex');\n    let data = Buffer.from(ascii.slice(4), 'hex');\n\n    let rtuBuffer = Buffer.concat([address, functionCode, data]);\n\n    let crc = calculateCRC(rtuBuffer);\n\n    let rtuPacket = Buffer.concat([rtuBuffer, crc]);\n\n    return rtuPacket;\n}\n\nfunction calculateCRC(buffer) {\n    let crc = 0xFFFF;\n    for (let pos = 0; pos < buffer.length; pos++) {\n        crc ^= buffer[pos];\n        for (let i = 8; i !== 0; i--) {\n            if ((crc & 0x0001) !== 0) {\n                crc >>= 1;\n                crc ^= 0xA001;\n            } else {\n                crc >>= 1;\n            }\n        }\n    }\n    let crcBuffer = Buffer.alloc(2);\n    crcBuffer[0] = crc & 0xFF;\n    crcBuffer[1] = (crc >> 8) & 0xFF;\n    return crcBuffer;\n}\n\nlet asciiData = msg.payload;\nlet rtuData = convertToRTU(asciiData);\nmsg.payload = rtuData;\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 730,
        "y": 160,
        "wires": [
            [
                "70f6a8037a4cec5f"
            ]
        ]
    },
    {
        "id": "2fe97c5a96d7ce2d",
        "type": "serial in",
        "z": "1234567890abcdef",
        "name": "Receive ASCII Device",
        "serial": "5ce554f3bf059e46",
        "x": 430,
        "y": 160,
        "wires": [
            [
                "a2190cefde701caf"
            ]
        ]
    },
    {
        "id": "70f6a8037a4cec5f",
        "type": "serial out",
        "z": "1234567890abcdef",
        "name": "Send RTU Device",
        "serial": "5ce554f3bf059e46",
        "x": 1030,
        "y": 160,
        "wires": []
    },
    {
        "id": "5a52b76010c294ce",
        "type": "inject",
        "z": "80eb62dedb1dba03",
        "name": "update",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "update",
        "payload": "",
        "payloadType": "date",
        "x": 150,
        "y": 80,
        "wires": [
            [
                "349acca2a5053164"
            ]
        ]
    },
    {
        "id": "3f2b7e7b2ebef353",
        "type": "inject",
        "z": "80eb62dedb1dba03",
        "name": "next",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "next",
        "payload": "",
        "payloadType": "date",
        "x": 150,
        "y": 120,
        "wires": [
            [
                "349acca2a5053164"
            ]
        ]
    },
    {
        "id": "349acca2a5053164",
        "type": "function",
        "z": "80eb62dedb1dba03",
        "name": "Modbus Queue",
        "func": "let resendifnoresposne = true; // resend the last message if no response is received\nlet resendinterval = 10; // resend last message every x seconds\nlet online_threshold = 10; // Seconds between updates under which the device is considered online\nlet offline_threshold = 300; // Seconds between updates above which the device is considered offline\n\nlet notifmsg = null;\n\n// Check and make sure the incoming message has a topic\nif ((msg.topic === \"\") || (msg.topic === null) || (msg.topic === undefined)) {\n    node.status({ fill: \"red\", shape: \"dot\", text: \"Topic missing\" });\n    return;\n}\n\nlet lastupdate = context.get(\"lastupdate\");\nlet state = context.get(\"state\") | 0;\nlet queue = context.get(\"queue\");\nlet queuecount = 0;\nif (queue === undefined) {\n    queue = [];\n} else {\n    if (Array.isArray(queue)) {\n        queuecount = queue.length;\n    } else {\n        queue = [];\n    }\n}\nlet current = new Date().getTime();\nlet send = false;\n\nswitch (msg.topic.toLowerCase()) {\n    case \"update\":\n        // Update the timer and statistics\n\n        if (lastupdate !== undefined) {\n            notifmsg = { \"topic\": \"Information\", \"payload\": {} };\n            current = current - lastupdate;\n            current = Math.floor(current / 1000);\n            notifmsg.payload.secondsincelastupdate = current;\n            var minute = Math.floor(current / 60);\n            var hour = Math.floor(minute / 60);\n            var day = Math.floor(hour / 24);\n            if (current > 24 * 60 * 60) {\n                notifmsg.payload.updatetext = \"Last update \" + day + \" days, \" + hour % 24 + \" hours, \" + minute % 60 + \" minutes, \" + current % 60 + \" seconds ago\";\n            } else if (current > 60 * 60) {\n                notifmsg.payload.updatetext = \"Last update \" + hour % 24 + \" hours, \" + minute % 60 + \" minutes, \" + current % 60 + \" seconds ago\";\n            } else if (current > 60) {\n                notifmsg.payload.updatetext = \"Last update \" + minute % 60 + \" minutes, \" + current % 60 + \" seconds ago\";\n            } else {\n                notifmsg.payload.updatetext = \"Last update \" + current % 60 + \" seconds ago\";\n            }\n\n            // Resend last message if there is no response from the server\n            if (resendifnoresposne) {\n                if ((current > 0) && (current % resendinterval === 0)) {\n                    let lastmsg = context.get(\"lastmsg\");\n                    if ((lastmsg !== undefined) && (context.get(\"sent\"))) {\n                        notifmsg.payload.resend = true;\n                        if ((lastmsg.payload.fc === 1) || (lastmsg.payload.fc === 2) || (lastmsg.payload.fc === 3) || (lastmsg.payload.fc === 4)) {\n                            // this is a modbus read request\n                            node.status({ fill: \"green\", shape: \"dot\", text: \"Read re-sent!\" });\n                            return [lastmsg, null, notifmsg];\n                        } else {\n                            // this is a modbus write request\n                            node.status({ fill: \"green\", shape: \"dot\", text: \"Write re-sent!\" });\n                            return [null, lastmsg, notifmsg];\n                        }\n                    }\n                }\n            }\n\n            // Check for online state\n            if (state !== 1) {\n                if (current < online_threshold) {\n                    notifmsg.topic = \"Warning\";\n                    notifmsg.payload.text = \"Device is now online\";\n                    notifmsg.payload.statuschange = true;\n                    state = 1;\n                    context.set(\"state\", state);\n                }\n            } else {\n                if (current > offline_threshold) {\n                    notifmsg.topic = \"Error\";\n                    notifmsg.payload.text = \"Device is not transmitting\";\n                    notifmsg.payload.statuschange = true;\n                    state = 99;\n                    context.set(\"state\", state);\n                }\n            }\n            notifmsg.payload.state = state;\n            if (state === 1) {\n                node.status({ fill: \"blue\", shape: \"ring\", text: queuecount + \" | \" + notifmsg.payload.updatetext });\n            } else {\n                node.status({ fill: \"red\", shape: \"ring\", text: queuecount + \" | \" + notifmsg.payload.updatetext });\n            }\n            return [null, null, notifmsg];\n\n        } else {\n            node.status({ fill: \"grey\", shape: \"ring\", text: \"No data\" });\n        }\n        break;\n    case \"next\":\n        // Update the lastupdate counter\n        context.set(\"lastupdate\", current);\n        context.set(\"sent\", false);\n        send = true;\n        break;\n    case \"reset\":\n        context.set(\"queue\", []);\n        context.set(\"sent\", false);\n        context.set(\"lastmsg\", undefined);\n        break;\n    default:\n        // The incoming message is a modbus request\n\n        // delete the last msg to prevent from being resent\n        // context.set(\"lastmsg\", undefined);\n\n        // Check if there is already a message in the queue with the same topic. \n        // If there is it needs to be deleted, because we only keep the last message.\n        for (let i = queue.length - 1; i >= 0; i--) {\n            if (queue[i].topic === msg.topic) {\n                queue.splice(i, 1);\n            }\n        }\n\n        // Add the message to the end of the queue\n        queue.push(msg);\n        context.set(\"queue\", queue);\n\n        if (!context.get(\"sent\")) {\n            send = true;\n        }\n        node.status({ fill: \"green\", shape: \"dot\", text: queue.length });\n\n}\n\n// We need to send out a new message\nif (send) {\n\n    if (queue.length > 0) {\n        // Get the oldest message from the array\n        let newmsg = queue[0];\n        // remove this message\n        queue.splice(0, 1);\n        context.set(\"queue\", queue);\n        context.set(\"sent\", true);\n        context.set(\"lastmsg\", newmsg);\n\n        if ((newmsg.payload.fc === 1) || (newmsg.payload.fc === 2) || (newmsg.payload.fc === 3) || (newmsg.payload.fc === 4)) {\n            // this is a modbus read request\n            node.status({ fill: \"green\", shape: \"dot\", text: \"Read sent!\" });\n            return [newmsg, null, null];\n        } else {\n            // this is a modbus write request\n            node.status({ fill: \"green\", shape: \"dot\", text: \"Write sent!\" });\n            return [null, newmsg, null];\n        }\n\n    }\n}\n",
        "outputs": 3,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 570,
        "y": 100,
        "wires": [
            [
                "77b95b86abdcf745"
            ],
            [
                "a603d944f5253d6a"
            ],
            [
                "22e4c25b6efd4c14"
            ]
        ],
        "info": "# Modbus Queue\n\nThis node queues read and write messages for modbus. Use this node if you are reading and writing to the same device with many different requests. E.g. reading different coil/register intervals continuously and also writing to the device at the same time.\n\nIt does a few things:\n- queues all messages arriving on the input port\n- based on the msg.topic, older messages of the same topic are ignored\n- sends out the oldest message and waits for the \n- monitors the time since last message and sends out report on the output\n- handles online/offline status\n- resends the last message if response is not received in time\n\n## Input Data\n\n### payload\n\nThe payload should contain the data that gets sent to the flex-getter or flex-writer node.\nTypical modbus read payload:\n`{\"value\":0,\"fc\":3,\"unitid\":1,\"address\":1000,\"quantity\":20}`\nTypical modbus write payload:\n`{\"value\":false,\"fc\":5,\"unitid\":1,\"address\":0,\"quantity\":1}`\n\n### topic\n\nEach message must contain a topic (any text), and this topic is used to identify the different read/write requests and delete any earlier request with the same topic if it is still in the queue.\n\nThere are a few reserved topics for special functions (for these, payload is ignored):\n- reset: resets the queue and deletes any data collected so far\n- next: this is the message fed back from the flex getter/write node to indicate to this node that a new message can be sent out\n- update: this should be coming from a 1-second timer to display the current queue count, time since the last update, and online/offline status\n\n## Output Ports\n\n### Port 1: flex getter\n\nThis output should be connected to a modbus-flex-getter and all the read requests will be sent out through this port\n\n### Port 2: flex write\n\nThis output should be connected to a modbus-flex-write and all the write requests will be sent out through this port\n\n### Port 3: status messages\n\nThis port outputs a status message for every update message (msg.topic=\"update\").\n\n- topic: \"Information\" for regular updates, \"Warning\": offline device is now back online, \"Error\": device is offline\n- payload.text: message like when the device went offline, or back online\n- payload.updatetext: time passed since the last update (human readable format)\n- payload.secondsincelastupdate: number of seconds since the last update from the device\n- payload.statuschange: true if status is changed (went offline, back online)\n- payload.state: 0: initial state, no data yet, 1: device online, 99: device offline\n\n## Node Settings\n\nChange the settings in the first 4 lines of the code to influence the behavior. Explanation is in the code as comments."
    },
    {
        "id": "77b95b86abdcf745",
        "type": "modbus-flex-getter",
        "z": "80eb62dedb1dba03",
        "name": "Modbus Read",
        "showStatusActivities": false,
        "showErrors": false,
        "showWarnings": true,
        "logIOActivities": false,
        "server": "5587ad8696be252e",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "keepMsgProperties": false,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 800,
        "y": 60,
        "wires": [
            [
                "67cfdedf619d5d47"
            ],
            []
        ]
    },
    {
        "id": "a603d944f5253d6a",
        "type": "modbus-flex-write",
        "z": "80eb62dedb1dba03",
        "name": "Modbus Write",
        "showStatusActivities": false,
        "showErrors": false,
        "showWarnings": true,
        "server": "5587ad8696be252e",
        "emptyMsgOnFail": false,
        "keepMsgProperties": false,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 1020,
        "y": 120,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "22e4c25b6efd4c14",
        "type": "function",
        "z": "80eb62dedb1dba03",
        "name": "Update Log",
        "func": "if (msg.topic === \"Information\") {\n    // Log information messages\n    node.log(\"Information: \" + msg.payload.updatetext);\n} else if (msg.topic === \"Warning\") {\n    // Log warning messages\n    node.warn(\"Warning: \" + msg.payload.text);\n} else if (msg.topic === \"Error\") {\n    // Log error messages\n    node.error(\"Error: \" + msg.payload.text);\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 800,
        "y": 180,
        "wires": [
            []
        ]
    },
    {
        "id": "67cfdedf619d5d47",
        "type": "function",
        "z": "80eb62dedb1dba03",
        "name": "Calculate Error",
        "func": "var setpoint = flow.get('flowSetpoint') || 0;\nvar currentFlow = msg.payload[0]; // Asumiendo que el flujo actual se almacena en msg.payload[0]\nvar error = setpoint - currentFlow;\nmsg.payload = { error: error, currentFlow: currentFlow };\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1000,
        "y": 60,
        "wires": [
            [
                "7a6d21a305653210"
            ]
        ]
    },
    {
        "id": "7a6d21a305653210",
        "type": "function",
        "z": "80eb62dedb1dba03",
        "name": "Adjust Intensity",
        "func": "var error = msg.payload.error;\nvar kp_high = 1.5; // Ganancia proporcional alta\nvar kp_low = 0.5; // Ganancia proporcional baja\nvar threshold = 10; // Umbral de error para cambiar la ganancia\nvar kp = Math.abs(error) > threshold ? kp_high : kp_low;\nmsg.payload.kp = kp;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1200,
        "y": 60,
        "wires": [
            [
                "b6d1160e89717696"
            ]
        ]
    },
    {
        "id": "b6d1160e89717696",
        "type": "function",
        "z": "80eb62dedb1dba03",
        "name": "Controlador PID",
        "func": "var kp = msg.payload.kp;\nvar ki = 0.1; // Ganancia integral\nvar kd = 0.01; // Ganancia derivativa\nvar error = msg.payload.error;\nvar integral = flow.get('integral') || 0;\nvar derivative = flow.get('derivative') || 0;\nvar previousError = flow.get('previousError') || 0;\n\n// Calcular t√©rmino integral\nintegral += error;\n// Calcular t√©rmino derivativo\nvar deltaError = error - previousError;\n\n// Calcular salida PID\nvar output = kp * error + ki * integral + kd * deltaError;\n\n// Guardar valores para la siguiente iteraci√≥n\nflow.set('integral', integral);\nflow.set('derivative', deltaError);\nflow.set('previousError', error);\n\nmsg.payload = { value: output, fc: 6, unitid: 1, address: 40001, quantity: 1 }; // Modificar seg√∫n la configuraci√≥n de tu VFD\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1400,
        "y": 60,
        "wires": [
            [
                "a603d944f5253d6a"
            ]
        ]
    },
    {
        "id": "read-flow",
        "type": "modbus-read",
        "z": "80eb62dedb1dba03",
        "d": true,
        "name": "Leer flujo",
        "topic": "",
        "dataType": "holdingRegisters",
        "adr": "0",
        "quantity": "2",
        "rate": "2",
        "rateUnit": "s",
        "server": "modbus-server",
        "x": 360,
        "y": 540,
        "wires": [
            [
                "calculate-error"
            ],
            []
        ]
    },
    {
        "id": "calculate-error",
        "type": "function",
        "z": "80eb62dedb1dba03",
        "d": true,
        "name": "Calcular error",
        "func": "var setpoint = flow.get('flowSetpoint') || 0;\nvar currentFlow = msg.payload[0];\nvar error = setpoint - currentFlow;\nmsg.payload = { error: error, currentFlow: currentFlow };\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 560,
        "y": 540,
        "wires": [
            [
                "adjust-intensity"
            ]
        ]
    },
    {
        "id": "adjust-intensity",
        "type": "function",
        "z": "80eb62dedb1dba03",
        "d": true,
        "name": "Ajustar intensidad",
        "func": "var error = msg.payload.error;\nvar kp_high = 1.5; // Ganancia proporcional alta\nvar kp_low = 0.5; // Ganancia proporcional baja\nvar threshold = 10; // Umbral de error para cambiar la ganancia\nvar kp = Math.abs(error) > threshold ? kp_high : kp_low;\nmsg.payload.kp = kp;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 760,
        "y": 540,
        "wires": [
            [
                "pid-controller"
            ]
        ]
    },
    {
        "id": "pid-controller",
        "type": "function",
        "z": "80eb62dedb1dba03",
        "d": true,
        "name": "Controlador PID",
        "func": "var kp = msg.payload.kp;\nvar ki = 0.1; // Ganancia integral\nvar kd = 0.01; // Ganancia derivativa\nvar error = msg.payload.error;\nvar integral = flow.get('integral') || 0;\nvar derivative = flow.get('derivative') || 0;\nvar previousError = flow.get('previousError') || 0;\n\n// Calcular t√©rmino integral\nintegral += error;\n// Calcular t√©rmino derivativo\nvar deltaError = error - previousError;\n\n// Calcular salida PID\nvar output = kp * error + ki * integral + kd * deltaError;\n\n// Guardar valores para la siguiente iteraci√≥n\nflow.set('integral', integral);\nflow.set('derivative', deltaError);\nflow.set('previousError', error);\n\nmsg.payload = output;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 960,
        "y": 540,
        "wires": [
            [
                "send-frequency"
            ]
        ]
    },
    {
        "id": "send-frequency",
        "type": "modbus-write",
        "z": "80eb62dedb1dba03",
        "d": true,
        "name": "Enviar frecuencia",
        "dataType": "holdingRegisters",
        "adr": "1",
        "quantity": "1",
        "server": "modbus-server",
        "x": 1160,
        "y": 540,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "d80ef249f2123560",
        "type": "inject",
        "z": "0abce1a265bb0231",
        "d": true,
        "name": "Simulate ADC Input",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "payload.timestamp",
                "v": "",
                "vt": "date"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "4005",
        "payloadType": "num",
        "x": 250,
        "y": 280,
        "wires": [
            [
                "318fad8f06f77ff1"
            ]
        ]
    },
    {
        "id": "318fad8f06f77ff1",
        "type": "function",
        "z": "0abce1a265bb0231",
        "d": true,
        "name": "calc_vol",
        "func": "const valorCrudo = msg.payload;\nconst valorLitros = ((valorCrudo - 4000) / (20000 - 4000)) * (40000 - 0);\nmsg.payload = Math.round(valorLitros);  // Valor en litros\nreturn msg;",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 460,
        "y": 280,
        "wires": [
            [
                "a836554305fba8a0",
                "a30d3c20815a95f5"
            ],
            []
        ]
    },
    {
        "id": "d49fc8b2da531ddf",
        "type": "influxdb out",
        "z": "0abce1a265bb0231",
        "d": true,
        "influxdb": "0565dd10cb5199d6",
        "name": "InfluxDB Output",
        "measurement": "volumen",
        "precision": "",
        "retentionPolicy": "",
        "database": "",
        "precisionV18FluxV20": "us",
        "retentionPolicyV18Flux": "",
        "org": "aspro",
        "bucket": "prueba_1",
        "x": 700,
        "y": 400,
        "wires": []
    },
    {
        "id": "a836554305fba8a0",
        "type": "debug",
        "z": "0abce1a265bb0231",
        "d": true,
        "name": "debug 13",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 660,
        "y": 240,
        "wires": []
    },
    {
        "id": "0bcbb81796a6a3c1",
        "type": "inject",
        "z": "0abce1a265bb0231",
        "d": true,
        "name": "Simulate ADC Input",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "250",
        "payloadType": "num",
        "x": 210,
        "y": 440,
        "wires": [
            [
                "5c18c9231ae10aa7"
            ]
        ]
    },
    {
        "id": "32cd0e870067f260",
        "type": "debug",
        "z": "0abce1a265bb0231",
        "d": true,
        "name": "debug 14",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 720,
        "y": 440,
        "wires": []
    },
    {
        "id": "a30d3c20815a95f5",
        "type": "influxdb out",
        "z": "0abce1a265bb0231",
        "d": true,
        "influxdb": "0565dd10cb5199d6",
        "name": "InfluxDB Output",
        "measurement": "tank_volume",
        "precision": "",
        "retentionPolicy": "",
        "database": "",
        "precisionV18FluxV20": "s",
        "retentionPolicyV18Flux": "",
        "org": "aspro",
        "bucket": "prueba_1",
        "x": 680,
        "y": 280,
        "wires": []
    },
    {
        "id": "ac70ab4c14d788f8",
        "type": "influxdb out",
        "z": "0abce1a265bb0231",
        "d": true,
        "influxdb": "0565dd10cb5199d6",
        "name": "InfluxDB Output",
        "measurement": "volumen",
        "precision": "",
        "retentionPolicy": "",
        "database": "",
        "precisionV18FluxV20": "us",
        "retentionPolicyV18Flux": "",
        "org": "aspro",
        "bucket": "prueba_1",
        "x": 780,
        "y": 100,
        "wires": []
    },
    {
        "id": "3e98176b86982460",
        "type": "inject",
        "z": "0abce1a265bb0231",
        "d": true,
        "name": "Simulate ADC Input",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "350",
        "payloadType": "num",
        "x": 310,
        "y": 180,
        "wires": [
            []
        ]
    },
    {
        "id": "e44d61c6ebd84889",
        "type": "debug",
        "z": "0abce1a265bb0231",
        "d": true,
        "name": "debug 14",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 780,
        "y": 60,
        "wires": []
    },
    {
        "id": "234bd86221f089c9",
        "type": "change",
        "z": "0abce1a265bb0231",
        "d": true,
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "fields.volumen",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "{ \"volumen\": payload }",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 560,
        "y": 100,
        "wires": [
            [
                "ac70ab4c14d788f8",
                "e44d61c6ebd84889"
            ]
        ]
    },
    {
        "id": "5c18c9231ae10aa7",
        "type": "change",
        "z": "0abce1a265bb0231",
        "d": true,
        "name": "Prepare InfluxDB Payload",
        "rules": [
            {
                "t": "set",
                "p": "fields.volumen",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "tags.location",
                "pt": "msg",
                "to": "Refinery_A",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "tags.sensor_id",
                "pt": "msg",
                "to": "sensor_01",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "tags.unit",
                "pt": "msg",
                "to": "liters",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "{ \"volumen\": fields.volumen, \"location\": tags.location, \"sensor_id\": tags.sensor_id, \"unit\": tags.unit, \"timestamp\": $millis() }",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 470,
        "y": 440,
        "wires": [
            [
                "d49fc8b2da531ddf",
                "32cd0e870067f260"
            ]
        ]
    },
    {
        "id": "dae7f289a0138a1f",
        "type": "mqtt in",
        "z": "0abce1a265bb0231",
        "d": true,
        "name": "Sensor de Flujo",
        "topic": "sensor/simulated",
        "qos": "0",
        "datatype": "json",
        "broker": "mqtt_broker_1",
        "nl": false,
        "rap": false,
        "inputs": 0,
        "x": 320,
        "y": 100,
        "wires": [
            [
                "234bd86221f089c9"
            ]
        ]
    },
    {
        "id": "0940cf3f17203537",
        "type": "influxdb out",
        "z": "0abce1a265bb0231",
        "d": true,
        "influxdb": "0565dd10cb5199d6",
        "name": "InfluxDB Output",
        "measurement": "volumen",
        "precision": "",
        "retentionPolicy": "",
        "database": "",
        "precisionV18FluxV20": "us",
        "retentionPolicyV18Flux": "",
        "org": "aspro",
        "bucket": "prueba_1",
        "x": 680,
        "y": 580,
        "wires": []
    },
    {
        "id": "550d10a7bf2e9bc5",
        "type": "debug",
        "z": "0abce1a265bb0231",
        "d": true,
        "name": "debug 14",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 680,
        "y": 540,
        "wires": []
    },
    {
        "id": "df9a8b81e5fec457",
        "type": "change",
        "z": "0abce1a265bb0231",
        "d": true,
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "{\"volumen\": payload}",
                "tot": "jsonata"
            },
            {
                "t": "set",
                "p": "fields.volumen",
                "pt": "msg",
                "to": "payload.volumen",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 460,
        "y": 580,
        "wires": [
            [
                "0940cf3f17203537",
                "550d10a7bf2e9bc5",
                "331bcfb3b61fc139"
            ]
        ]
    },
    {
        "id": "e88cdd322d516e86",
        "type": "mqtt in",
        "z": "0abce1a265bb0231",
        "d": true,
        "name": "Sensor de Flujo",
        "topic": "sensor/simulated",
        "qos": "0",
        "datatype": "json",
        "broker": "mqtt_broker_1",
        "nl": false,
        "rap": false,
        "inputs": 0,
        "x": 220,
        "y": 580,
        "wires": [
            [
                "df9a8b81e5fec457",
                "9baed69b77b8d59a"
            ]
        ]
    },
    {
        "id": "9baed69b77b8d59a",
        "type": "debug",
        "z": "0abce1a265bb0231",
        "d": true,
        "name": "debug 32",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 480,
        "y": 540,
        "wires": []
    },
    {
        "id": "331bcfb3b61fc139",
        "type": "ui-gauge",
        "z": "0abce1a265bb0231",
        "d": true,
        "name": "",
        "order": 0,
        "width": 3,
        "height": 3,
        "gtype": "gauge-half",
        "gstyle": "needle",
        "title": "gauge",
        "units": "units",
        "icon": "",
        "prefix": "",
        "suffix": "",
        "segments": [
            {
                "color": "#5CD65C",
                "from": 0
            },
            {
                "color": "#FFC800",
                "from": 4
            },
            {
                "color": "#EA5353",
                "from": 7
            }
        ],
        "min": 0,
        "max": 10,
        "sizeThickness": 16,
        "sizeGap": 4,
        "sizeKeyThickness": 8,
        "styleRounded": true,
        "styleGlow": false,
        "className": "",
        "x": 630,
        "y": 640,
        "wires": []
    },
    {
        "id": "b3e1ad35d8ae921c",
        "type": "influxdb out",
        "z": "0abce1a265bb0231",
        "influxdb": "cf4bce8f993858ac",
        "name": "InfluxDB Output",
        "measurement": "volumen",
        "precision": "",
        "retentionPolicy": "",
        "database": "",
        "precisionV18FluxV20": "us",
        "retentionPolicyV18Flux": "",
        "org": "aspro",
        "bucket": "prueba_1",
        "x": 660,
        "y": 740,
        "wires": []
    },
    {
        "id": "0301371619f2b614",
        "type": "debug",
        "z": "0abce1a265bb0231",
        "name": "debug 14",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 680,
        "y": 680,
        "wires": []
    },
    {
        "id": "a451f56d9b293807",
        "type": "change",
        "z": "0abce1a265bb0231",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "{\"volumen\": payload}",
                "tot": "jsonata"
            },
            {
                "t": "set",
                "p": "fields.volumen",
                "pt": "msg",
                "to": "payload.volumen",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 440,
        "y": 740,
        "wires": [
            [
                "b3e1ad35d8ae921c",
                "0301371619f2b614",
                "e4475e804c34ec05"
            ]
        ]
    },
    {
        "id": "143cc9fa3c9cf5c7",
        "type": "mqtt in",
        "z": "0abce1a265bb0231",
        "name": "Sensor de Flujo",
        "topic": "sensor/simulated",
        "qos": "0",
        "datatype": "json",
        "broker": "mqtt_broker_1",
        "nl": false,
        "rap": false,
        "inputs": 0,
        "x": 200,
        "y": 740,
        "wires": [
            [
                "a451f56d9b293807",
                "ca806af6801a78db"
            ]
        ]
    },
    {
        "id": "ca806af6801a78db",
        "type": "debug",
        "z": "0abce1a265bb0231",
        "name": "debug 32",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 420,
        "y": 800,
        "wires": []
    },
    {
        "id": "e4475e804c34ec05",
        "type": "ui-gauge",
        "z": "0abce1a265bb0231",
        "name": "flujo_retorno_HCD",
        "group": "3f690bb5a526a246",
        "order": 0,
        "width": 3,
        "height": 3,
        "gtype": "gauge-half",
        "gstyle": "rounded",
        "title": "Retorno HCD",
        "units": "L/hr",
        "icon": "",
        "prefix": "",
        "suffix": "",
        "segments": [
            {
                "from": "0",
                "color": "#5cd65c"
            },
            {
                "from": "300",
                "color": "#ffc800"
            },
            {
                "from": "400",
                "color": "#ea5353"
            }
        ],
        "min": 0,
        "max": "600",
        "sizeThickness": 16,
        "sizeGap": 4,
        "sizeKeyThickness": 8,
        "styleRounded": true,
        "styleGlow": false,
        "className": "",
        "x": 650,
        "y": 840,
        "wires": []
    },
    {
        "id": "057673a4f7545131",
        "type": "inject",
        "z": "6021be6c6d8f4092",
        "name": "CH3",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "2",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "read_TC_3",
        "payload": "{\"value\":0,\"fc\":3,\"unitid\":1,\"address\":16,\"quantity\":1}",
        "payloadType": "json",
        "x": 450,
        "y": 500,
        "wires": [
            [
                "ca65b429b3ddcc86"
            ]
        ]
    },
    {
        "id": "71c6fda592d5f2b3",
        "type": "inject",
        "z": "6021be6c6d8f4092",
        "name": "update",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "update",
        "payload": "",
        "payloadType": "date",
        "x": 500,
        "y": 340,
        "wires": [
            [
                "ca65b429b3ddcc86"
            ]
        ]
    },
    {
        "id": "ad270fc6335b2b7a",
        "type": "inject",
        "z": "6021be6c6d8f4092",
        "name": "next",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "next",
        "payload": "",
        "payloadType": "date",
        "x": 490,
        "y": 300,
        "wires": [
            [
                "ca65b429b3ddcc86"
            ]
        ]
    },
    {
        "id": "bb90f30ac24c73d0",
        "type": "change",
        "z": "6021be6c6d8f4092",
        "name": "Advance queue",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "next",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 840,
        "y": 360,
        "wires": [
            [
                "ca65b429b3ddcc86"
            ]
        ]
    },
    {
        "id": "ca65b429b3ddcc86",
        "type": "function",
        "z": "6021be6c6d8f4092",
        "name": "Modbus Queue",
        "func": "let resendifnoresposne = true; // resend the last message is no response is received\nlet resendinterval = 10; // resend last e message every x seconds\nlet online_threshold = 10; // Seconds between updates under which the device is considered online\nlet offline_threshold = 300; // Seconds between updates above which the device is considered offline\n\nlet notifmsg = null;\n\n// Check and make sure the incoming message has a topic\nif ((msg.topic===\"\")||(msg.topic===null)||(msg.topic===undefined)) {\n    node.status({fill:\"red\",shape:\"dot\",text:\"Topic missing\"});\n    return;\n}\n\nlet lastupdate = context.get(\"lastupdate\");\nlet state = context.get(\"state\") | 0;\nlet queue = context.get(\"queue\");\nlet queuecount = 0;\nif (queue === undefined) {\n    queue = [];\n} else {\n    if (Array.isArray(queue)) {\n        queuecount = queue.length;\n    } else {\n        queue = [];\n    }\n}\nlet current = new Date().getTime();\nlet send = false;\n\nswitch (msg.topic.toLowerCase()) {\n    case \"update\":\n        // Update the timer and statistics\n\n        if (lastupdate !== undefined) {\n            notifmsg = { \"topic\": \"Information\", \"payload\": {} };\n            current = current - lastupdate;\n            current = Math.floor(current / 1000);\n            notifmsg.payload.secondsincelastupdate = current;\n            var minute = Math.floor(current / 60);\n            var hour = Math.floor(minute / 60);\n            var day = Math.floor(hour / 24);\n            if (current > 24 * 60 * 60) {\n                notifmsg.payload.updatetext = \"Last update \" + day + \" days, \" + hour % 24 + \" hours, \" + minute % 60 + \" minutes, \" + current % 60 + \" seconds ago\";\n            } else if (current > 60 * 60) {\n                notifmsg.payload.updatetext = \"Last update \" + hour % 24 + \" hours, \" + minute % 60 + \" minutes, \" + current % 60 + \" seconds ago\";\n            } else if (current > 60) {\n                notifmsg.payload.updatetext = \"Last update \" + minute % 60 + \" minutes, \" + current % 60 + \" seconds ago\";\n            } else {\n                notifmsg.payload.updatetext = \"Last update \" + current % 60 + \" seconds ago\";\n            }\n\n            // Resend last message if there is no response from the server\n            if (resendifnoresposne) {\n                if ((current>0) && (current % resendinterval===0)) {\n                    let lastmsg = context.get(\"lastmsg\");\n                    if ((lastmsg!==undefined) && (context.get(\"sent\"))) {\n                        notifmsg.payload.resend = true;\n                        if ((lastmsg.payload.fc === 1) || (lastmsg.payload.fc === 2) || (lastmsg.payload.fc === 3) || (lastmsg.payload.fc === 4)) {\n                            // this is a modbus read request\n                            node.status({ fill: \"green\", shape: \"dot\", text: \"Read re-sent!\" });\n                            return [lastmsg, null, notifmsg];\n                        } else {\n                            // this is a modbus write request\n                            node.status({ fill: \"green\", shape: \"dot\", text: \"Write re-sent!\" });\n                            return [null, lastmsg, notifmsg];\n                        }\n                    }\n                }\n            }\n\n            // Check for online state\n            if (state !== 1) {\n                if (current < online_threshold) {\n                    notifmsg.topic = \"Warning\";\n                    notifmsg.payload.text = \"Device is now online\";\n                    notifmsg.payload.statuschange = true;\n                    state = 1;\n                    context.set(\"state\", state);\n                }\n            } else {\n                if (current > offline_threshold) {\n                    notifmsg.topic = \"Error\";\n                    notifmsg.payload.text = \"Device is not transmitting\";\n                    notifmsg.payload.statuschange = true;\n                    state = 99;\n                    context.set(\"state\", state);\n                }\n            }\n            notifmsg.payload.state = state;\n            if (state===1) {\n                node.status({ fill: \"blue\", shape: \"ring\", text: queuecount+ \" | \"+notifmsg.payload.updatetext });\n            } else {\n                node.status({ fill: \"red\", shape: \"ring\", text: queuecount + \" | \" + notifmsg.payload.updatetext });\n            }\n            return [null, null, notifmsg];\n\n        } else {\n            node.status({ fill: \"grey\", shape: \"ring\", text: \"No data\" });\n        }\n        break;\n    case \"next\":\n        // Update the lastupdate counter\n        context.set(\"lastupdate\", current);\n        context.set(\"sent\", false);\n        send = true;\n        break;\n    case \"reset\":\n        context.set(\"queue\",[]);\n        context.set(\"sent\", false);\n        context.set(\"lastmsg\", undefined);\n        break;\n    default:\n        // The incoming message is a modbus request\n\n        // delete the last msg to prevent from being resent\n        // context.set(\"lastmsg\", undefined);\n\n        // Check if there is already a message in the queue with the same topic. \n        // If there is it needs to be deleted, because we only keep the last message.\n        for (let i=queue.length-1; i>=0; i--) {\n            if (queue[i].topic === msg.topic) {\n                queue.splice(i,1);\n            }\n        }\n\n        // Add the message to the end of the queue\n        queue.push(msg);\n        context.set(\"queue\",queue);\n\n        if (!context.get(\"sent\")) {\n            send = true;\n        }\n        node.status({ fill: \"green\", shape: \"dot\", text: queue.length });\n\n}\n\n// We need to send out a new message\nif (send) {\n\n    if (queue.length>0) {\n        // Get the older message from the array\n        let newmsg = queue[0];\n        // remove this message\n        queue.splice(0,1);\n        context.set(\"queue\",queue);\n        context.set(\"sent\", true);\n        context.set(\"lastmsg\", newmsg);\n\n        if ((newmsg.payload.fc === 1) || (newmsg.payload.fc === 2) || (newmsg.payload.fc === 3) || (newmsg.payload.fc === 4)) {\n            // this is a modbus read request\n            node.status({ fill: \"green\", shape: \"dot\", text: \"Read sent!\" });\n            return[newmsg,null,null];\n        } else {\n            // this is a modbus write request\n            node.status({ fill: \"green\", shape: \"dot\", text: \"Write sent!\" });\n            return [null, newmsg, null];\n        }\n        \n    }\n}\n",
        "outputs": 3,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 740,
        "y": 480,
        "wires": [
            [
                "fdea819b41fea4bc"
            ],
            [],
            [
                "444cc63d98e02793"
            ]
        ],
        "info": "# Modbus Queue\r\n\r\nThis node queueing read and write messages for modbus. Use this node if you are reading and writing the same device with many different requests. E.g. reading different coil/register intervals continously and also writing to the device at the same time.\r\n\r\nIt does a few things:\r\n- queues all messages arrive on the input port\r\n- based on the msg.topic, older messages of the same topci is ignored\r\n- sends out the oldest message and waits for the \r\n- monitors the time since last message and send out report on the output\r\n- handles online/offline status\r\n- resend the last message is response is not received in time\r\n\r\n## Input Data\r\n\r\n### payload\r\n\r\nThe payload should contain the data that gets sent to the flex-getter or flex-write node.\r\nTypical modbus read payload:\r\n`{\"value\":0,\"fc\":3,\"unitid\":1,\"address\":1000,\"quantity\":20}`\r\nTypical modbus write payload:\r\n`{\"value\":false,\"fc\":5,\"unitid\":1,\"address\":0,\"quantity\":1}`\r\n\r\n### topic\r\n\r\nEach message must contain a topic (any text), and this topic is used to identify the different read/write requests and delete any earlier request with the same topic if it still in the queueing\r\n\r\nThere are a few reserved topic for special function (for these payload is ignored):\r\n- reset: resets the queue and deleted any data collected so far\r\n- next: this is the message fed back from the flex getter/write node to indicate to this node that a new message can be sent out\r\n- update: this should be coming from a 1 second time to display the current queue count, time since the last update and online/offline status\r\n\r\n## Output ports\r\n\r\n### Port 1: flex getter\r\n\r\nThis output should be connected to a modbos-flex-getter and all the read requests will be sent out through this port\r\n\r\n### Port 2: flex write\r\n\r\nThis output should be connected to a modbos-flex-write and all the write requests will be sent out through this port\r\n\r\n### Port 3: status messages\r\n\r\nThis port outputs a status message for every update message (msg.topic=\"update\").\r\n\r\n- topic: \"Information\" for regular updates, \"Warning\": offline device is now back online, \"Error\": device is offline\r\n- payload.text: message like when the device gone offline, or back online\r\n- payload.updatetext: time passed since the last update (human readable format)\r\n- payload.secondsincelastupdate: number of seconds since the last update from the device\r\n- payload.statuschange: true if status is changed (gone offline, back online)\r\n- payload.state: 0: initial state, no data yet, 1: device online, 99: device offline\r\n\r\n## Node Settings\r\n\r\nChange the settings in the first 4 lines of the code to influence the behaviour. Explanation is in the code as comment."
    },
    {
        "id": "fdea819b41fea4bc",
        "type": "modbus-flex-getter",
        "z": "6021be6c6d8f4092",
        "name": "output",
        "showStatusActivities": false,
        "showErrors": false,
        "showWarnings": true,
        "logIOActivities": false,
        "server": "ba775fe896e243b7",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "keepMsgProperties": false,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 930,
        "y": 460,
        "wires": [
            [
                "bb90f30ac24c73d0"
            ],
            [
                "8efd8db4dc4a7355"
            ]
        ]
    },
    {
        "id": "8efd8db4dc4a7355",
        "type": "function",
        "z": "6021be6c6d8f4092",
        "name": "Procesar Temperatura",
        "func": "let values = msg.payload.data;\nlet temperature = values[0] * 0.1; // Multiplicaci√≥n por 0.1\nif (msg.topic === \"read_TC_2\") { // Inferior Columna DA-01\n    temperature = temperature * 1.022;\n    msg.payload = parseFloat(temperature.toFixed(1));\n    return msg;\n} else {\n    let adjustedTemperature = 1.3587 * temperature - 14.0434; // Ajuste de temperatura\n    msg.payload = parseFloat(adjustedTemperature.toFixed(1));\n    return msg;\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1160,
        "y": 380,
        "wires": [
            [
                "535ed0e614802822"
            ]
        ]
    },
    {
        "id": "535ed0e614802822",
        "type": "switch",
        "z": "6021be6c6d8f4092",
        "name": "get topic",
        "property": "topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "read_TC_2",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "read_TC_1",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "read_TC_3",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "read_TC_4",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 4,
        "x": 1320,
        "y": 460,
        "wires": [
            [
                "2823d646c391c86b",
                "c004fa8ebf8c8613"
            ],
            [
                "f1f351fcd9c14da9",
                "fdbe9b90f1cc43e4"
            ],
            [
                "331674447ae34e96",
                "c6a712d793f2754d"
            ],
            [
                "d4ea02385a4e83a9",
                "f7f3933789a40d9d"
            ]
        ]
    },
    {
        "id": "b4be0dce9a60ee8c",
        "type": "inject",
        "z": "6021be6c6d8f4092",
        "name": "inject1",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 470,
        "y": 120,
        "wires": [
            [
                "4ffe79e51eb9e1fc"
            ]
        ]
    },
    {
        "id": "a4ad3658b6c795f8",
        "type": "inject",
        "z": "6021be6c6d8f4092",
        "name": "inject1",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 470,
        "y": 160,
        "wires": [
            [
                "a57ac35dafe60632"
            ]
        ]
    },
    {
        "id": "4ffe79e51eb9e1fc",
        "type": "change",
        "z": "6021be6c6d8f4092",
        "name": "set flow.flags",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 650,
        "y": 120,
        "wires": [
            []
        ]
    },
    {
        "id": "a57ac35dafe60632",
        "type": "change",
        "z": "6021be6c6d8f4092",
        "name": "set flow.registers",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 670,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "0889341212590619",
        "type": "inject",
        "z": "6021be6c6d8f4092",
        "name": "reset",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "update",
        "payload": "",
        "payloadType": "date",
        "x": 490,
        "y": 260,
        "wires": [
            [
                "ca65b429b3ddcc86"
            ]
        ]
    },
    {
        "id": "d61a2b5edc801751",
        "type": "inject",
        "z": "6021be6c6d8f4092",
        "name": "check",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 610,
        "y": 820,
        "wires": [
            [
                "e2bec95f2ba0bc46"
            ]
        ]
    },
    {
        "id": "e2bec95f2ba0bc46",
        "type": "function",
        "z": "6021be6c6d8f4092",
        "name": "health check",
        "func": "\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 790,
        "y": 820,
        "wires": [
            [
                "0614338eb937e032"
            ]
        ]
    },
    {
        "id": "0614338eb937e032",
        "type": "switch",
        "z": "6021be6c6d8f4092",
        "name": "update diag",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 990,
        "y": 820,
        "wires": [
            []
        ]
    },
    {
        "id": "444cc63d98e02793",
        "type": "function",
        "z": "6021be6c6d8f4092",
        "name": "update log",
        "func": "\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 930,
        "y": 520,
        "wires": [
            []
        ]
    },
    {
        "id": "f7381b252d600e23",
        "type": "inject",
        "z": "6021be6c6d8f4092",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 440,
        "y": 580,
        "wires": [
            [
                "ca65b429b3ddcc86"
            ]
        ]
    },
    {
        "id": "e014f06e688ddbf6",
        "type": "inject",
        "z": "6021be6c6d8f4092",
        "name": "CH4",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "2",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "read_TC_4",
        "payload": "{\"value\":0,\"fc\":3,\"unitid\":1,\"address\":17,\"quantity\":1}",
        "payloadType": "json",
        "x": 450,
        "y": 540,
        "wires": [
            [
                "ca65b429b3ddcc86"
            ]
        ]
    },
    {
        "id": "36129469aae33f1c",
        "type": "inject",
        "z": "6021be6c6d8f4092",
        "name": "CH2",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "2",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "read_TC_2",
        "payload": "{\"value\":0,\"fc\":3,\"unitid\":1,\"address\":15,\"quantity\":1}",
        "payloadType": "json",
        "x": 450,
        "y": 460,
        "wires": [
            [
                "ca65b429b3ddcc86"
            ]
        ]
    },
    {
        "id": "75879415828abf14",
        "type": "inject",
        "z": "6021be6c6d8f4092",
        "name": "CH1",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "2",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "read_TC_1",
        "payload": "{\"value\":0,\"fc\":3,\"unitid\":1,\"address\":14,\"quantity\":1}",
        "payloadType": "json",
        "x": 450,
        "y": 420,
        "wires": [
            [
                "ca65b429b3ddcc86"
            ]
        ]
    },
    {
        "id": "2823d646c391c86b",
        "type": "function",
        "z": "6021be6c6d8f4092",
        "name": "Format temp",
        "func": "let temperature = msg.payload;\nmsg.payload = temperature + \"¬∞C\"; // A√±ade la unidad ¬∞C al n√∫mero\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1550,
        "y": 340,
        "wires": [
            [
                "8d3872213ea4d63a"
            ]
        ]
    },
    {
        "id": "f1f351fcd9c14da9",
        "type": "function",
        "z": "6021be6c6d8f4092",
        "name": "Format temp",
        "func": "let temperature = msg.payload;\nmsg.payload = temperature + \"¬∞C\"; // A√±ade la unidad ¬∞C al n√∫mero\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1550,
        "y": 440,
        "wires": [
            [
                "c04976995ee1b67a"
            ]
        ]
    },
    {
        "id": "d4ea02385a4e83a9",
        "type": "function",
        "z": "6021be6c6d8f4092",
        "name": "Format temp",
        "func": "let temperature = msg.payload;\nmsg.payload = temperature + \"¬∞C\"; // A√±ade la unidad ¬∞C al n√∫mero\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1570,
        "y": 540,
        "wires": [
            [
                "c30fe2a879f78bf4"
            ]
        ]
    },
    {
        "id": "c30fe2a879f78bf4",
        "type": "ui-text",
        "z": "6021be6c6d8f4092",
        "group": "d1e5da8ea7145cd4",
        "order": 4,
        "width": 0,
        "height": 0,
        "name": "Superior Columna DA-02",
        "label": "Superior Columna DA-02",
        "format": "{{msg.payload}}",
        "layout": "col-center",
        "style": true,
        "font": "Helvetica, sans-serif",
        "fontSize": 16,
        "color": "#717171",
        "className": "",
        "x": 1770,
        "y": 540,
        "wires": []
    },
    {
        "id": "331674447ae34e96",
        "type": "function",
        "z": "6021be6c6d8f4092",
        "name": "Format temp",
        "func": "let temperature = msg.payload;\nmsg.payload = temperature + \"¬∞C\"; // A√±ade la unidad ¬∞C al n√∫mero\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1570,
        "y": 640,
        "wires": [
            [
                "546596914afb0645"
            ]
        ]
    },
    {
        "id": "546596914afb0645",
        "type": "ui-text",
        "z": "6021be6c6d8f4092",
        "group": "d1e5da8ea7145cd4",
        "order": 5,
        "width": 0,
        "height": 0,
        "name": "Inferior columna DA-02",
        "label": "Inferior columna DA-02",
        "format": "{{msg.payload}}",
        "layout": "col-center",
        "style": true,
        "font": "Helvetica, sans-serif",
        "fontSize": 16,
        "color": "#717171",
        "className": "",
        "x": 1770,
        "y": 640,
        "wires": []
    },
    {
        "id": "c6a712d793f2754d",
        "type": "function",
        "z": "6021be6c6d8f4092",
        "name": "telemetria",
        "func": "msg.payload = {\n  temperatura: msg.payload\n};\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1580,
        "y": 680,
        "wires": [
            [
                "193fc2113ff2d089"
            ]
        ]
    },
    {
        "id": "b2252f9146f4acb2",
        "type": "mqtt out",
        "z": "6021be6c6d8f4092",
        "name": "mqtt_tb_ST-3.4",
        "topic": "v1/devices/me/telemetry",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "7d040f0f19d79e89",
        "x": 1740,
        "y": 580,
        "wires": []
    },
    {
        "id": "193fc2113ff2d089",
        "type": "mqtt out",
        "z": "6021be6c6d8f4092",
        "name": "mqtt_tb_ST-3.3",
        "topic": "v1/devices/me/telemetry",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "b2eea5177ada0477",
        "x": 1740,
        "y": 680,
        "wires": []
    },
    {
        "id": "f7f3933789a40d9d",
        "type": "function",
        "z": "6021be6c6d8f4092",
        "name": "telemetria",
        "func": "msg.payload = {\n  temperatura: msg.payload\n};\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1580,
        "y": 580,
        "wires": [
            [
                "b2252f9146f4acb2"
            ]
        ]
    },
    {
        "id": "fdbe9b90f1cc43e4",
        "type": "function",
        "z": "6021be6c6d8f4092",
        "name": "telemetria",
        "func": "msg.payload = {\n  temperatura: msg.payload\n};\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1560,
        "y": 480,
        "wires": [
            [
                "b1e7f28c032a8696"
            ]
        ]
    },
    {
        "id": "c004fa8ebf8c8613",
        "type": "function",
        "z": "6021be6c6d8f4092",
        "name": "telemetria",
        "func": "msg.payload = {\n  temperatura: msg.payload\n};\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1560,
        "y": 380,
        "wires": [
            [
                "b718f23860da6ba4"
            ]
        ]
    },
    {
        "id": "8d3872213ea4d63a",
        "type": "ui-text",
        "z": "6021be6c6d8f4092",
        "group": "d1e5da8ea7145cd4",
        "order": 2,
        "width": 0,
        "height": 0,
        "name": "Superior Columna DA-01",
        "label": "Superior Columna DA-01",
        "format": "{{msg.payload}}",
        "layout": "col-center",
        "style": true,
        "font": "Helvetica, sans-serif",
        "fontSize": 16,
        "color": "#717171",
        "className": "",
        "x": 1750,
        "y": 340,
        "wires": []
    },
    {
        "id": "c04976995ee1b67a",
        "type": "ui-text",
        "z": "6021be6c6d8f4092",
        "group": "d1e5da8ea7145cd4",
        "order": 3,
        "width": 0,
        "height": 0,
        "name": "Inferior Columna DA-01",
        "label": "Inferior Columna DA-01",
        "format": "{{msg.payload}}",
        "layout": "col-center",
        "style": true,
        "font": "Helvetica, sans-serif",
        "fontSize": 16,
        "color": "#717171",
        "className": "",
        "x": 1750,
        "y": 440,
        "wires": []
    },
    {
        "id": "b718f23860da6ba4",
        "type": "mqtt out",
        "z": "6021be6c6d8f4092",
        "name": "mqtt_tb_ST-3.2",
        "topic": "v1/devices/me/telemetry",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "a32defc5189db4ea",
        "x": 1720,
        "y": 380,
        "wires": []
    },
    {
        "id": "b1e7f28c032a8696",
        "type": "mqtt out",
        "z": "6021be6c6d8f4092",
        "name": "mqtt_tb_ST-3.1",
        "topic": "v1/devices/me/telemetry",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "9c9e2630ed80f90e",
        "x": 1720,
        "y": 480,
        "wires": []
    },
    {
        "id": "nodo_csv",
        "type": "csv",
        "z": "28eb5dd89ea0da98",
        "d": true,
        "name": "Convertir CSV a JSON",
        "sep": ",",
        "hdrin": true,
        "hdrout": "none",
        "multi": "one",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 340,
        "y": 160,
        "wires": [
            [
                "nodo_funcion"
            ]
        ]
    },
    {
        "id": "nodo_funcion",
        "type": "function",
        "z": "28eb5dd89ea0da98",
        "d": true,
        "name": "Procesar Datos",
        "func": "let equipos = msg.payload;\nglobal.set('equipos', equipos);\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 540,
        "y": 160,
        "wires": [
            [
                "nodo_debug"
            ]
        ]
    },
    {
        "id": "nodo_debug",
        "type": "debug",
        "z": "28eb5dd89ea0da98",
        "d": true,
        "name": "Mostrar Datos",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 740,
        "y": 160,
        "wires": []
    },
    {
        "id": "97d1818d899b0d52",
        "type": "file in",
        "z": "28eb5dd89ea0da98",
        "d": true,
        "name": "Leer CSV",
        "filename": "./sensores.csv",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 160,
        "y": 160,
        "wires": [
            [
                "nodo_csv"
            ]
        ]
    },
    {
        "id": "ff26a2c21849c8b9",
        "type": "file in",
        "z": "28eb5dd89ea0da98",
        "name": "Leer CSV",
        "filename": "./sensores.csv",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 180,
        "y": 300,
        "wires": [
            [
                "e5a8bcaf8b4c7518"
            ]
        ]
    },
    {
        "id": "e5a8bcaf8b4c7518",
        "type": "csv",
        "z": "28eb5dd89ea0da98",
        "name": "Convertir CSV a JSON",
        "sep": "\\t",
        "hdrin": true,
        "hdrout": "none",
        "multi": "one",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 380,
        "y": 300,
        "wires": [
            [
                "2daf069a6adda8b4"
            ]
        ]
    },
    {
        "id": "2daf069a6adda8b4",
        "type": "function",
        "z": "28eb5dd89ea0da98",
        "name": "Procesar Datos",
        "func": "let equipos = msg.payload;\nglobal.set('equipos', equipos);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 580,
        "y": 300,
        "wires": [
            [
                "3dc3f3232bc2794e"
            ]
        ]
    },
    {
        "id": "3dc3f3232bc2794e",
        "type": "debug",
        "z": "28eb5dd89ea0da98",
        "name": "Mostrar Datos",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 780,
        "y": 300,
        "wires": []
    }
]